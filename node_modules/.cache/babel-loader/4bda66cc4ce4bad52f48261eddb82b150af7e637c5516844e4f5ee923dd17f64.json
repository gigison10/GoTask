{"ast":null,"code":"/*! firebase-admin v11.9.0 */\n\"use strict\";\n\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FirebaseMessagingRequestHandler = void 0;\nconst api_request_1 = require(\"../utils/api-request\");\nconst messaging_errors_internal_1 = require(\"./messaging-errors-internal\");\nconst batch_request_internal_1 = require(\"./batch-request-internal\");\nconst index_1 = require(\"../utils/index\");\n// FCM backend constants\nconst FIREBASE_MESSAGING_TIMEOUT = 15000;\nconst FIREBASE_MESSAGING_BATCH_URL = 'https://fcm.googleapis.com/batch';\nconst FIREBASE_MESSAGING_HTTP_METHOD = 'POST';\nconst FIREBASE_MESSAGING_HEADERS = {\n  'X-Firebase-Client': `fire-admin-node/${(0, index_1.getSdkVersion)()}`\n};\nconst LEGACY_FIREBASE_MESSAGING_HEADERS = {\n  'X-Firebase-Client': `fire-admin-node/${(0, index_1.getSdkVersion)()}`,\n  'access_token_auth': 'true'\n};\n/**\n * Class that provides a mechanism to send requests to the Firebase Cloud Messaging backend.\n */\nclass FirebaseMessagingRequestHandler {\n  /**\n   * @param app - The app used to fetch access tokens to sign API requests.\n   * @constructor\n   */\n  constructor(app) {\n    this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n    this.batchClient = new batch_request_internal_1.BatchRequestClient(this.httpClient, FIREBASE_MESSAGING_BATCH_URL, FIREBASE_MESSAGING_HEADERS);\n  }\n  /**\n   * Invokes the request handler with the provided request data.\n   *\n   * @param host - The host to which to send the request.\n   * @param path - The path to which to send the request.\n   * @param requestData - The request data.\n   * @returns A promise that resolves with the response.\n   */\n  invokeRequestHandler(host, path, requestData) {\n    const request = {\n      method: FIREBASE_MESSAGING_HTTP_METHOD,\n      url: `https://${host}${path}`,\n      data: requestData,\n      headers: LEGACY_FIREBASE_MESSAGING_HEADERS,\n      timeout: FIREBASE_MESSAGING_TIMEOUT\n    };\n    return this.httpClient.send(request).then(response => {\n      // Send non-JSON responses to the catch() below where they will be treated as errors.\n      if (!response.isJson()) {\n        throw new api_request_1.HttpError(response);\n      }\n      // Check for backend errors in the response.\n      const errorCode = (0, messaging_errors_internal_1.getErrorCode)(response.data);\n      if (errorCode) {\n        throw new api_request_1.HttpError(response);\n      }\n      // Return entire response.\n      return response.data;\n    }).catch(err => {\n      if (err instanceof api_request_1.HttpError) {\n        throw (0, messaging_errors_internal_1.createFirebaseError)(err);\n      }\n      // Re-throw the error if it already has the proper format.\n      throw err;\n    });\n  }\n  /**\n   * Invokes the request handler with the provided request data.\n   *\n   * @param host - The host to which to send the request.\n   * @param path - The path to which to send the request.\n   * @param requestData - The request data.\n   * @returns A promise that resolves with the {@link SendResponse}.\n   */\n  invokeRequestHandlerForSendResponse(host, path, requestData) {\n    const request = {\n      method: FIREBASE_MESSAGING_HTTP_METHOD,\n      url: `https://${host}${path}`,\n      data: requestData,\n      headers: LEGACY_FIREBASE_MESSAGING_HEADERS,\n      timeout: FIREBASE_MESSAGING_TIMEOUT\n    };\n    return this.httpClient.send(request).then(response => {\n      return this.buildSendResponse(response);\n    }).catch(err => {\n      if (err instanceof api_request_1.HttpError) {\n        return this.buildSendResponseFromError(err);\n      }\n      // Re-throw the error if it already has the proper format.\n      throw err;\n    });\n  }\n  /**\n   * Sends the given array of sub requests as a single batch to FCM, and parses the result into\n   * a BatchResponse object.\n   *\n   * @param requests - An array of sub requests to send.\n   * @returns A promise that resolves when the send operation is complete.\n   */\n  sendBatchRequest(requests) {\n    return this.batchClient.send(requests).then(responses => {\n      return responses.map(part => {\n        return this.buildSendResponse(part);\n      });\n    }).then(responses => {\n      const successCount = responses.filter(resp => resp.success).length;\n      return {\n        responses,\n        successCount,\n        failureCount: responses.length - successCount\n      };\n    }).catch(err => {\n      if (err instanceof api_request_1.HttpError) {\n        throw (0, messaging_errors_internal_1.createFirebaseError)(err);\n      }\n      // Re-throw the error if it already has the proper format.\n      throw err;\n    });\n  }\n  buildSendResponse(response) {\n    const result = {\n      success: response.status === 200\n    };\n    if (result.success) {\n      result.messageId = response.data.name;\n    } else {\n      result.error = (0, messaging_errors_internal_1.createFirebaseError)(new api_request_1.HttpError(response));\n    }\n    return result;\n  }\n  buildSendResponseFromError(err) {\n    return {\n      success: false,\n      error: (0, messaging_errors_internal_1.createFirebaseError)(err)\n    };\n  }\n}\nexports.FirebaseMessagingRequestHandler = FirebaseMessagingRequestHandler;","map":{"version":3,"names":["Object","defineProperty","exports","value","FirebaseMessagingRequestHandler","api_request_1","require","messaging_errors_internal_1","batch_request_internal_1","index_1","FIREBASE_MESSAGING_TIMEOUT","FIREBASE_MESSAGING_BATCH_URL","FIREBASE_MESSAGING_HTTP_METHOD","FIREBASE_MESSAGING_HEADERS","getSdkVersion","LEGACY_FIREBASE_MESSAGING_HEADERS","constructor","app","httpClient","AuthorizedHttpClient","batchClient","BatchRequestClient","invokeRequestHandler","host","path","requestData","request","method","url","data","headers","timeout","send","then","response","isJson","HttpError","errorCode","getErrorCode","catch","err","createFirebaseError","invokeRequestHandlerForSendResponse","buildSendResponse","buildSendResponseFromError","sendBatchRequest","requests","responses","map","part","successCount","filter","resp","success","length","failureCount","result","status","messageId","name","error"],"sources":["D:/Coding/React/taskmybusiness/node_modules/firebase-admin/lib/messaging/messaging-api-request-internal.js"],"sourcesContent":["/*! firebase-admin v11.9.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FirebaseMessagingRequestHandler = void 0;\nconst api_request_1 = require(\"../utils/api-request\");\nconst messaging_errors_internal_1 = require(\"./messaging-errors-internal\");\nconst batch_request_internal_1 = require(\"./batch-request-internal\");\nconst index_1 = require(\"../utils/index\");\n// FCM backend constants\nconst FIREBASE_MESSAGING_TIMEOUT = 15000;\nconst FIREBASE_MESSAGING_BATCH_URL = 'https://fcm.googleapis.com/batch';\nconst FIREBASE_MESSAGING_HTTP_METHOD = 'POST';\nconst FIREBASE_MESSAGING_HEADERS = {\n    'X-Firebase-Client': `fire-admin-node/${(0, index_1.getSdkVersion)()}`,\n};\nconst LEGACY_FIREBASE_MESSAGING_HEADERS = {\n    'X-Firebase-Client': `fire-admin-node/${(0, index_1.getSdkVersion)()}`,\n    'access_token_auth': 'true',\n};\n/**\n * Class that provides a mechanism to send requests to the Firebase Cloud Messaging backend.\n */\nclass FirebaseMessagingRequestHandler {\n    /**\n     * @param app - The app used to fetch access tokens to sign API requests.\n     * @constructor\n     */\n    constructor(app) {\n        this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n        this.batchClient = new batch_request_internal_1.BatchRequestClient(this.httpClient, FIREBASE_MESSAGING_BATCH_URL, FIREBASE_MESSAGING_HEADERS);\n    }\n    /**\n     * Invokes the request handler with the provided request data.\n     *\n     * @param host - The host to which to send the request.\n     * @param path - The path to which to send the request.\n     * @param requestData - The request data.\n     * @returns A promise that resolves with the response.\n     */\n    invokeRequestHandler(host, path, requestData) {\n        const request = {\n            method: FIREBASE_MESSAGING_HTTP_METHOD,\n            url: `https://${host}${path}`,\n            data: requestData,\n            headers: LEGACY_FIREBASE_MESSAGING_HEADERS,\n            timeout: FIREBASE_MESSAGING_TIMEOUT,\n        };\n        return this.httpClient.send(request).then((response) => {\n            // Send non-JSON responses to the catch() below where they will be treated as errors.\n            if (!response.isJson()) {\n                throw new api_request_1.HttpError(response);\n            }\n            // Check for backend errors in the response.\n            const errorCode = (0, messaging_errors_internal_1.getErrorCode)(response.data);\n            if (errorCode) {\n                throw new api_request_1.HttpError(response);\n            }\n            // Return entire response.\n            return response.data;\n        })\n            .catch((err) => {\n            if (err instanceof api_request_1.HttpError) {\n                throw (0, messaging_errors_internal_1.createFirebaseError)(err);\n            }\n            // Re-throw the error if it already has the proper format.\n            throw err;\n        });\n    }\n    /**\n     * Invokes the request handler with the provided request data.\n     *\n     * @param host - The host to which to send the request.\n     * @param path - The path to which to send the request.\n     * @param requestData - The request data.\n     * @returns A promise that resolves with the {@link SendResponse}.\n     */\n    invokeRequestHandlerForSendResponse(host, path, requestData) {\n        const request = {\n            method: FIREBASE_MESSAGING_HTTP_METHOD,\n            url: `https://${host}${path}`,\n            data: requestData,\n            headers: LEGACY_FIREBASE_MESSAGING_HEADERS,\n            timeout: FIREBASE_MESSAGING_TIMEOUT,\n        };\n        return this.httpClient.send(request).then((response) => {\n            return this.buildSendResponse(response);\n        })\n            .catch((err) => {\n            if (err instanceof api_request_1.HttpError) {\n                return this.buildSendResponseFromError(err);\n            }\n            // Re-throw the error if it already has the proper format.\n            throw err;\n        });\n    }\n    /**\n     * Sends the given array of sub requests as a single batch to FCM, and parses the result into\n     * a BatchResponse object.\n     *\n     * @param requests - An array of sub requests to send.\n     * @returns A promise that resolves when the send operation is complete.\n     */\n    sendBatchRequest(requests) {\n        return this.batchClient.send(requests)\n            .then((responses) => {\n            return responses.map((part) => {\n                return this.buildSendResponse(part);\n            });\n        }).then((responses) => {\n            const successCount = responses.filter((resp) => resp.success).length;\n            return {\n                responses,\n                successCount,\n                failureCount: responses.length - successCount,\n            };\n        }).catch((err) => {\n            if (err instanceof api_request_1.HttpError) {\n                throw (0, messaging_errors_internal_1.createFirebaseError)(err);\n            }\n            // Re-throw the error if it already has the proper format.\n            throw err;\n        });\n    }\n    buildSendResponse(response) {\n        const result = {\n            success: response.status === 200,\n        };\n        if (result.success) {\n            result.messageId = response.data.name;\n        }\n        else {\n            result.error = (0, messaging_errors_internal_1.createFirebaseError)(new api_request_1.HttpError(response));\n        }\n        return result;\n    }\n    buildSendResponseFromError(err) {\n        return {\n            success: false,\n            error: (0, messaging_errors_internal_1.createFirebaseError)(err)\n        };\n    }\n}\nexports.FirebaseMessagingRequestHandler = FirebaseMessagingRequestHandler;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}