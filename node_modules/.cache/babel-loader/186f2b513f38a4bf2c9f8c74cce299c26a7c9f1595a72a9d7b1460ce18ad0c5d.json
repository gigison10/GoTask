{"ast":null,"code":"/*! firebase-admin v11.9.0 */\n\"use strict\";\n\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FirebaseRemoteConfigError = exports.RemoteConfigApiClient = void 0;\nconst api_request_1 = require(\"../utils/api-request\");\nconst error_1 = require(\"../utils/error\");\nconst utils = require(\"../utils/index\");\nconst validator = require(\"../utils/validator\");\nconst deep_copy_1 = require(\"../utils/deep-copy\");\n// Remote Config backend constants\nconst FIREBASE_REMOTE_CONFIG_V1_API = 'https://firebaseremoteconfig.googleapis.com/v1';\nconst FIREBASE_REMOTE_CONFIG_HEADERS = {\n  'X-Firebase-Client': `fire-admin-node/${utils.getSdkVersion()}`,\n  // There is a known issue in which the ETag is not properly returned in cases where the request\n  // does not specify a compression type. Currently, it is required to include the header\n  // `Accept-Encoding: gzip` or equivalent in all requests.\n  // https://firebase.google.com/docs/remote-config/use-config-rest#etag_usage_and_forced_updates\n  'Accept-Encoding': 'gzip'\n};\n/**\n * Class that facilitates sending requests to the Firebase Remote Config backend API.\n *\n * @internal\n */\nclass RemoteConfigApiClient {\n  constructor(app) {\n    this.app = app;\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new FirebaseRemoteConfigError('invalid-argument', 'First argument passed to admin.remoteConfig() must be a valid Firebase app instance.');\n    }\n    this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n  }\n  getTemplate() {\n    return this.getUrl().then(url => {\n      const request = {\n        method: 'GET',\n        url: `${url}/remoteConfig`,\n        headers: FIREBASE_REMOTE_CONFIG_HEADERS\n      };\n      return this.httpClient.send(request);\n    }).then(resp => {\n      return this.toRemoteConfigTemplate(resp);\n    }).catch(err => {\n      throw this.toFirebaseError(err);\n    });\n  }\n  getTemplateAtVersion(versionNumber) {\n    const data = {\n      versionNumber: this.validateVersionNumber(versionNumber)\n    };\n    return this.getUrl().then(url => {\n      const request = {\n        method: 'GET',\n        url: `${url}/remoteConfig`,\n        headers: FIREBASE_REMOTE_CONFIG_HEADERS,\n        data\n      };\n      return this.httpClient.send(request);\n    }).then(resp => {\n      return this.toRemoteConfigTemplate(resp);\n    }).catch(err => {\n      throw this.toFirebaseError(err);\n    });\n  }\n  validateTemplate(template) {\n    template = this.validateInputRemoteConfigTemplate(template);\n    return this.sendPutRequest(template, template.etag, true).then(resp => {\n      // validating a template returns an etag with the suffix -0 means that your update\n      // was successfully validated. We set the etag back to the original etag of the template\n      // to allow future operations.\n      this.validateEtag(resp.headers['etag']);\n      return this.toRemoteConfigTemplate(resp, template.etag);\n    }).catch(err => {\n      throw this.toFirebaseError(err);\n    });\n  }\n  publishTemplate(template, options) {\n    template = this.validateInputRemoteConfigTemplate(template);\n    let ifMatch = template.etag;\n    if (options && options.force === true) {\n      // setting `If-Match: *` forces the Remote Config template to be updated\n      // and circumvent the ETag, and the protection from that it provides.\n      ifMatch = '*';\n    }\n    return this.sendPutRequest(template, ifMatch).then(resp => {\n      return this.toRemoteConfigTemplate(resp);\n    }).catch(err => {\n      throw this.toFirebaseError(err);\n    });\n  }\n  rollback(versionNumber) {\n    const data = {\n      versionNumber: this.validateVersionNumber(versionNumber)\n    };\n    return this.getUrl().then(url => {\n      const request = {\n        method: 'POST',\n        url: `${url}/remoteConfig:rollback`,\n        headers: FIREBASE_REMOTE_CONFIG_HEADERS,\n        data\n      };\n      return this.httpClient.send(request);\n    }).then(resp => {\n      return this.toRemoteConfigTemplate(resp);\n    }).catch(err => {\n      throw this.toFirebaseError(err);\n    });\n  }\n  listVersions(options) {\n    if (typeof options !== 'undefined') {\n      options = this.validateListVersionsOptions(options);\n    }\n    return this.getUrl().then(url => {\n      const request = {\n        method: 'GET',\n        url: `${url}/remoteConfig:listVersions`,\n        headers: FIREBASE_REMOTE_CONFIG_HEADERS,\n        data: options\n      };\n      return this.httpClient.send(request);\n    }).then(resp => {\n      return resp.data;\n    }).catch(err => {\n      throw this.toFirebaseError(err);\n    });\n  }\n  sendPutRequest(template, etag, validateOnly) {\n    let path = 'remoteConfig';\n    if (validateOnly) {\n      path += '?validate_only=true';\n    }\n    return this.getUrl().then(url => {\n      const request = {\n        method: 'PUT',\n        url: `${url}/${path}`,\n        headers: {\n          ...FIREBASE_REMOTE_CONFIG_HEADERS,\n          'If-Match': etag\n        },\n        data: {\n          conditions: template.conditions,\n          parameters: template.parameters,\n          parameterGroups: template.parameterGroups,\n          version: template.version\n        }\n      };\n      return this.httpClient.send(request);\n    });\n  }\n  getUrl() {\n    return this.getProjectIdPrefix().then(projectIdPrefix => {\n      return `${FIREBASE_REMOTE_CONFIG_V1_API}/${projectIdPrefix}`;\n    });\n  }\n  getProjectIdPrefix() {\n    if (this.projectIdPrefix) {\n      return Promise.resolve(this.projectIdPrefix);\n    }\n    return utils.findProjectId(this.app).then(projectId => {\n      if (!validator.isNonEmptyString(projectId)) {\n        throw new FirebaseRemoteConfigError('unknown-error', 'Failed to determine project ID. Initialize the SDK with service account credentials, or ' + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT ' + 'environment variable.');\n      }\n      this.projectIdPrefix = `projects/${projectId}`;\n      return this.projectIdPrefix;\n    });\n  }\n  toFirebaseError(err) {\n    if (err instanceof error_1.PrefixedFirebaseError) {\n      return err;\n    }\n    const response = err.response;\n    if (!response.isJson()) {\n      return new FirebaseRemoteConfigError('unknown-error', `Unexpected response with status: ${response.status} and body: ${response.text}`);\n    }\n    const error = response.data.error || {};\n    let code = 'unknown-error';\n    if (error.status && error.status in ERROR_CODE_MAPPING) {\n      code = ERROR_CODE_MAPPING[error.status];\n    }\n    const message = error.message || `Unknown server error: ${response.text}`;\n    return new FirebaseRemoteConfigError(code, message);\n  }\n  /**\n   * Creates a RemoteConfigTemplate from the API response.\n   * If provided, customEtag is used instead of the etag returned in the API response.\n   *\n   * @param {HttpResponse} resp API response object.\n   * @param {string} customEtag A custom etag to replace the etag fom the API response (Optional).\n   */\n  toRemoteConfigTemplate(resp, customEtag) {\n    const etag = typeof customEtag === 'undefined' ? resp.headers['etag'] : customEtag;\n    this.validateEtag(etag);\n    return {\n      conditions: resp.data.conditions,\n      parameters: resp.data.parameters,\n      parameterGroups: resp.data.parameterGroups,\n      etag,\n      version: resp.data.version\n    };\n  }\n  /**\n   * Checks if the given RemoteConfigTemplate object is valid.\n   * The object must have valid parameters, parameter groups, conditions, and an etag.\n   * Removes output only properties from version metadata.\n   *\n   * @param {RemoteConfigTemplate} template A RemoteConfigTemplate object to be validated.\n   *\n   * @returns {RemoteConfigTemplate} The validated RemoteConfigTemplate object.\n   */\n  validateInputRemoteConfigTemplate(template) {\n    const templateCopy = (0, deep_copy_1.deepCopy)(template);\n    if (!validator.isNonNullObject(templateCopy)) {\n      throw new FirebaseRemoteConfigError('invalid-argument', `Invalid Remote Config template: ${JSON.stringify(templateCopy)}`);\n    }\n    if (!validator.isNonEmptyString(templateCopy.etag)) {\n      throw new FirebaseRemoteConfigError('invalid-argument', 'ETag must be a non-empty string.');\n    }\n    if (!validator.isNonNullObject(templateCopy.parameters)) {\n      throw new FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameters must be a non-null object');\n    }\n    if (!validator.isNonNullObject(templateCopy.parameterGroups)) {\n      throw new FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameter groups must be a non-null object');\n    }\n    if (!validator.isArray(templateCopy.conditions)) {\n      throw new FirebaseRemoteConfigError('invalid-argument', 'Remote Config conditions must be an array');\n    }\n    if (typeof templateCopy.version !== 'undefined') {\n      // exclude output only properties and keep the only input property: description\n      templateCopy.version = {\n        description: templateCopy.version.description\n      };\n    }\n    return templateCopy;\n  }\n  /**\n   * Checks if a given version number is valid.\n   * A version number must be an integer or a string in int64 format.\n   * If valid, returns the string representation of the provided version number.\n   *\n   * @param {string|number} versionNumber A version number to be validated.\n   *\n   * @returns {string} The validated version number as a string.\n   */\n  validateVersionNumber(versionNumber) {\n    let propertyName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'versionNumber';\n    if (!validator.isNonEmptyString(versionNumber) && !validator.isNumber(versionNumber)) {\n      throw new FirebaseRemoteConfigError('invalid-argument', `${propertyName} must be a non-empty string in int64 format or a number`);\n    }\n    if (!Number.isInteger(Number(versionNumber))) {\n      throw new FirebaseRemoteConfigError('invalid-argument', `${propertyName} must be an integer or a string in int64 format`);\n    }\n    return versionNumber.toString();\n  }\n  validateEtag(etag) {\n    if (!validator.isNonEmptyString(etag)) {\n      throw new FirebaseRemoteConfigError('invalid-argument', 'ETag header is not present in the server response.');\n    }\n  }\n  /**\n   * Checks if a given `ListVersionsOptions` object is valid. If successful, creates a copy of the\n   * options object and convert `startTime` and `endTime` to RFC3339 UTC \"Zulu\" format, if present.\n   *\n   * @param {ListVersionsOptions} options An options object to be validated.\n   *\n   * @returns {ListVersionsOptions} A copy of the provided options object with timestamps converted\n   * to UTC Zulu format.\n   */\n  validateListVersionsOptions(options) {\n    const optionsCopy = (0, deep_copy_1.deepCopy)(options);\n    if (!validator.isNonNullObject(optionsCopy)) {\n      throw new FirebaseRemoteConfigError('invalid-argument', 'ListVersionsOptions must be a non-null object.');\n    }\n    if (typeof optionsCopy.pageSize !== 'undefined') {\n      if (!validator.isNumber(optionsCopy.pageSize)) {\n        throw new FirebaseRemoteConfigError('invalid-argument', 'pageSize must be a number.');\n      }\n      if (optionsCopy.pageSize < 1 || optionsCopy.pageSize > 300) {\n        throw new FirebaseRemoteConfigError('invalid-argument', 'pageSize must be a number between 1 and 300 (inclusive).');\n      }\n    }\n    if (typeof optionsCopy.pageToken !== 'undefined' && !validator.isNonEmptyString(optionsCopy.pageToken)) {\n      throw new FirebaseRemoteConfigError('invalid-argument', 'pageToken must be a string value.');\n    }\n    if (typeof optionsCopy.endVersionNumber !== 'undefined') {\n      optionsCopy.endVersionNumber = this.validateVersionNumber(optionsCopy.endVersionNumber, 'endVersionNumber');\n    }\n    if (typeof optionsCopy.startTime !== 'undefined') {\n      if (!(optionsCopy.startTime instanceof Date) && !validator.isUTCDateString(optionsCopy.startTime)) {\n        throw new FirebaseRemoteConfigError('invalid-argument', 'startTime must be a valid Date object or a UTC date string.');\n      }\n      // Convert startTime to RFC3339 UTC \"Zulu\" format.\n      if (optionsCopy.startTime instanceof Date) {\n        optionsCopy.startTime = optionsCopy.startTime.toISOString();\n      } else {\n        optionsCopy.startTime = new Date(optionsCopy.startTime).toISOString();\n      }\n    }\n    if (typeof optionsCopy.endTime !== 'undefined') {\n      if (!(optionsCopy.endTime instanceof Date) && !validator.isUTCDateString(optionsCopy.endTime)) {\n        throw new FirebaseRemoteConfigError('invalid-argument', 'endTime must be a valid Date object or a UTC date string.');\n      }\n      // Convert endTime to RFC3339 UTC \"Zulu\" format.\n      if (optionsCopy.endTime instanceof Date) {\n        optionsCopy.endTime = optionsCopy.endTime.toISOString();\n      } else {\n        optionsCopy.endTime = new Date(optionsCopy.endTime).toISOString();\n      }\n    }\n    // Remove undefined fields from optionsCopy\n    Object.keys(optionsCopy).forEach(key => typeof optionsCopy[key] === 'undefined' && delete optionsCopy[key]);\n    return optionsCopy;\n  }\n}\nexports.RemoteConfigApiClient = RemoteConfigApiClient;\nconst ERROR_CODE_MAPPING = {\n  ABORTED: 'aborted',\n  ALREADY_EXISTS: 'already-exists',\n  INVALID_ARGUMENT: 'invalid-argument',\n  INTERNAL: 'internal-error',\n  FAILED_PRECONDITION: 'failed-precondition',\n  NOT_FOUND: 'not-found',\n  OUT_OF_RANGE: 'out-of-range',\n  PERMISSION_DENIED: 'permission-denied',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  UNAUTHENTICATED: 'unauthenticated',\n  UNKNOWN: 'unknown-error'\n};\n/**\n * Firebase Remote Config error code structure. This extends PrefixedFirebaseError.\n *\n * @param {RemoteConfigErrorCode} code The error code.\n * @param {string} message The error message.\n * @constructor\n */\nclass FirebaseRemoteConfigError extends error_1.PrefixedFirebaseError {\n  constructor(code, message) {\n    super('remote-config', code, message);\n  }\n}\nexports.FirebaseRemoteConfigError = FirebaseRemoteConfigError;","map":{"version":3,"names":["Object","defineProperty","exports","value","FirebaseRemoteConfigError","RemoteConfigApiClient","api_request_1","require","error_1","utils","validator","deep_copy_1","FIREBASE_REMOTE_CONFIG_V1_API","FIREBASE_REMOTE_CONFIG_HEADERS","getSdkVersion","constructor","app","isNonNullObject","httpClient","AuthorizedHttpClient","getTemplate","getUrl","then","url","request","method","headers","send","resp","toRemoteConfigTemplate","catch","err","toFirebaseError","getTemplateAtVersion","versionNumber","data","validateVersionNumber","validateTemplate","template","validateInputRemoteConfigTemplate","sendPutRequest","etag","validateEtag","publishTemplate","options","ifMatch","force","rollback","listVersions","validateListVersionsOptions","validateOnly","path","conditions","parameters","parameterGroups","version","getProjectIdPrefix","projectIdPrefix","Promise","resolve","findProjectId","projectId","isNonEmptyString","PrefixedFirebaseError","response","isJson","status","text","error","code","ERROR_CODE_MAPPING","message","customEtag","templateCopy","deepCopy","JSON","stringify","isArray","description","propertyName","arguments","length","undefined","isNumber","Number","isInteger","toString","optionsCopy","pageSize","pageToken","endVersionNumber","startTime","Date","isUTCDateString","toISOString","endTime","keys","forEach","key","ABORTED","ALREADY_EXISTS","INVALID_ARGUMENT","INTERNAL","FAILED_PRECONDITION","NOT_FOUND","OUT_OF_RANGE","PERMISSION_DENIED","RESOURCE_EXHAUSTED","UNAUTHENTICATED","UNKNOWN"],"sources":["D:/Coding/React/taskmybusiness/node_modules/firebase-admin/lib/remote-config/remote-config-api-client-internal.js"],"sourcesContent":["/*! firebase-admin v11.9.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FirebaseRemoteConfigError = exports.RemoteConfigApiClient = void 0;\nconst api_request_1 = require(\"../utils/api-request\");\nconst error_1 = require(\"../utils/error\");\nconst utils = require(\"../utils/index\");\nconst validator = require(\"../utils/validator\");\nconst deep_copy_1 = require(\"../utils/deep-copy\");\n// Remote Config backend constants\nconst FIREBASE_REMOTE_CONFIG_V1_API = 'https://firebaseremoteconfig.googleapis.com/v1';\nconst FIREBASE_REMOTE_CONFIG_HEADERS = {\n    'X-Firebase-Client': `fire-admin-node/${utils.getSdkVersion()}`,\n    // There is a known issue in which the ETag is not properly returned in cases where the request\n    // does not specify a compression type. Currently, it is required to include the header\n    // `Accept-Encoding: gzip` or equivalent in all requests.\n    // https://firebase.google.com/docs/remote-config/use-config-rest#etag_usage_and_forced_updates\n    'Accept-Encoding': 'gzip',\n};\n/**\n * Class that facilitates sending requests to the Firebase Remote Config backend API.\n *\n * @internal\n */\nclass RemoteConfigApiClient {\n    constructor(app) {\n        this.app = app;\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new FirebaseRemoteConfigError('invalid-argument', 'First argument passed to admin.remoteConfig() must be a valid Firebase app instance.');\n        }\n        this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n    }\n    getTemplate() {\n        return this.getUrl()\n            .then((url) => {\n            const request = {\n                method: 'GET',\n                url: `${url}/remoteConfig`,\n                headers: FIREBASE_REMOTE_CONFIG_HEADERS\n            };\n            return this.httpClient.send(request);\n        })\n            .then((resp) => {\n            return this.toRemoteConfigTemplate(resp);\n        })\n            .catch((err) => {\n            throw this.toFirebaseError(err);\n        });\n    }\n    getTemplateAtVersion(versionNumber) {\n        const data = { versionNumber: this.validateVersionNumber(versionNumber) };\n        return this.getUrl()\n            .then((url) => {\n            const request = {\n                method: 'GET',\n                url: `${url}/remoteConfig`,\n                headers: FIREBASE_REMOTE_CONFIG_HEADERS,\n                data\n            };\n            return this.httpClient.send(request);\n        })\n            .then((resp) => {\n            return this.toRemoteConfigTemplate(resp);\n        })\n            .catch((err) => {\n            throw this.toFirebaseError(err);\n        });\n    }\n    validateTemplate(template) {\n        template = this.validateInputRemoteConfigTemplate(template);\n        return this.sendPutRequest(template, template.etag, true)\n            .then((resp) => {\n            // validating a template returns an etag with the suffix -0 means that your update\n            // was successfully validated. We set the etag back to the original etag of the template\n            // to allow future operations.\n            this.validateEtag(resp.headers['etag']);\n            return this.toRemoteConfigTemplate(resp, template.etag);\n        })\n            .catch((err) => {\n            throw this.toFirebaseError(err);\n        });\n    }\n    publishTemplate(template, options) {\n        template = this.validateInputRemoteConfigTemplate(template);\n        let ifMatch = template.etag;\n        if (options && options.force === true) {\n            // setting `If-Match: *` forces the Remote Config template to be updated\n            // and circumvent the ETag, and the protection from that it provides.\n            ifMatch = '*';\n        }\n        return this.sendPutRequest(template, ifMatch)\n            .then((resp) => {\n            return this.toRemoteConfigTemplate(resp);\n        })\n            .catch((err) => {\n            throw this.toFirebaseError(err);\n        });\n    }\n    rollback(versionNumber) {\n        const data = { versionNumber: this.validateVersionNumber(versionNumber) };\n        return this.getUrl()\n            .then((url) => {\n            const request = {\n                method: 'POST',\n                url: `${url}/remoteConfig:rollback`,\n                headers: FIREBASE_REMOTE_CONFIG_HEADERS,\n                data\n            };\n            return this.httpClient.send(request);\n        })\n            .then((resp) => {\n            return this.toRemoteConfigTemplate(resp);\n        })\n            .catch((err) => {\n            throw this.toFirebaseError(err);\n        });\n    }\n    listVersions(options) {\n        if (typeof options !== 'undefined') {\n            options = this.validateListVersionsOptions(options);\n        }\n        return this.getUrl()\n            .then((url) => {\n            const request = {\n                method: 'GET',\n                url: `${url}/remoteConfig:listVersions`,\n                headers: FIREBASE_REMOTE_CONFIG_HEADERS,\n                data: options\n            };\n            return this.httpClient.send(request);\n        })\n            .then((resp) => {\n            return resp.data;\n        })\n            .catch((err) => {\n            throw this.toFirebaseError(err);\n        });\n    }\n    sendPutRequest(template, etag, validateOnly) {\n        let path = 'remoteConfig';\n        if (validateOnly) {\n            path += '?validate_only=true';\n        }\n        return this.getUrl()\n            .then((url) => {\n            const request = {\n                method: 'PUT',\n                url: `${url}/${path}`,\n                headers: { ...FIREBASE_REMOTE_CONFIG_HEADERS, 'If-Match': etag },\n                data: {\n                    conditions: template.conditions,\n                    parameters: template.parameters,\n                    parameterGroups: template.parameterGroups,\n                    version: template.version,\n                }\n            };\n            return this.httpClient.send(request);\n        });\n    }\n    getUrl() {\n        return this.getProjectIdPrefix()\n            .then((projectIdPrefix) => {\n            return `${FIREBASE_REMOTE_CONFIG_V1_API}/${projectIdPrefix}`;\n        });\n    }\n    getProjectIdPrefix() {\n        if (this.projectIdPrefix) {\n            return Promise.resolve(this.projectIdPrefix);\n        }\n        return utils.findProjectId(this.app)\n            .then((projectId) => {\n            if (!validator.isNonEmptyString(projectId)) {\n                throw new FirebaseRemoteConfigError('unknown-error', 'Failed to determine project ID. Initialize the SDK with service account credentials, or '\n                    + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT '\n                    + 'environment variable.');\n            }\n            this.projectIdPrefix = `projects/${projectId}`;\n            return this.projectIdPrefix;\n        });\n    }\n    toFirebaseError(err) {\n        if (err instanceof error_1.PrefixedFirebaseError) {\n            return err;\n        }\n        const response = err.response;\n        if (!response.isJson()) {\n            return new FirebaseRemoteConfigError('unknown-error', `Unexpected response with status: ${response.status} and body: ${response.text}`);\n        }\n        const error = response.data.error || {};\n        let code = 'unknown-error';\n        if (error.status && error.status in ERROR_CODE_MAPPING) {\n            code = ERROR_CODE_MAPPING[error.status];\n        }\n        const message = error.message || `Unknown server error: ${response.text}`;\n        return new FirebaseRemoteConfigError(code, message);\n    }\n    /**\n     * Creates a RemoteConfigTemplate from the API response.\n     * If provided, customEtag is used instead of the etag returned in the API response.\n     *\n     * @param {HttpResponse} resp API response object.\n     * @param {string} customEtag A custom etag to replace the etag fom the API response (Optional).\n     */\n    toRemoteConfigTemplate(resp, customEtag) {\n        const etag = (typeof customEtag === 'undefined') ? resp.headers['etag'] : customEtag;\n        this.validateEtag(etag);\n        return {\n            conditions: resp.data.conditions,\n            parameters: resp.data.parameters,\n            parameterGroups: resp.data.parameterGroups,\n            etag,\n            version: resp.data.version,\n        };\n    }\n    /**\n     * Checks if the given RemoteConfigTemplate object is valid.\n     * The object must have valid parameters, parameter groups, conditions, and an etag.\n     * Removes output only properties from version metadata.\n     *\n     * @param {RemoteConfigTemplate} template A RemoteConfigTemplate object to be validated.\n     *\n     * @returns {RemoteConfigTemplate} The validated RemoteConfigTemplate object.\n     */\n    validateInputRemoteConfigTemplate(template) {\n        const templateCopy = (0, deep_copy_1.deepCopy)(template);\n        if (!validator.isNonNullObject(templateCopy)) {\n            throw new FirebaseRemoteConfigError('invalid-argument', `Invalid Remote Config template: ${JSON.stringify(templateCopy)}`);\n        }\n        if (!validator.isNonEmptyString(templateCopy.etag)) {\n            throw new FirebaseRemoteConfigError('invalid-argument', 'ETag must be a non-empty string.');\n        }\n        if (!validator.isNonNullObject(templateCopy.parameters)) {\n            throw new FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameters must be a non-null object');\n        }\n        if (!validator.isNonNullObject(templateCopy.parameterGroups)) {\n            throw new FirebaseRemoteConfigError('invalid-argument', 'Remote Config parameter groups must be a non-null object');\n        }\n        if (!validator.isArray(templateCopy.conditions)) {\n            throw new FirebaseRemoteConfigError('invalid-argument', 'Remote Config conditions must be an array');\n        }\n        if (typeof templateCopy.version !== 'undefined') {\n            // exclude output only properties and keep the only input property: description\n            templateCopy.version = { description: templateCopy.version.description };\n        }\n        return templateCopy;\n    }\n    /**\n     * Checks if a given version number is valid.\n     * A version number must be an integer or a string in int64 format.\n     * If valid, returns the string representation of the provided version number.\n     *\n     * @param {string|number} versionNumber A version number to be validated.\n     *\n     * @returns {string} The validated version number as a string.\n     */\n    validateVersionNumber(versionNumber, propertyName = 'versionNumber') {\n        if (!validator.isNonEmptyString(versionNumber) &&\n            !validator.isNumber(versionNumber)) {\n            throw new FirebaseRemoteConfigError('invalid-argument', `${propertyName} must be a non-empty string in int64 format or a number`);\n        }\n        if (!Number.isInteger(Number(versionNumber))) {\n            throw new FirebaseRemoteConfigError('invalid-argument', `${propertyName} must be an integer or a string in int64 format`);\n        }\n        return versionNumber.toString();\n    }\n    validateEtag(etag) {\n        if (!validator.isNonEmptyString(etag)) {\n            throw new FirebaseRemoteConfigError('invalid-argument', 'ETag header is not present in the server response.');\n        }\n    }\n    /**\n     * Checks if a given `ListVersionsOptions` object is valid. If successful, creates a copy of the\n     * options object and convert `startTime` and `endTime` to RFC3339 UTC \"Zulu\" format, if present.\n     *\n     * @param {ListVersionsOptions} options An options object to be validated.\n     *\n     * @returns {ListVersionsOptions} A copy of the provided options object with timestamps converted\n     * to UTC Zulu format.\n     */\n    validateListVersionsOptions(options) {\n        const optionsCopy = (0, deep_copy_1.deepCopy)(options);\n        if (!validator.isNonNullObject(optionsCopy)) {\n            throw new FirebaseRemoteConfigError('invalid-argument', 'ListVersionsOptions must be a non-null object.');\n        }\n        if (typeof optionsCopy.pageSize !== 'undefined') {\n            if (!validator.isNumber(optionsCopy.pageSize)) {\n                throw new FirebaseRemoteConfigError('invalid-argument', 'pageSize must be a number.');\n            }\n            if (optionsCopy.pageSize < 1 || optionsCopy.pageSize > 300) {\n                throw new FirebaseRemoteConfigError('invalid-argument', 'pageSize must be a number between 1 and 300 (inclusive).');\n            }\n        }\n        if (typeof optionsCopy.pageToken !== 'undefined' && !validator.isNonEmptyString(optionsCopy.pageToken)) {\n            throw new FirebaseRemoteConfigError('invalid-argument', 'pageToken must be a string value.');\n        }\n        if (typeof optionsCopy.endVersionNumber !== 'undefined') {\n            optionsCopy.endVersionNumber = this.validateVersionNumber(optionsCopy.endVersionNumber, 'endVersionNumber');\n        }\n        if (typeof optionsCopy.startTime !== 'undefined') {\n            if (!(optionsCopy.startTime instanceof Date) && !validator.isUTCDateString(optionsCopy.startTime)) {\n                throw new FirebaseRemoteConfigError('invalid-argument', 'startTime must be a valid Date object or a UTC date string.');\n            }\n            // Convert startTime to RFC3339 UTC \"Zulu\" format.\n            if (optionsCopy.startTime instanceof Date) {\n                optionsCopy.startTime = optionsCopy.startTime.toISOString();\n            }\n            else {\n                optionsCopy.startTime = new Date(optionsCopy.startTime).toISOString();\n            }\n        }\n        if (typeof optionsCopy.endTime !== 'undefined') {\n            if (!(optionsCopy.endTime instanceof Date) && !validator.isUTCDateString(optionsCopy.endTime)) {\n                throw new FirebaseRemoteConfigError('invalid-argument', 'endTime must be a valid Date object or a UTC date string.');\n            }\n            // Convert endTime to RFC3339 UTC \"Zulu\" format.\n            if (optionsCopy.endTime instanceof Date) {\n                optionsCopy.endTime = optionsCopy.endTime.toISOString();\n            }\n            else {\n                optionsCopy.endTime = new Date(optionsCopy.endTime).toISOString();\n            }\n        }\n        // Remove undefined fields from optionsCopy\n        Object.keys(optionsCopy).forEach(key => (typeof optionsCopy[key] === 'undefined') && delete optionsCopy[key]);\n        return optionsCopy;\n    }\n}\nexports.RemoteConfigApiClient = RemoteConfigApiClient;\nconst ERROR_CODE_MAPPING = {\n    ABORTED: 'aborted',\n    ALREADY_EXISTS: 'already-exists',\n    INVALID_ARGUMENT: 'invalid-argument',\n    INTERNAL: 'internal-error',\n    FAILED_PRECONDITION: 'failed-precondition',\n    NOT_FOUND: 'not-found',\n    OUT_OF_RANGE: 'out-of-range',\n    PERMISSION_DENIED: 'permission-denied',\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\n    UNAUTHENTICATED: 'unauthenticated',\n    UNKNOWN: 'unknown-error',\n};\n/**\n * Firebase Remote Config error code structure. This extends PrefixedFirebaseError.\n *\n * @param {RemoteConfigErrorCode} code The error code.\n * @param {string} message The error message.\n * @constructor\n */\nclass FirebaseRemoteConfigError extends error_1.PrefixedFirebaseError {\n    constructor(code, message) {\n        super('remote-config', code, message);\n    }\n}\nexports.FirebaseRemoteConfigError = FirebaseRemoteConfigError;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}