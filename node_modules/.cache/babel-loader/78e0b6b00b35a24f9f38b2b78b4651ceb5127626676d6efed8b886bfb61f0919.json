{"ast":null,"code":"import { initializeApp } from \"firebase/app\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged } from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, getDocs, setDoc, collection, collectionGroup, query, where } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDg0a3RsAo0iIaAJzwTjd7vHvGLWXqzZ00\",\n  authDomain: \"gotask-973a8.firebaseapp.com\",\n  projectId: \"gotask-973a8\",\n  storageBucket: \"gotask-973a8.appspot.com\",\n  messagingSenderId: \"589835338400\",\n  appId: \"1:589835338400:web:515ae6fc1315354658ffc5\",\n  measurementId: \"G-CS2ZWLEKDP\"\n};\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\nexport const auth = getAuth();\nexport const db = getFirestore();\nlet userId = \"\";\nonAuthStateChanged(auth, user => {\n  userId = user.uid;\n  const colRef = collectionGroup(db, \"projects\");\n  getDocs(colRef).then(snapshot => {\n    let users = [];\n    snapshot.docs.forEach(doc => {\n      users.push({\n        ...doc.data(),\n        id: doc.id,\n        projects: doc.projects\n      });\n    });\n    console.log(users);\n  }).catch(err => {\n    console.log(err.message);\n  });\n});\n\n/////////////////////\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\n\n// console.log(auth);\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\n// console.log(auth);\n\n//////////////////////////////////////////////////\n\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let additionalInformation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!userAuth) return;\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef);\n  // console.log(userSnapshot);\n  // console.log(userSnapshot.exists());\n\n  // user data does not exists\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation\n      });\n    } catch (error) {\n      console.log(error);\n    }\n    return userDocRef;\n  }\n};\n\n///////////////////////////////////////////////\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};\nexport const signOutUser = async () => await signOut(auth);\nexport const onAuthStateChangedListener = callback => onAuthStateChanged(auth, callback);\n\n// const currentUserId = users.auth().currentUser.uid;\n// console.log(currentUserId);","map":{"version":3,"names":["initializeApp","getAuth","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","getFirestore","doc","getDoc","getDocs","setDoc","collection","collectionGroup","query","where","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseApp","auth","db","userId","user","uid","colRef","then","snapshot","users","docs","forEach","push","data","id","projects","console","log","catch","err","message","googleProvider","setCustomParameters","prompt","signInWithGooglePopup","createUserDocumentFromAuth","userAuth","additionalInformation","arguments","length","undefined","userDocRef","userSnapshot","exists","displayName","email","createdAt","Date","error","createAuthUserWithEmailAndPassword","password","signInAuthUserWithEmailAndPassword","signOutUser","onAuthStateChangedListener","callback"],"sources":["D:/Coding/React/taskmybusiness/src/utils/firebase/firebase-utils.js"],"sourcesContent":["import { initializeApp } from \"firebase/app\";\r\n\r\nimport {\r\n  getAuth,\r\n  signInWithPopup,\r\n  GoogleAuthProvider,\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword,\r\n  signOut,\r\n  onAuthStateChanged,\r\n} from \"firebase/auth\";\r\n\r\nimport {\r\n  getFirestore,\r\n  doc,\r\n  getDoc,\r\n  getDocs,\r\n  setDoc,\r\n  collection,\r\n  collectionGroup,\r\n  query,\r\n  where,\r\n} from \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDg0a3RsAo0iIaAJzwTjd7vHvGLWXqzZ00\",\r\n  authDomain: \"gotask-973a8.firebaseapp.com\",\r\n  projectId: \"gotask-973a8\",\r\n  storageBucket: \"gotask-973a8.appspot.com\",\r\n  messagingSenderId: \"589835338400\",\r\n  appId: \"1:589835338400:web:515ae6fc1315354658ffc5\",\r\n  measurementId: \"G-CS2ZWLEKDP\",\r\n};\r\n// Initialize Firebase\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n\r\nexport const auth = getAuth();\r\nexport const db = getFirestore();\r\n\r\nlet userId = \"\";\r\nonAuthStateChanged(auth, (user) => {\r\n  userId = user.uid;\r\n\r\n  const colRef = collectionGroup(db, \"projects\");\r\n  getDocs(colRef)\r\n    .then((snapshot) => {\r\n      let users = [];\r\n      snapshot.docs.forEach((doc) => {\r\n        users.push({\r\n          ...doc.data(),\r\n          id: doc.id,\r\n          projects: doc.projects,\r\n        });\r\n      });\r\n      console.log(users);\r\n    })\r\n    .catch((err) => {\r\n      console.log(err.message);\r\n    });\r\n});\r\n\r\n/////////////////////\r\nconst googleProvider = new GoogleAuthProvider();\r\ngoogleProvider.setCustomParameters({\r\n  prompt: \"select_account\",\r\n});\r\n\r\n// console.log(auth);\r\nexport const signInWithGooglePopup = () =>\r\n  signInWithPopup(auth, googleProvider);\r\n// console.log(auth);\r\n\r\n//////////////////////////////////////////////////\r\n\r\nexport const createUserDocumentFromAuth = async (\r\n  userAuth,\r\n  additionalInformation = {}\r\n) => {\r\n  if (!userAuth) return;\r\n  const userDocRef = doc(db, \"users\", userAuth.uid);\r\n  const userSnapshot = await getDoc(userDocRef);\r\n  // console.log(userSnapshot);\r\n  // console.log(userSnapshot.exists());\r\n\r\n  // user data does not exists\r\n  if (!userSnapshot.exists()) {\r\n    const { displayName, email } = userAuth;\r\n    const createdAt = new Date();\r\n\r\n    try {\r\n      await setDoc(userDocRef, {\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalInformation,\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    return userDocRef;\r\n  }\r\n};\r\n\r\n///////////////////////////////////////////////\r\n\r\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\r\n  if (!email || !password) return;\r\n  return await createUserWithEmailAndPassword(auth, email, password);\r\n};\r\n\r\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\r\n  if (!email || !password) return;\r\n  return await signInWithEmailAndPassword(auth, email, password);\r\n};\r\n\r\nexport const signOutUser = async () => await signOut(auth);\r\n\r\nexport const onAuthStateChangedListener = (callback) =>\r\n  onAuthStateChanged(auth, callback);\r\n\r\n// const currentUserId = users.auth().currentUser.uid;\r\n// console.log(currentUserId);\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}