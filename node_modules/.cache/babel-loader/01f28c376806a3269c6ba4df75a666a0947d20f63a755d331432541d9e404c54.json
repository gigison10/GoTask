{"ast":null,"code":"/*! firebase-admin v11.9.0 */\n\"use strict\";\n\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useEmulator = exports.TenantAwareAuthRequestHandler = exports.AuthRequestHandler = exports.AbstractAuthRequestHandler = exports.FIREBASE_AUTH_SIGN_UP_NEW_USER = exports.FIREBASE_AUTH_SET_ACCOUNT_INFO = exports.FIREBASE_AUTH_BATCH_DELETE_ACCOUNTS = exports.FIREBASE_AUTH_DELETE_ACCOUNT = exports.FIREBASE_AUTH_GET_ACCOUNTS_INFO = exports.FIREBASE_AUTH_GET_ACCOUNT_INFO = exports.FIREBASE_AUTH_DOWNLOAD_ACCOUNT = exports.FIREBASE_AUTH_UPLOAD_ACCOUNT = exports.FIREBASE_AUTH_CREATE_SESSION_COOKIE = exports.EMAIL_ACTION_REQUEST_TYPES = exports.RESERVED_CLAIMS = void 0;\nconst validator = require(\"../utils/validator\");\nconst deep_copy_1 = require(\"../utils/deep-copy\");\nconst error_1 = require(\"../utils/error\");\nconst api_request_1 = require(\"../utils/api-request\");\nconst utils = require(\"../utils/index\");\nconst user_import_builder_1 = require(\"./user-import-builder\");\nconst action_code_settings_builder_1 = require(\"./action-code-settings-builder\");\nconst tenant_1 = require(\"./tenant\");\nconst identifier_1 = require(\"./identifier\");\nconst auth_config_1 = require(\"./auth-config\");\nconst project_config_1 = require(\"./project-config\");\n/** Firebase Auth request header. */\nconst FIREBASE_AUTH_HEADER = {\n  'X-Client-Version': `Node/Admin/${utils.getSdkVersion()}`\n};\n/** Firebase Auth request timeout duration in milliseconds. */\nconst FIREBASE_AUTH_TIMEOUT = 25000;\n/** List of reserved claims which cannot be provided when creating a custom token. */\nexports.RESERVED_CLAIMS = ['acr', 'amr', 'at_hash', 'aud', 'auth_time', 'azp', 'cnf', 'c_hash', 'exp', 'iat', 'iss', 'jti', 'nbf', 'nonce', 'sub', 'firebase'];\n/** List of supported email action request types. */\nexports.EMAIL_ACTION_REQUEST_TYPES = ['PASSWORD_RESET', 'VERIFY_EMAIL', 'EMAIL_SIGNIN', 'VERIFY_AND_CHANGE_EMAIL'];\n/** Maximum allowed number of characters in the custom claims payload. */\nconst MAX_CLAIMS_PAYLOAD_SIZE = 1000;\n/** Maximum allowed number of users to batch download at one time. */\nconst MAX_DOWNLOAD_ACCOUNT_PAGE_SIZE = 1000;\n/** Maximum allowed number of users to batch upload at one time. */\nconst MAX_UPLOAD_ACCOUNT_BATCH_SIZE = 1000;\n/** Maximum allowed number of users to batch get at one time. */\nconst MAX_GET_ACCOUNTS_BATCH_SIZE = 100;\n/** Maximum allowed number of users to batch delete at one time. */\nconst MAX_DELETE_ACCOUNTS_BATCH_SIZE = 1000;\n/** Minimum allowed session cookie duration in seconds (5 minutes). */\nconst MIN_SESSION_COOKIE_DURATION_SECS = 5 * 60;\n/** Maximum allowed session cookie duration in seconds (2 weeks). */\nconst MAX_SESSION_COOKIE_DURATION_SECS = 14 * 24 * 60 * 60;\n/** Maximum allowed number of provider configurations to batch download at one time. */\nconst MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE = 100;\n/** The Firebase Auth backend base URL format. */\nconst FIREBASE_AUTH_BASE_URL_FORMAT = 'https://identitytoolkit.googleapis.com/{version}/projects/{projectId}{api}';\n/** Firebase Auth base URlLformat when using the auth emultor. */\nconst FIREBASE_AUTH_EMULATOR_BASE_URL_FORMAT = 'http://{host}/identitytoolkit.googleapis.com/{version}/projects/{projectId}{api}';\n/** The Firebase Auth backend multi-tenancy base URL format. */\nconst FIREBASE_AUTH_TENANT_URL_FORMAT = FIREBASE_AUTH_BASE_URL_FORMAT.replace('projects/{projectId}', 'projects/{projectId}/tenants/{tenantId}');\n/** Firebase Auth base URL format when using the auth emultor with multi-tenancy. */\nconst FIREBASE_AUTH_EMULATOR_TENANT_URL_FORMAT = FIREBASE_AUTH_EMULATOR_BASE_URL_FORMAT.replace('projects/{projectId}', 'projects/{projectId}/tenants/{tenantId}');\n/** Maximum allowed number of tenants to download at one time. */\nconst MAX_LIST_TENANT_PAGE_SIZE = 1000;\n/**\n * Enum for the user write operation type.\n */\nvar WriteOperationType;\n(function (WriteOperationType) {\n  WriteOperationType[\"Create\"] = \"create\";\n  WriteOperationType[\"Update\"] = \"update\";\n  WriteOperationType[\"Upload\"] = \"upload\";\n})(WriteOperationType || (WriteOperationType = {}));\n/** Defines a base utility to help with resource URL construction. */\nclass AuthResourceUrlBuilder {\n  /**\n   * The resource URL builder constructor.\n   *\n   * @param projectId - The resource project ID.\n   * @param version - The endpoint API version.\n   * @constructor\n   */\n  constructor(app) {\n    let version = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'v1';\n    this.app = app;\n    this.version = version;\n    if (useEmulator()) {\n      this.urlFormat = utils.formatString(FIREBASE_AUTH_EMULATOR_BASE_URL_FORMAT, {\n        host: emulatorHost()\n      });\n    } else {\n      this.urlFormat = FIREBASE_AUTH_BASE_URL_FORMAT;\n    }\n  }\n  /**\n   * Returns the resource URL corresponding to the provided parameters.\n   *\n   * @param api - The backend API name.\n   * @param params - The optional additional parameters to substitute in the\n   *     URL path.\n   * @returns The corresponding resource URL.\n   */\n  getUrl(api, params) {\n    return this.getProjectId().then(projectId => {\n      const baseParams = {\n        version: this.version,\n        projectId,\n        api: api || ''\n      };\n      const baseUrl = utils.formatString(this.urlFormat, baseParams);\n      // Substitute additional api related parameters.\n      return utils.formatString(baseUrl, params || {});\n    });\n  }\n  getProjectId() {\n    if (this.projectId) {\n      return Promise.resolve(this.projectId);\n    }\n    return utils.findProjectId(this.app).then(projectId => {\n      if (!validator.isNonEmptyString(projectId)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'Failed to determine project ID for Auth. Initialize the ' + 'SDK with service account credentials or set project ID as an app option. ' + 'Alternatively set the GOOGLE_CLOUD_PROJECT environment variable.');\n      }\n      this.projectId = projectId;\n      return projectId;\n    });\n  }\n}\n/** Tenant aware resource builder utility. */\nclass TenantAwareAuthResourceUrlBuilder extends AuthResourceUrlBuilder {\n  /**\n   * The tenant aware resource URL builder constructor.\n   *\n   * @param projectId - The resource project ID.\n   * @param version - The endpoint API version.\n   * @param tenantId - The tenant ID.\n   * @constructor\n   */\n  constructor(app, version, tenantId) {\n    super(app, version);\n    this.app = app;\n    this.version = version;\n    this.tenantId = tenantId;\n    if (useEmulator()) {\n      this.urlFormat = utils.formatString(FIREBASE_AUTH_EMULATOR_TENANT_URL_FORMAT, {\n        host: emulatorHost()\n      });\n    } else {\n      this.urlFormat = FIREBASE_AUTH_TENANT_URL_FORMAT;\n    }\n  }\n  /**\n   * Returns the resource URL corresponding to the provided parameters.\n   *\n   * @param api - The backend API name.\n   * @param params - The optional additional parameters to substitute in the\n   *     URL path.\n   * @returns The corresponding resource URL.\n   */\n  getUrl(api, params) {\n    return super.getUrl(api, params).then(url => {\n      return utils.formatString(url, {\n        tenantId: this.tenantId\n      });\n    });\n  }\n}\n/**\n * Auth-specific HTTP client which uses the special \"owner\" token\n * when communicating with the Auth Emulator.\n */\nclass AuthHttpClient extends api_request_1.AuthorizedHttpClient {\n  getToken() {\n    if (useEmulator()) {\n      return Promise.resolve('owner');\n    }\n    return super.getToken();\n  }\n}\n/**\n * Validates an AuthFactorInfo object. All unsupported parameters\n * are removed from the original request. If an invalid field is passed\n * an error is thrown.\n *\n * @param request - The AuthFactorInfo request object.\n */\nfunction validateAuthFactorInfo(request) {\n  const validKeys = {\n    mfaEnrollmentId: true,\n    displayName: true,\n    phoneInfo: true,\n    enrolledAt: true\n  };\n  // Remove unsupported keys from the original request.\n  for (const key in request) {\n    if (!(key in validKeys)) {\n      delete request[key];\n    }\n  }\n  // No enrollment ID is available for signupNewUser. Use another identifier.\n  const authFactorInfoIdentifier = request.mfaEnrollmentId || request.phoneInfo || JSON.stringify(request);\n  // Enrollment uid may or may not be specified for update operations.\n  if (typeof request.mfaEnrollmentId !== 'undefined' && !validator.isNonEmptyString(request.mfaEnrollmentId)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID, 'The second factor \"uid\" must be a valid non-empty string.');\n  }\n  if (typeof request.displayName !== 'undefined' && !validator.isString(request.displayName)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISPLAY_NAME, `The second factor \"displayName\" for \"${authFactorInfoIdentifier}\" must be a valid string.`);\n  }\n  // enrolledAt must be a valid UTC date string.\n  if (typeof request.enrolledAt !== 'undefined' && !validator.isISODateString(request.enrolledAt)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ENROLLMENT_TIME, `The second factor \"enrollmentTime\" for \"${authFactorInfoIdentifier}\" must be a valid ` + 'UTC date string.');\n  }\n  // Validate required fields depending on second factor type.\n  if (typeof request.phoneInfo !== 'undefined') {\n    // phoneNumber should be a string and a valid phone number.\n    if (!validator.isPhoneNumber(request.phoneInfo)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHONE_NUMBER, `The second factor \"phoneNumber\" for \"${authFactorInfoIdentifier}\" must be a non-empty ` + 'E.164 standard compliant identifier string.');\n    }\n  } else {\n    // Invalid second factor. For example, a phone second factor may have been provided without\n    // a phone number. A TOTP based second factor may require a secret key, etc.\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ENROLLED_FACTORS, 'MFAInfo object provided is invalid.');\n  }\n}\n/**\n * Validates a providerUserInfo object. All unsupported parameters\n * are removed from the original request. If an invalid field is passed\n * an error is thrown.\n *\n * @param request - The providerUserInfo request object.\n */\nfunction validateProviderUserInfo(request) {\n  const validKeys = {\n    rawId: true,\n    providerId: true,\n    email: true,\n    displayName: true,\n    photoUrl: true\n  };\n  // Remove invalid keys from original request.\n  for (const key in request) {\n    if (!(key in validKeys)) {\n      delete request[key];\n    }\n  }\n  if (!validator.isNonEmptyString(request.providerId)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID);\n  }\n  if (typeof request.displayName !== 'undefined' && typeof request.displayName !== 'string') {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISPLAY_NAME, `The provider \"displayName\" for \"${request.providerId}\" must be a valid string.`);\n  }\n  if (!validator.isNonEmptyString(request.rawId)) {\n    // This is called localId on the backend but the developer specifies this as\n    // uid externally. So the error message should use the client facing name.\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID, `The provider \"uid\" for \"${request.providerId}\" must be a valid non-empty string.`);\n  }\n  // email should be a string and a valid email.\n  if (typeof request.email !== 'undefined' && !validator.isEmail(request.email)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL, `The provider \"email\" for \"${request.providerId}\" must be a valid email string.`);\n  }\n  // photoUrl should be a URL.\n  if (typeof request.photoUrl !== 'undefined' && !validator.isURL(request.photoUrl)) {\n    // This is called photoUrl on the backend but the developer specifies this as\n    // photoURL externally. So the error message should use the client facing name.\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHOTO_URL, `The provider \"photoURL\" for \"${request.providerId}\" must be a valid URL string.`);\n  }\n}\n/**\n * Validates a create/edit request object. All unsupported parameters\n * are removed from the original request. If an invalid field is passed\n * an error is thrown.\n *\n * @param request - The create/edit request object.\n * @param writeOperationType - The write operation type.\n */\nfunction validateCreateEditRequest(request, writeOperationType) {\n  const uploadAccountRequest = writeOperationType === WriteOperationType.Upload;\n  // Hash set of whitelisted parameters.\n  const validKeys = {\n    displayName: true,\n    localId: true,\n    email: true,\n    password: true,\n    rawPassword: true,\n    emailVerified: true,\n    photoUrl: true,\n    disabled: true,\n    disableUser: true,\n    deleteAttribute: true,\n    deleteProvider: true,\n    sanityCheck: true,\n    phoneNumber: true,\n    customAttributes: true,\n    validSince: true,\n    // Pass linkProviderUserInfo only for updates (i.e. not for uploads.)\n    linkProviderUserInfo: !uploadAccountRequest,\n    // Pass tenantId only for uploadAccount requests.\n    tenantId: uploadAccountRequest,\n    passwordHash: uploadAccountRequest,\n    salt: uploadAccountRequest,\n    createdAt: uploadAccountRequest,\n    lastLoginAt: uploadAccountRequest,\n    providerUserInfo: uploadAccountRequest,\n    mfaInfo: uploadAccountRequest,\n    // Only for non-uploadAccount requests.\n    mfa: !uploadAccountRequest\n  };\n  // Remove invalid keys from original request.\n  for (const key in request) {\n    if (!(key in validKeys)) {\n      delete request[key];\n    }\n  }\n  if (typeof request.tenantId !== 'undefined' && !validator.isNonEmptyString(request.tenantId)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TENANT_ID);\n  }\n  // For any invalid parameter, use the external key name in the error description.\n  // displayName should be a string.\n  if (typeof request.displayName !== 'undefined' && !validator.isString(request.displayName)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISPLAY_NAME);\n  }\n  if ((typeof request.localId !== 'undefined' || uploadAccountRequest) && !validator.isUid(request.localId)) {\n    // This is called localId on the backend but the developer specifies this as\n    // uid externally. So the error message should use the client facing name.\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID);\n  }\n  // email should be a string and a valid email.\n  if (typeof request.email !== 'undefined' && !validator.isEmail(request.email)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL);\n  }\n  // phoneNumber should be a string and a valid phone number.\n  if (typeof request.phoneNumber !== 'undefined' && !validator.isPhoneNumber(request.phoneNumber)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHONE_NUMBER);\n  }\n  // password should be a string and a minimum of 6 chars.\n  if (typeof request.password !== 'undefined' && !validator.isPassword(request.password)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PASSWORD);\n  }\n  // rawPassword should be a string and a minimum of 6 chars.\n  if (typeof request.rawPassword !== 'undefined' && !validator.isPassword(request.rawPassword)) {\n    // This is called rawPassword on the backend but the developer specifies this as\n    // password externally. So the error message should use the client facing name.\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PASSWORD);\n  }\n  // emailVerified should be a boolean.\n  if (typeof request.emailVerified !== 'undefined' && typeof request.emailVerified !== 'boolean') {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL_VERIFIED);\n  }\n  // photoUrl should be a URL.\n  if (typeof request.photoUrl !== 'undefined' && !validator.isURL(request.photoUrl)) {\n    // This is called photoUrl on the backend but the developer specifies this as\n    // photoURL externally. So the error message should use the client facing name.\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHOTO_URL);\n  }\n  // disabled should be a boolean.\n  if (typeof request.disabled !== 'undefined' && typeof request.disabled !== 'boolean') {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISABLED_FIELD);\n  }\n  // validSince should be a number.\n  if (typeof request.validSince !== 'undefined' && !validator.isNumber(request.validSince)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TOKENS_VALID_AFTER_TIME);\n  }\n  // createdAt should be a number.\n  if (typeof request.createdAt !== 'undefined' && !validator.isNumber(request.createdAt)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREATION_TIME);\n  }\n  // lastSignInAt should be a number.\n  if (typeof request.lastLoginAt !== 'undefined' && !validator.isNumber(request.lastLoginAt)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_LAST_SIGN_IN_TIME);\n  }\n  // disableUser should be a boolean.\n  if (typeof request.disableUser !== 'undefined' && typeof request.disableUser !== 'boolean') {\n    // This is called disableUser on the backend but the developer specifies this as\n    // disabled externally. So the error message should use the client facing name.\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISABLED_FIELD);\n  }\n  // customAttributes should be stringified JSON with no blacklisted claims.\n  // The payload should not exceed 1KB.\n  if (typeof request.customAttributes !== 'undefined') {\n    let developerClaims;\n    try {\n      developerClaims = JSON.parse(request.customAttributes);\n    } catch (error) {\n      // JSON parsing error. This should never happen as we stringify the claims internally.\n      // However, we still need to check since setAccountInfo via edit requests could pass\n      // this field.\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CLAIMS, error.message);\n    }\n    const invalidClaims = [];\n    // Check for any invalid claims.\n    exports.RESERVED_CLAIMS.forEach(blacklistedClaim => {\n      if (Object.prototype.hasOwnProperty.call(developerClaims, blacklistedClaim)) {\n        invalidClaims.push(blacklistedClaim);\n      }\n    });\n    // Throw an error if an invalid claim is detected.\n    if (invalidClaims.length > 0) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.FORBIDDEN_CLAIM, invalidClaims.length > 1 ? `Developer claims \"${invalidClaims.join('\", \"')}\" are reserved and cannot be specified.` : `Developer claim \"${invalidClaims[0]}\" is reserved and cannot be specified.`);\n    }\n    // Check claims payload does not exceed maxmimum size.\n    if (request.customAttributes.length > MAX_CLAIMS_PAYLOAD_SIZE) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.CLAIMS_TOO_LARGE, `Developer claims payload should not exceed ${MAX_CLAIMS_PAYLOAD_SIZE} characters.`);\n    }\n  }\n  // passwordHash has to be a base64 encoded string.\n  if (typeof request.passwordHash !== 'undefined' && !validator.isString(request.passwordHash)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PASSWORD_HASH);\n  }\n  // salt has to be a base64 encoded string.\n  if (typeof request.salt !== 'undefined' && !validator.isString(request.salt)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PASSWORD_SALT);\n  }\n  // providerUserInfo has to be an array of valid UserInfo requests.\n  if (typeof request.providerUserInfo !== 'undefined' && !validator.isArray(request.providerUserInfo)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_DATA);\n  } else if (validator.isArray(request.providerUserInfo)) {\n    request.providerUserInfo.forEach(providerUserInfoEntry => {\n      validateProviderUserInfo(providerUserInfoEntry);\n    });\n  }\n  // linkProviderUserInfo must be a (single) UserProvider value.\n  if (typeof request.linkProviderUserInfo !== 'undefined') {\n    validateProviderUserInfo(request.linkProviderUserInfo);\n  }\n  // mfaInfo is used for importUsers.\n  // mfa.enrollments is used for setAccountInfo.\n  // enrollments has to be an array of valid AuthFactorInfo requests.\n  let enrollments = null;\n  if (request.mfaInfo) {\n    enrollments = request.mfaInfo;\n  } else if (request.mfa && request.mfa.enrollments) {\n    enrollments = request.mfa.enrollments;\n  }\n  if (enrollments) {\n    if (!validator.isArray(enrollments)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ENROLLED_FACTORS);\n    }\n    enrollments.forEach(authFactorInfoEntry => {\n      validateAuthFactorInfo(authFactorInfoEntry);\n    });\n  }\n}\n/**\n * Instantiates the createSessionCookie endpoint settings.\n *\n * @internal\n */\nexports.FIREBASE_AUTH_CREATE_SESSION_COOKIE = new api_request_1.ApiSettings(':createSessionCookie', 'POST')\n// Set request validator.\n.setRequestValidator(request => {\n  // Validate the ID token is a non-empty string.\n  if (!validator.isNonEmptyString(request.idToken)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ID_TOKEN);\n  }\n  // Validate the custom session cookie duration.\n  if (!validator.isNumber(request.validDuration) || request.validDuration < MIN_SESSION_COOKIE_DURATION_SECS || request.validDuration > MAX_SESSION_COOKIE_DURATION_SECS) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_SESSION_COOKIE_DURATION);\n  }\n})\n// Set response validator.\n.setResponseValidator(response => {\n  // Response should always contain the session cookie.\n  if (!validator.isNonEmptyString(response.sessionCookie)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR);\n  }\n});\n/**\n * Instantiates the uploadAccount endpoint settings.\n *\n * @internal\n */\nexports.FIREBASE_AUTH_UPLOAD_ACCOUNT = new api_request_1.ApiSettings('/accounts:batchCreate', 'POST');\n/**\n * Instantiates the downloadAccount endpoint settings.\n *\n * @internal\n */\nexports.FIREBASE_AUTH_DOWNLOAD_ACCOUNT = new api_request_1.ApiSettings('/accounts:batchGet', 'GET')\n// Set request validator.\n.setRequestValidator(request => {\n  // Validate next page token.\n  if (typeof request.nextPageToken !== 'undefined' && !validator.isNonEmptyString(request.nextPageToken)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PAGE_TOKEN);\n  }\n  // Validate max results.\n  if (!validator.isNumber(request.maxResults) || request.maxResults <= 0 || request.maxResults > MAX_DOWNLOAD_ACCOUNT_PAGE_SIZE) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Required \"maxResults\" must be a positive integer that does not exceed ' + `${MAX_DOWNLOAD_ACCOUNT_PAGE_SIZE}.`);\n  }\n});\n/**\n * Instantiates the getAccountInfo endpoint settings.\n *\n * @internal\n */\nexports.FIREBASE_AUTH_GET_ACCOUNT_INFO = new api_request_1.ApiSettings('/accounts:lookup', 'POST')\n// Set request validator.\n.setRequestValidator(request => {\n  if (!request.localId && !request.email && !request.phoneNumber && !request.federatedUserId) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing user identifier');\n  }\n})\n// Set response validator.\n.setResponseValidator(response => {\n  if (!response.users || !response.users.length) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.USER_NOT_FOUND);\n  }\n});\n/**\n * Instantiates the getAccountInfo endpoint settings for use when fetching info\n * for multiple accounts.\n *\n * @internal\n */\nexports.FIREBASE_AUTH_GET_ACCOUNTS_INFO = new api_request_1.ApiSettings('/accounts:lookup', 'POST')\n// Set request validator.\n.setRequestValidator(request => {\n  if (!request.localId && !request.email && !request.phoneNumber && !request.federatedUserId) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing user identifier');\n  }\n});\n/**\n * Instantiates the deleteAccount endpoint settings.\n *\n * @internal\n */\nexports.FIREBASE_AUTH_DELETE_ACCOUNT = new api_request_1.ApiSettings('/accounts:delete', 'POST')\n// Set request validator.\n.setRequestValidator(request => {\n  if (!request.localId) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing user identifier');\n  }\n});\n/**\n * @internal\n */\nexports.FIREBASE_AUTH_BATCH_DELETE_ACCOUNTS = new api_request_1.ApiSettings('/accounts:batchDelete', 'POST').setRequestValidator(request => {\n  if (!request.localIds) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing user identifiers');\n  }\n  if (typeof request.force === 'undefined' || request.force !== true) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing force=true field');\n  }\n}).setResponseValidator(response => {\n  const errors = response.errors || [];\n  errors.forEach(batchDeleteErrorInfo => {\n    if (typeof batchDeleteErrorInfo.index === 'undefined') {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server BatchDeleteAccountResponse is missing an errors.index field');\n    }\n    if (!batchDeleteErrorInfo.localId) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server BatchDeleteAccountResponse is missing an errors.localId field');\n    }\n    // Allow the (error) message to be missing/undef.\n  });\n});\n/**\n * Instantiates the setAccountInfo endpoint settings for updating existing accounts.\n *\n * @internal\n */\nexports.FIREBASE_AUTH_SET_ACCOUNT_INFO = new api_request_1.ApiSettings('/accounts:update', 'POST')\n// Set request validator.\n.setRequestValidator(request => {\n  // localId is a required parameter.\n  if (typeof request.localId === 'undefined') {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing user identifier');\n  }\n  // Throw error when tenantId is passed in POST body.\n  if (typeof request.tenantId !== 'undefined') {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"tenantId\" is an invalid \"UpdateRequest\" property.');\n  }\n  validateCreateEditRequest(request, WriteOperationType.Update);\n})\n// Set response validator.\n.setResponseValidator(response => {\n  // If the localId is not returned, then the request failed.\n  if (!response.localId) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.USER_NOT_FOUND);\n  }\n});\n/**\n * Instantiates the signupNewUser endpoint settings for creating a new user with or without\n * uid being specified. The backend will create a new one if not provided and return it.\n *\n * @internal\n */\nexports.FIREBASE_AUTH_SIGN_UP_NEW_USER = new api_request_1.ApiSettings('/accounts', 'POST')\n// Set request validator.\n.setRequestValidator(request => {\n  // signupNewUser does not support customAttributes.\n  if (typeof request.customAttributes !== 'undefined') {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"customAttributes\" cannot be set when creating a new user.');\n  }\n  // signupNewUser does not support validSince.\n  if (typeof request.validSince !== 'undefined') {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"validSince\" cannot be set when creating a new user.');\n  }\n  // Throw error when tenantId is passed in POST body.\n  if (typeof request.tenantId !== 'undefined') {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"tenantId\" is an invalid \"CreateRequest\" property.');\n  }\n  validateCreateEditRequest(request, WriteOperationType.Create);\n})\n// Set response validator.\n.setResponseValidator(response => {\n  // If the localId is not returned, then the request failed.\n  if (!response.localId) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new user');\n  }\n});\nconst FIREBASE_AUTH_GET_OOB_CODE = new api_request_1.ApiSettings('/accounts:sendOobCode', 'POST')\n// Set request validator.\n.setRequestValidator(request => {\n  if (!validator.isEmail(request.email)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL);\n  }\n  if (typeof request.newEmail !== 'undefined' && !validator.isEmail(request.newEmail)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_NEW_EMAIL);\n  }\n  if (exports.EMAIL_ACTION_REQUEST_TYPES.indexOf(request.requestType) === -1) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `\"${request.requestType}\" is not a supported email action request type.`);\n  }\n})\n// Set response validator.\n.setResponseValidator(response => {\n  // If the oobLink is not returned, then the request failed.\n  if (!response.oobLink) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create the email action link');\n  }\n});\n/**\n * Instantiates the retrieve OIDC configuration endpoint settings.\n *\n * @internal\n */\nconst GET_OAUTH_IDP_CONFIG = new api_request_1.ApiSettings('/oauthIdpConfigs/{providerId}', 'GET')\n// Set response validator.\n.setResponseValidator(response => {\n  // Response should always contain the OIDC provider resource name.\n  if (!validator.isNonEmptyString(response.name)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to get OIDC configuration');\n  }\n});\n/**\n * Instantiates the delete OIDC configuration endpoint settings.\n *\n * @internal\n */\nconst DELETE_OAUTH_IDP_CONFIG = new api_request_1.ApiSettings('/oauthIdpConfigs/{providerId}', 'DELETE');\n/**\n * Instantiates the create OIDC configuration endpoint settings.\n *\n * @internal\n */\nconst CREATE_OAUTH_IDP_CONFIG = new api_request_1.ApiSettings('/oauthIdpConfigs?oauthIdpConfigId={providerId}', 'POST')\n// Set response validator.\n.setResponseValidator(response => {\n  // Response should always contain the OIDC provider resource name.\n  if (!validator.isNonEmptyString(response.name)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new OIDC configuration');\n  }\n});\n/**\n * Instantiates the update OIDC configuration endpoint settings.\n *\n * @internal\n */\nconst UPDATE_OAUTH_IDP_CONFIG = new api_request_1.ApiSettings('/oauthIdpConfigs/{providerId}?updateMask={updateMask}', 'PATCH')\n// Set response validator.\n.setResponseValidator(response => {\n  // Response should always contain the configuration resource name.\n  if (!validator.isNonEmptyString(response.name)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to update OIDC configuration');\n  }\n});\n/**\n * Instantiates the list OIDC configuration endpoint settings.\n *\n * @internal\n */\nconst LIST_OAUTH_IDP_CONFIGS = new api_request_1.ApiSettings('/oauthIdpConfigs', 'GET')\n// Set request validator.\n.setRequestValidator(request => {\n  // Validate next page token.\n  if (typeof request.pageToken !== 'undefined' && !validator.isNonEmptyString(request.pageToken)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PAGE_TOKEN);\n  }\n  // Validate max results.\n  if (!validator.isNumber(request.pageSize) || request.pageSize <= 0 || request.pageSize > MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Required \"maxResults\" must be a positive integer that does not exceed ' + `${MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE}.`);\n  }\n});\n/**\n * Instantiates the retrieve SAML configuration endpoint settings.\n *\n * @internal\n */\nconst GET_INBOUND_SAML_CONFIG = new api_request_1.ApiSettings('/inboundSamlConfigs/{providerId}', 'GET')\n// Set response validator.\n.setResponseValidator(response => {\n  // Response should always contain the SAML provider resource name.\n  if (!validator.isNonEmptyString(response.name)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to get SAML configuration');\n  }\n});\n/**\n * Instantiates the delete SAML configuration endpoint settings.\n *\n * @internal\n */\nconst DELETE_INBOUND_SAML_CONFIG = new api_request_1.ApiSettings('/inboundSamlConfigs/{providerId}', 'DELETE');\n/**\n * Instantiates the create SAML configuration endpoint settings.\n *\n * @internal\n */\nconst CREATE_INBOUND_SAML_CONFIG = new api_request_1.ApiSettings('/inboundSamlConfigs?inboundSamlConfigId={providerId}', 'POST')\n// Set response validator.\n.setResponseValidator(response => {\n  // Response should always contain the SAML provider resource name.\n  if (!validator.isNonEmptyString(response.name)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new SAML configuration');\n  }\n});\n/**\n * Instantiates the update SAML configuration endpoint settings.\n *\n * @internal\n */\nconst UPDATE_INBOUND_SAML_CONFIG = new api_request_1.ApiSettings('/inboundSamlConfigs/{providerId}?updateMask={updateMask}', 'PATCH')\n// Set response validator.\n.setResponseValidator(response => {\n  // Response should always contain the configuration resource name.\n  if (!validator.isNonEmptyString(response.name)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to update SAML configuration');\n  }\n});\n/**\n * Instantiates the list SAML configuration endpoint settings.\n *\n * @internal\n */\nconst LIST_INBOUND_SAML_CONFIGS = new api_request_1.ApiSettings('/inboundSamlConfigs', 'GET')\n// Set request validator.\n.setRequestValidator(request => {\n  // Validate next page token.\n  if (typeof request.pageToken !== 'undefined' && !validator.isNonEmptyString(request.pageToken)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PAGE_TOKEN);\n  }\n  // Validate max results.\n  if (!validator.isNumber(request.pageSize) || request.pageSize <= 0 || request.pageSize > MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Required \"maxResults\" must be a positive integer that does not exceed ' + `${MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE}.`);\n  }\n});\n/**\n * Class that provides the mechanism to send requests to the Firebase Auth backend endpoints.\n *\n * @internal\n */\nclass AbstractAuthRequestHandler {\n  /**\n   * @param response - The response to check for errors.\n   * @returns The error code if present; null otherwise.\n   */\n  static getErrorCode(response) {\n    return validator.isNonNullObject(response) && response.error && response.error.message || null;\n  }\n  static addUidToRequest(id, request) {\n    if (!validator.isUid(id.uid)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID);\n    }\n    request.localId ? request.localId.push(id.uid) : request.localId = [id.uid];\n    return request;\n  }\n  static addEmailToRequest(id, request) {\n    if (!validator.isEmail(id.email)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL);\n    }\n    request.email ? request.email.push(id.email) : request.email = [id.email];\n    return request;\n  }\n  static addPhoneToRequest(id, request) {\n    if (!validator.isPhoneNumber(id.phoneNumber)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHONE_NUMBER);\n    }\n    request.phoneNumber ? request.phoneNumber.push(id.phoneNumber) : request.phoneNumber = [id.phoneNumber];\n    return request;\n  }\n  static addProviderToRequest(id, request) {\n    if (!validator.isNonEmptyString(id.providerId)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID);\n    }\n    if (!validator.isNonEmptyString(id.providerUid)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_UID);\n    }\n    const federatedUserId = {\n      providerId: id.providerId,\n      rawId: id.providerUid\n    };\n    request.federatedUserId ? request.federatedUserId.push(federatedUserId) : request.federatedUserId = [federatedUserId];\n    return request;\n  }\n  /**\n   * @param app - The app used to fetch access tokens to sign API requests.\n   * @constructor\n   */\n  constructor(app) {\n    this.app = app;\n    if (typeof app !== 'object' || app === null || !('options' in app)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'First argument passed to admin.auth() must be a valid Firebase app instance.');\n    }\n    this.httpClient = new AuthHttpClient(app);\n  }\n  /**\n   * Creates a new Firebase session cookie with the specified duration that can be used for\n   * session management (set as a server side session cookie with custom cookie policy).\n   * The session cookie JWT will have the same payload claims as the provided ID token.\n   *\n   * @param idToken - The Firebase ID token to exchange for a session cookie.\n   * @param expiresIn - The session cookie duration in milliseconds.\n   *\n   * @returns A promise that resolves on success with the created session cookie.\n   */\n  createSessionCookie(idToken, expiresIn) {\n    const request = {\n      idToken,\n      // Convert to seconds.\n      validDuration: expiresIn / 1000\n    };\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_CREATE_SESSION_COOKIE, request).then(response => response.sessionCookie);\n  }\n  /**\n   * Looks up a user by uid.\n   *\n   * @param uid - The uid of the user to lookup.\n   * @returns A promise that resolves with the user information.\n   */\n  getAccountInfoByUid(uid) {\n    if (!validator.isUid(uid)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n    }\n    const request = {\n      localId: [uid]\n    };\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_GET_ACCOUNT_INFO, request);\n  }\n  /**\n   * Looks up a user by email.\n   *\n   * @param email - The email of the user to lookup.\n   * @returns A promise that resolves with the user information.\n   */\n  getAccountInfoByEmail(email) {\n    if (!validator.isEmail(email)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL));\n    }\n    const request = {\n      email: [email]\n    };\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_GET_ACCOUNT_INFO, request);\n  }\n  /**\n   * Looks up a user by phone number.\n   *\n   * @param phoneNumber - The phone number of the user to lookup.\n   * @returns A promise that resolves with the user information.\n   */\n  getAccountInfoByPhoneNumber(phoneNumber) {\n    if (!validator.isPhoneNumber(phoneNumber)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHONE_NUMBER));\n    }\n    const request = {\n      phoneNumber: [phoneNumber]\n    };\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_GET_ACCOUNT_INFO, request);\n  }\n  getAccountInfoByFederatedUid(providerId, rawId) {\n    if (!validator.isNonEmptyString(providerId) || !validator.isNonEmptyString(rawId)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID);\n    }\n    const request = {\n      federatedUserId: [{\n        providerId,\n        rawId\n      }]\n    };\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_GET_ACCOUNT_INFO, request);\n  }\n  /**\n   * Looks up multiple users by their identifiers (uid, email, etc).\n   *\n   * @param identifiers - The identifiers indicating the users\n   *     to be looked up. Must have <= 100 entries.\n   * @param A - promise that resolves with the set of successfully\n   *     looked up users. Possibly empty if no users were looked up.\n   */\n  getAccountInfoByIdentifiers(identifiers) {\n    if (identifiers.length === 0) {\n      return Promise.resolve({\n        users: []\n      });\n    } else if (identifiers.length > MAX_GET_ACCOUNTS_BATCH_SIZE) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MAXIMUM_USER_COUNT_EXCEEDED, '`identifiers` parameter must have <= ' + MAX_GET_ACCOUNTS_BATCH_SIZE + ' entries.');\n    }\n    let request = {};\n    for (const id of identifiers) {\n      if ((0, identifier_1.isUidIdentifier)(id)) {\n        request = AbstractAuthRequestHandler.addUidToRequest(id, request);\n      } else if ((0, identifier_1.isEmailIdentifier)(id)) {\n        request = AbstractAuthRequestHandler.addEmailToRequest(id, request);\n      } else if ((0, identifier_1.isPhoneIdentifier)(id)) {\n        request = AbstractAuthRequestHandler.addPhoneToRequest(id, request);\n      } else if ((0, identifier_1.isProviderIdentifier)(id)) {\n        request = AbstractAuthRequestHandler.addProviderToRequest(id, request);\n      } else {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Unrecognized identifier: ' + id);\n      }\n    }\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_GET_ACCOUNTS_INFO, request);\n  }\n  /**\n   * Exports the users (single batch only) with a size of maxResults and starting from\n   * the offset as specified by pageToken.\n   *\n   * @param maxResults - The page size, 1000 if undefined. This is also the maximum\n   *     allowed limit.\n   * @param pageToken - The next page token. If not specified, returns users starting\n   *     without any offset. Users are returned in the order they were created from oldest to\n   *     newest, relative to the page token offset.\n   * @returns A promise that resolves with the current batch of downloaded\n   *     users and the next page token if available. For the last page, an empty list of users\n   *     and no page token are returned.\n   */\n  downloadAccount() {\n    let maxResults = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MAX_DOWNLOAD_ACCOUNT_PAGE_SIZE;\n    let pageToken = arguments.length > 1 ? arguments[1] : undefined;\n    // Construct request.\n    const request = {\n      maxResults,\n      nextPageToken: pageToken\n    };\n    // Remove next page token if not provided.\n    if (typeof request.nextPageToken === 'undefined') {\n      delete request.nextPageToken;\n    }\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_DOWNLOAD_ACCOUNT, request).then(response => {\n      // No more users available.\n      if (!response.users) {\n        response.users = [];\n      }\n      return response;\n    });\n  }\n  /**\n   * Imports the list of users provided to Firebase Auth. This is useful when\n   * migrating from an external authentication system without having to use the Firebase CLI SDK.\n   * At most, 1000 users are allowed to be imported one at a time.\n   * When importing a list of password users, UserImportOptions are required to be specified.\n   *\n   * @param users - The list of user records to import to Firebase Auth.\n   * @param options - The user import options, required when the users provided\n   *     include password credentials.\n   * @returns A promise that resolves when the operation completes\n   *     with the result of the import. This includes the number of successful imports, the number\n   *     of failed uploads and their corresponding errors.\n   */\n  uploadAccount(users, options) {\n    // This will throw if any error is detected in the hash options.\n    // For errors in the list of users, this will not throw and will report the errors and the\n    // corresponding user index in the user import generated response below.\n    // No need to validate raw request or raw response as this is done in UserImportBuilder.\n    const userImportBuilder = new user_import_builder_1.UserImportBuilder(users, options, userRequest => {\n      // Pass true to validate the uploadAccount specific fields.\n      validateCreateEditRequest(userRequest, WriteOperationType.Upload);\n    });\n    const request = userImportBuilder.buildRequest();\n    // Fail quickly if more users than allowed are to be imported.\n    if (validator.isArray(users) && users.length > MAX_UPLOAD_ACCOUNT_BATCH_SIZE) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MAXIMUM_USER_COUNT_EXCEEDED, `A maximum of ${MAX_UPLOAD_ACCOUNT_BATCH_SIZE} users can be imported at once.`);\n    }\n    // If no remaining user in request after client side processing, there is no need\n    // to send the request to the server.\n    if (!request.users || request.users.length === 0) {\n      return Promise.resolve(userImportBuilder.buildResponse([]));\n    }\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_UPLOAD_ACCOUNT, request).then(response => {\n      // No error object is returned if no error encountered.\n      const failedUploads = response.error || [];\n      // Rewrite response as UserImportResult and re-insert client previously detected errors.\n      return userImportBuilder.buildResponse(failedUploads);\n    });\n  }\n  /**\n   * Deletes an account identified by a uid.\n   *\n   * @param uid - The uid of the user to delete.\n   * @returns A promise that resolves when the user is deleted.\n   */\n  deleteAccount(uid) {\n    if (!validator.isUid(uid)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n    }\n    const request = {\n      localId: uid\n    };\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_DELETE_ACCOUNT, request);\n  }\n  deleteAccounts(uids, force) {\n    if (uids.length === 0) {\n      return Promise.resolve({});\n    } else if (uids.length > MAX_DELETE_ACCOUNTS_BATCH_SIZE) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MAXIMUM_USER_COUNT_EXCEEDED, '`uids` parameter must have <= ' + MAX_DELETE_ACCOUNTS_BATCH_SIZE + ' entries.');\n    }\n    const request = {\n      localIds: [],\n      force\n    };\n    uids.forEach(uid => {\n      if (!validator.isUid(uid)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID);\n      }\n      request.localIds.push(uid);\n    });\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_BATCH_DELETE_ACCOUNTS, request);\n  }\n  /**\n   * Sets additional developer claims on an existing user identified by provided UID.\n   *\n   * @param uid - The user to edit.\n   * @param customUserClaims - The developer claims to set.\n   * @returns A promise that resolves when the operation completes\n   *     with the user id that was edited.\n   */\n  setCustomUserClaims(uid, customUserClaims) {\n    // Validate user UID.\n    if (!validator.isUid(uid)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n    } else if (!validator.isObject(customUserClaims)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'CustomUserClaims argument must be an object or null.'));\n    }\n    // Delete operation. Replace null with an empty object.\n    if (customUserClaims === null) {\n      customUserClaims = {};\n    }\n    // Construct custom user attribute editting request.\n    const request = {\n      localId: uid,\n      customAttributes: JSON.stringify(customUserClaims)\n    };\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_SET_ACCOUNT_INFO, request).then(response => {\n      return response.localId;\n    });\n  }\n  /**\n   * Edits an existing user.\n   *\n   * @param uid - The user to edit.\n   * @param properties - The properties to set on the user.\n   * @returns A promise that resolves when the operation completes\n   *     with the user id that was edited.\n   */\n  updateExistingAccount(uid, properties) {\n    if (!validator.isUid(uid)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n    } else if (!validator.isNonNullObject(properties)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Properties argument must be a non-null object.'));\n    } else if (validator.isNonNullObject(properties.providerToLink)) {\n      // TODO(rsgowman): These checks overlap somewhat with\n      // validateProviderUserInfo. It may be possible to refactor a bit.\n      if (!validator.isNonEmptyString(properties.providerToLink.providerId)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'providerToLink.providerId of properties argument must be a non-empty string.');\n      }\n      if (!validator.isNonEmptyString(properties.providerToLink.uid)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'providerToLink.uid of properties argument must be a non-empty string.');\n      }\n    } else if (typeof properties.providersToUnlink !== 'undefined') {\n      if (!validator.isArray(properties.providersToUnlink)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'providersToUnlink of properties argument must be an array of strings.');\n      }\n      properties.providersToUnlink.forEach(providerId => {\n        if (!validator.isNonEmptyString(providerId)) {\n          throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'providersToUnlink of properties argument must be an array of strings.');\n        }\n      });\n    }\n    // Build the setAccountInfo request.\n    const request = (0, deep_copy_1.deepCopy)(properties);\n    request.localId = uid;\n    // For deleting displayName or photoURL, these values must be passed as null.\n    // They will be removed from the backend request and an additional parameter\n    // deleteAttribute: ['PHOTO_URL', 'DISPLAY_NAME']\n    // with an array of the parameter names to delete will be passed.\n    // Parameters that are deletable and their deleteAttribute names.\n    // Use client facing names, photoURL instead of photoUrl.\n    const deletableParams = {\n      displayName: 'DISPLAY_NAME',\n      photoURL: 'PHOTO_URL'\n    };\n    // Properties to delete if available.\n    request.deleteAttribute = [];\n    for (const key in deletableParams) {\n      if (request[key] === null) {\n        // Add property identifier to list of attributes to delete.\n        request.deleteAttribute.push(deletableParams[key]);\n        // Remove property from request.\n        delete request[key];\n      }\n    }\n    if (request.deleteAttribute.length === 0) {\n      delete request.deleteAttribute;\n    }\n    // For deleting phoneNumber, this value must be passed as null.\n    // It will be removed from the backend request and an additional parameter\n    // deleteProvider: ['phone'] with an array of providerIds (phone in this case),\n    // will be passed.\n    if (request.phoneNumber === null) {\n      request.deleteProvider ? request.deleteProvider.push('phone') : request.deleteProvider = ['phone'];\n      delete request.phoneNumber;\n    }\n    if (typeof request.providerToLink !== 'undefined') {\n      request.linkProviderUserInfo = (0, deep_copy_1.deepCopy)(request.providerToLink);\n      delete request.providerToLink;\n      request.linkProviderUserInfo.rawId = request.linkProviderUserInfo.uid;\n      delete request.linkProviderUserInfo.uid;\n    }\n    if (typeof request.providersToUnlink !== 'undefined') {\n      if (!validator.isArray(request.deleteProvider)) {\n        request.deleteProvider = [];\n      }\n      request.deleteProvider = request.deleteProvider.concat(request.providersToUnlink);\n      delete request.providersToUnlink;\n    }\n    // Rewrite photoURL to photoUrl.\n    if (typeof request.photoURL !== 'undefined') {\n      request.photoUrl = request.photoURL;\n      delete request.photoURL;\n    }\n    // Rewrite disabled to disableUser.\n    if (typeof request.disabled !== 'undefined') {\n      request.disableUser = request.disabled;\n      delete request.disabled;\n    }\n    // Construct mfa related user data.\n    if (validator.isNonNullObject(request.multiFactor)) {\n      if (request.multiFactor.enrolledFactors === null) {\n        // Remove all second factors.\n        request.mfa = {};\n      } else if (validator.isArray(request.multiFactor.enrolledFactors)) {\n        request.mfa = {\n          enrollments: []\n        };\n        try {\n          request.multiFactor.enrolledFactors.forEach(multiFactorInfo => {\n            request.mfa.enrollments.push((0, user_import_builder_1.convertMultiFactorInfoToServerFormat)(multiFactorInfo));\n          });\n        } catch (e) {\n          return Promise.reject(e);\n        }\n        if (request.mfa.enrollments.length === 0) {\n          delete request.mfa.enrollments;\n        }\n      }\n      delete request.multiFactor;\n    }\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_SET_ACCOUNT_INFO, request).then(response => {\n      return response.localId;\n    });\n  }\n  /**\n   * Revokes all refresh tokens for the specified user identified by the uid provided.\n   * In addition to revoking all refresh tokens for a user, all ID tokens issued\n   * before revocation will also be revoked on the Auth backend. Any request with an\n   * ID token generated before revocation will be rejected with a token expired error.\n   * Note that due to the fact that the timestamp is stored in seconds, any tokens minted in\n   * the same second as the revocation will still be valid. If there is a chance that a token\n   * was minted in the last second, delay for 1 second before revoking.\n   *\n   * @param uid - The user whose tokens are to be revoked.\n   * @returns A promise that resolves when the operation completes\n   *     successfully with the user id of the corresponding user.\n   */\n  revokeRefreshTokens(uid) {\n    // Validate user UID.\n    if (!validator.isUid(uid)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n    }\n    const request = {\n      localId: uid,\n      // validSince is in UTC seconds.\n      validSince: Math.floor(new Date().getTime() / 1000)\n    };\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_SET_ACCOUNT_INFO, request).then(response => {\n      return response.localId;\n    });\n  }\n  /**\n   * Create a new user with the properties supplied.\n   *\n   * @param properties - The properties to set on the user.\n   * @returns A promise that resolves when the operation completes\n   *     with the user id that was created.\n   */\n  createNewAccount(properties) {\n    if (!validator.isNonNullObject(properties)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Properties argument must be a non-null object.'));\n    }\n    const request = (0, deep_copy_1.deepCopy)(properties);\n    // Rewrite photoURL to photoUrl.\n    if (typeof request.photoURL !== 'undefined') {\n      request.photoUrl = request.photoURL;\n      delete request.photoURL;\n    }\n    // Rewrite uid to localId if it exists.\n    if (typeof request.uid !== 'undefined') {\n      request.localId = request.uid;\n      delete request.uid;\n    }\n    // Construct mfa related user data.\n    if (validator.isNonNullObject(request.multiFactor)) {\n      if (validator.isNonEmptyArray(request.multiFactor.enrolledFactors)) {\n        const mfaInfo = [];\n        try {\n          request.multiFactor.enrolledFactors.forEach(multiFactorInfo => {\n            // Enrollment time and uid are not allowed for signupNewUser endpoint.\n            // They will automatically be provisioned server side.\n            if ('enrollmentTime' in multiFactorInfo) {\n              throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"enrollmentTime\" is not supported when adding second factors via \"createUser()\"');\n            } else if ('uid' in multiFactorInfo) {\n              throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"uid\" is not supported when adding second factors via \"createUser()\"');\n            }\n            mfaInfo.push((0, user_import_builder_1.convertMultiFactorInfoToServerFormat)(multiFactorInfo));\n          });\n        } catch (e) {\n          return Promise.reject(e);\n        }\n        request.mfaInfo = mfaInfo;\n      }\n      delete request.multiFactor;\n    }\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_SIGN_UP_NEW_USER, request).then(response => {\n      // Return the user id.\n      return response.localId;\n    });\n  }\n  /**\n   * Generates the out of band email action link for the email specified using the action code settings provided.\n   * Returns a promise that resolves with the generated link.\n   *\n   * @param requestType - The request type. This could be either used for password reset,\n   *     email verification, email link sign-in.\n   * @param email - The email of the user the link is being sent to.\n   * @param actionCodeSettings - The optional action code setings which defines whether\n   *     the link is to be handled by a mobile app and the additional state information to be passed in the\n   *     deep link, etc. Required when requestType === 'EMAIL_SIGNIN'\n   * @param newEmail - The email address the account is being updated to.\n   *     Required only for VERIFY_AND_CHANGE_EMAIL requests.\n   * @returns A promise that resolves with the email action link.\n   */\n  getEmailActionLink(requestType, email, actionCodeSettings, newEmail) {\n    let request = {\n      requestType,\n      email,\n      returnOobLink: true,\n      ...(typeof newEmail !== 'undefined' && {\n        newEmail\n      })\n    };\n    // ActionCodeSettings required for email link sign-in to determine the url where the sign-in will\n    // be completed.\n    if (typeof actionCodeSettings === 'undefined' && requestType === 'EMAIL_SIGNIN') {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"`actionCodeSettings` is required when `requestType` === 'EMAIL_SIGNIN'\"));\n    }\n    if (typeof actionCodeSettings !== 'undefined' || requestType === 'EMAIL_SIGNIN') {\n      try {\n        const builder = new action_code_settings_builder_1.ActionCodeSettingsBuilder(actionCodeSettings);\n        request = (0, deep_copy_1.deepExtend)(request, builder.buildRequest());\n      } catch (e) {\n        return Promise.reject(e);\n      }\n    }\n    if (requestType === 'VERIFY_AND_CHANGE_EMAIL' && typeof newEmail === 'undefined') {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"`newEmail` is required when `requestType` === 'VERIFY_AND_CHANGE_EMAIL'\"));\n    }\n    return this.invokeRequestHandler(this.getAuthUrlBuilder(), FIREBASE_AUTH_GET_OOB_CODE, request).then(response => {\n      // Return the link.\n      return response.oobLink;\n    });\n  }\n  /**\n   * Looks up an OIDC provider configuration by provider ID.\n   *\n   * @param providerId - The provider identifier of the configuration to lookup.\n   * @returns A promise that resolves with the provider configuration information.\n   */\n  getOAuthIdpConfig(providerId) {\n    if (!auth_config_1.OIDCConfig.isProviderId(providerId)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n    }\n    return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), GET_OAUTH_IDP_CONFIG, {}, {\n      providerId\n    });\n  }\n  /**\n   * Lists the OIDC configurations (single batch only) with a size of maxResults and starting from\n   * the offset as specified by pageToken.\n   *\n   * @param maxResults - The page size, 100 if undefined. This is also the maximum\n   *     allowed limit.\n   * @param pageToken - The next page token. If not specified, returns OIDC configurations\n   *     without any offset. Configurations are returned in the order they were created from oldest to\n   *     newest, relative to the page token offset.\n   * @returns A promise that resolves with the current batch of downloaded\n   *     OIDC configurations and the next page token if available. For the last page, an empty list of provider\n   *     configuration and no page token are returned.\n   */\n  listOAuthIdpConfigs() {\n    let maxResults = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE;\n    let pageToken = arguments.length > 1 ? arguments[1] : undefined;\n    const request = {\n      pageSize: maxResults\n    };\n    // Add next page token if provided.\n    if (typeof pageToken !== 'undefined') {\n      request.pageToken = pageToken;\n    }\n    return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), LIST_OAUTH_IDP_CONFIGS, request).then(response => {\n      if (!response.oauthIdpConfigs) {\n        response.oauthIdpConfigs = [];\n        delete response.nextPageToken;\n      }\n      return response;\n    });\n  }\n  /**\n   * Deletes an OIDC configuration identified by a providerId.\n   *\n   * @param providerId - The identifier of the OIDC configuration to delete.\n   * @returns A promise that resolves when the OIDC provider is deleted.\n   */\n  deleteOAuthIdpConfig(providerId) {\n    if (!auth_config_1.OIDCConfig.isProviderId(providerId)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n    }\n    return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), DELETE_OAUTH_IDP_CONFIG, {}, {\n      providerId\n    }).then(() => {\n      // Return nothing.\n    });\n  }\n  /**\n   * Creates a new OIDC provider configuration with the properties provided.\n   *\n   * @param options - The properties to set on the new OIDC provider configuration to be created.\n   * @returns A promise that resolves with the newly created OIDC\n   *     configuration.\n   */\n  createOAuthIdpConfig(options) {\n    // Construct backend request.\n    let request;\n    try {\n      request = auth_config_1.OIDCConfig.buildServerRequest(options) || {};\n    } catch (e) {\n      return Promise.reject(e);\n    }\n    const providerId = options.providerId;\n    return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), CREATE_OAUTH_IDP_CONFIG, request, {\n      providerId\n    }).then(response => {\n      if (!auth_config_1.OIDCConfig.getProviderIdFromResourceName(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new OIDC provider configuration');\n      }\n      return response;\n    });\n  }\n  /**\n   * Updates an existing OIDC provider configuration with the properties provided.\n   *\n   * @param providerId - The provider identifier of the OIDC configuration to update.\n   * @param options - The properties to update on the existing configuration.\n   * @returns A promise that resolves with the modified provider\n   *     configuration.\n   */\n  updateOAuthIdpConfig(providerId, options) {\n    if (!auth_config_1.OIDCConfig.isProviderId(providerId)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n    }\n    // Construct backend request.\n    let request;\n    try {\n      request = auth_config_1.OIDCConfig.buildServerRequest(options, true) || {};\n    } catch (e) {\n      return Promise.reject(e);\n    }\n    const updateMask = utils.generateUpdateMask(request);\n    return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), UPDATE_OAUTH_IDP_CONFIG, request, {\n      providerId,\n      updateMask: updateMask.join(',')\n    }).then(response => {\n      if (!auth_config_1.OIDCConfig.getProviderIdFromResourceName(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to update OIDC provider configuration');\n      }\n      return response;\n    });\n  }\n  /**\n   * Looks up an SAML provider configuration by provider ID.\n   *\n   * @param providerId - The provider identifier of the configuration to lookup.\n   * @returns A promise that resolves with the provider configuration information.\n   */\n  getInboundSamlConfig(providerId) {\n    if (!auth_config_1.SAMLConfig.isProviderId(providerId)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n    }\n    return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), GET_INBOUND_SAML_CONFIG, {}, {\n      providerId\n    });\n  }\n  /**\n   * Lists the SAML configurations (single batch only) with a size of maxResults and starting from\n   * the offset as specified by pageToken.\n   *\n   * @param maxResults - The page size, 100 if undefined. This is also the maximum\n   *     allowed limit.\n   * @param pageToken - The next page token. If not specified, returns SAML configurations starting\n   *     without any offset. Configurations are returned in the order they were created from oldest to\n   *     newest, relative to the page token offset.\n   * @returns A promise that resolves with the current batch of downloaded\n   *     SAML configurations and the next page token if available. For the last page, an empty list of provider\n   *     configuration and no page token are returned.\n   */\n  listInboundSamlConfigs() {\n    let maxResults = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE;\n    let pageToken = arguments.length > 1 ? arguments[1] : undefined;\n    const request = {\n      pageSize: maxResults\n    };\n    // Add next page token if provided.\n    if (typeof pageToken !== 'undefined') {\n      request.pageToken = pageToken;\n    }\n    return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), LIST_INBOUND_SAML_CONFIGS, request).then(response => {\n      if (!response.inboundSamlConfigs) {\n        response.inboundSamlConfigs = [];\n        delete response.nextPageToken;\n      }\n      return response;\n    });\n  }\n  /**\n   * Deletes a SAML configuration identified by a providerId.\n   *\n   * @param providerId - The identifier of the SAML configuration to delete.\n   * @returns A promise that resolves when the SAML provider is deleted.\n   */\n  deleteInboundSamlConfig(providerId) {\n    if (!auth_config_1.SAMLConfig.isProviderId(providerId)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n    }\n    return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), DELETE_INBOUND_SAML_CONFIG, {}, {\n      providerId\n    }).then(() => {\n      // Return nothing.\n    });\n  }\n  /**\n   * Creates a new SAML provider configuration with the properties provided.\n   *\n   * @param options - The properties to set on the new SAML provider configuration to be created.\n   * @returns A promise that resolves with the newly created SAML\n   *     configuration.\n   */\n  createInboundSamlConfig(options) {\n    // Construct backend request.\n    let request;\n    try {\n      request = auth_config_1.SAMLConfig.buildServerRequest(options) || {};\n    } catch (e) {\n      return Promise.reject(e);\n    }\n    const providerId = options.providerId;\n    return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), CREATE_INBOUND_SAML_CONFIG, request, {\n      providerId\n    }).then(response => {\n      if (!auth_config_1.SAMLConfig.getProviderIdFromResourceName(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new SAML provider configuration');\n      }\n      return response;\n    });\n  }\n  /**\n   * Updates an existing SAML provider configuration with the properties provided.\n   *\n   * @param providerId - The provider identifier of the SAML configuration to update.\n   * @param options - The properties to update on the existing configuration.\n   * @returns A promise that resolves with the modified provider\n   *     configuration.\n   */\n  updateInboundSamlConfig(providerId, options) {\n    if (!auth_config_1.SAMLConfig.isProviderId(providerId)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n    }\n    // Construct backend request.\n    let request;\n    try {\n      request = auth_config_1.SAMLConfig.buildServerRequest(options, true) || {};\n    } catch (e) {\n      return Promise.reject(e);\n    }\n    const updateMask = utils.generateUpdateMask(request);\n    return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), UPDATE_INBOUND_SAML_CONFIG, request, {\n      providerId,\n      updateMask: updateMask.join(',')\n    }).then(response => {\n      if (!auth_config_1.SAMLConfig.getProviderIdFromResourceName(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to update SAML provider configuration');\n      }\n      return response;\n    });\n  }\n  /**\n   * Invokes the request handler based on the API settings object passed.\n   *\n   * @param urlBuilder - The URL builder for Auth endpoints.\n   * @param apiSettings - The API endpoint settings to apply to request and response.\n   * @param requestData - The request data.\n   * @param additionalResourceParams - Additional resource related params if needed.\n   * @returns A promise that resolves with the response.\n   */\n  invokeRequestHandler(urlBuilder, apiSettings, requestData, additionalResourceParams) {\n    return urlBuilder.getUrl(apiSettings.getEndpoint(), additionalResourceParams).then(url => {\n      // Validate request.\n      if (requestData) {\n        const requestValidator = apiSettings.getRequestValidator();\n        requestValidator(requestData);\n      }\n      // Process request.\n      const req = {\n        method: apiSettings.getHttpMethod(),\n        url,\n        headers: FIREBASE_AUTH_HEADER,\n        data: requestData,\n        timeout: FIREBASE_AUTH_TIMEOUT\n      };\n      return this.httpClient.send(req);\n    }).then(response => {\n      // Validate response.\n      const responseValidator = apiSettings.getResponseValidator();\n      responseValidator(response.data);\n      // Return entire response.\n      return response.data;\n    }).catch(err => {\n      if (err instanceof api_request_1.HttpError) {\n        const error = err.response.data;\n        const errorCode = AbstractAuthRequestHandler.getErrorCode(error);\n        if (!errorCode) {\n          throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'Error returned from server: ' + error + '. Additionally, an ' + 'internal error occurred while attempting to extract the ' + 'errorcode from the error.');\n        }\n        throw error_1.FirebaseAuthError.fromServerError(errorCode, /* message */undefined, error);\n      }\n      throw err;\n    });\n  }\n  /**\n   * @returns The current Auth user management resource URL builder.\n   */\n  getAuthUrlBuilder() {\n    if (!this.authUrlBuilder) {\n      this.authUrlBuilder = this.newAuthUrlBuilder();\n    }\n    return this.authUrlBuilder;\n  }\n  /**\n   * @returns The current project config resource URL builder.\n   */\n  getProjectConfigUrlBuilder() {\n    if (!this.projectConfigUrlBuilder) {\n      this.projectConfigUrlBuilder = this.newProjectConfigUrlBuilder();\n    }\n    return this.projectConfigUrlBuilder;\n  }\n}\nexports.AbstractAuthRequestHandler = AbstractAuthRequestHandler;\n/** Instantiates the getConfig endpoint settings. */\nconst GET_PROJECT_CONFIG = new api_request_1.ApiSettings('/config', 'GET').setResponseValidator(response => {\n  // Response should always contain at least the config name.\n  if (!validator.isNonEmptyString(response.name)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to get project config');\n  }\n});\n/** Instantiates the updateConfig endpoint settings. */\nconst UPDATE_PROJECT_CONFIG = new api_request_1.ApiSettings('/config?updateMask={updateMask}', 'PATCH').setResponseValidator(response => {\n  // Response should always contain at least the config name.\n  if (!validator.isNonEmptyString(response.name)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to update project config');\n  }\n});\n/** Instantiates the getTenant endpoint settings. */\nconst GET_TENANT = new api_request_1.ApiSettings('/tenants/{tenantId}', 'GET')\n// Set response validator.\n.setResponseValidator(response => {\n  // Response should always contain at least the tenant name.\n  if (!validator.isNonEmptyString(response.name)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to get tenant');\n  }\n});\n/** Instantiates the deleteTenant endpoint settings. */\nconst DELETE_TENANT = new api_request_1.ApiSettings('/tenants/{tenantId}', 'DELETE');\n/** Instantiates the updateTenant endpoint settings. */\nconst UPDATE_TENANT = new api_request_1.ApiSettings('/tenants/{tenantId}?updateMask={updateMask}', 'PATCH')\n// Set response validator.\n.setResponseValidator(response => {\n  // Response should always contain at least the tenant name.\n  if (!validator.isNonEmptyString(response.name) || !tenant_1.Tenant.getTenantIdFromResourceName(response.name)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to update tenant');\n  }\n});\n/** Instantiates the listTenants endpoint settings. */\nconst LIST_TENANTS = new api_request_1.ApiSettings('/tenants', 'GET')\n// Set request validator.\n.setRequestValidator(request => {\n  // Validate next page token.\n  if (typeof request.pageToken !== 'undefined' && !validator.isNonEmptyString(request.pageToken)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PAGE_TOKEN);\n  }\n  // Validate max results.\n  if (!validator.isNumber(request.pageSize) || request.pageSize <= 0 || request.pageSize > MAX_LIST_TENANT_PAGE_SIZE) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Required \"maxResults\" must be a positive non-zero number that does not exceed ' + `the allowed ${MAX_LIST_TENANT_PAGE_SIZE}.`);\n  }\n});\n/** Instantiates the createTenant endpoint settings. */\nconst CREATE_TENANT = new api_request_1.ApiSettings('/tenants', 'POST')\n// Set response validator.\n.setResponseValidator(response => {\n  // Response should always contain at least the tenant name.\n  if (!validator.isNonEmptyString(response.name) || !tenant_1.Tenant.getTenantIdFromResourceName(response.name)) {\n    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new tenant');\n  }\n});\n/**\n * Utility for sending requests to Auth server that are Auth instance related. This includes user, tenant,\n * and project config management related APIs. This extends the BaseFirebaseAuthRequestHandler class and defines\n * additional tenant management related APIs.\n */\nclass AuthRequestHandler extends AbstractAuthRequestHandler {\n  /**\n   * The FirebaseAuthRequestHandler constructor used to initialize an instance using a FirebaseApp.\n   *\n   * @param app - The app used to fetch access tokens to sign API requests.\n   * @constructor.\n   */\n  constructor(app) {\n    super(app);\n    this.authResourceUrlBuilder = new AuthResourceUrlBuilder(app, 'v2');\n  }\n  /**\n   * @returns A new Auth user management resource URL builder instance.\n   */\n  newAuthUrlBuilder() {\n    return new AuthResourceUrlBuilder(this.app, 'v1');\n  }\n  /**\n   * @returns A new project config resource URL builder instance.\n   */\n  newProjectConfigUrlBuilder() {\n    return new AuthResourceUrlBuilder(this.app, 'v2');\n  }\n  /**\n   * Get the current project's config\n   * @returns A promise that resolves with the project config information.\n   */\n  getProjectConfig() {\n    return this.invokeRequestHandler(this.authResourceUrlBuilder, GET_PROJECT_CONFIG, {}, {}).then(response => {\n      return response;\n    });\n  }\n  /**\n   * Update the current project's config.\n   * @returns A promise that resolves with the project config information.\n   */\n  updateProjectConfig(options) {\n    try {\n      const request = project_config_1.ProjectConfig.buildServerRequest(options);\n      const updateMask = utils.generateUpdateMask(request);\n      return this.invokeRequestHandler(this.authResourceUrlBuilder, UPDATE_PROJECT_CONFIG, request, {\n        updateMask: updateMask.join(',')\n      }).then(response => {\n        return response;\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  /**\n   * Looks up a tenant by tenant ID.\n   *\n   * @param tenantId - The tenant identifier of the tenant to lookup.\n   * @returns A promise that resolves with the tenant information.\n   */\n  getTenant(tenantId) {\n    if (!validator.isNonEmptyString(tenantId)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TENANT_ID));\n    }\n    return this.invokeRequestHandler(this.authResourceUrlBuilder, GET_TENANT, {}, {\n      tenantId\n    }).then(response => {\n      return response;\n    });\n  }\n  /**\n   * Exports the tenants (single batch only) with a size of maxResults and starting from\n   * the offset as specified by pageToken.\n   *\n   * @param maxResults - The page size, 1000 if undefined. This is also the maximum\n   *     allowed limit.\n   * @param pageToken - The next page token. If not specified, returns tenants starting\n   *     without any offset. Tenants are returned in the order they were created from oldest to\n   *     newest, relative to the page token offset.\n   * @returns A promise that resolves with the current batch of downloaded\n   *     tenants and the next page token if available. For the last page, an empty list of tenants\n   *     and no page token are returned.\n   */\n  listTenants() {\n    let maxResults = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : MAX_LIST_TENANT_PAGE_SIZE;\n    let pageToken = arguments.length > 1 ? arguments[1] : undefined;\n    const request = {\n      pageSize: maxResults,\n      pageToken\n    };\n    // Remove next page token if not provided.\n    if (typeof request.pageToken === 'undefined') {\n      delete request.pageToken;\n    }\n    return this.invokeRequestHandler(this.authResourceUrlBuilder, LIST_TENANTS, request).then(response => {\n      if (!response.tenants) {\n        response.tenants = [];\n        delete response.nextPageToken;\n      }\n      return response;\n    });\n  }\n  /**\n   * Deletes a tenant identified by a tenantId.\n   *\n   * @param tenantId - The identifier of the tenant to delete.\n   * @returns A promise that resolves when the tenant is deleted.\n   */\n  deleteTenant(tenantId) {\n    if (!validator.isNonEmptyString(tenantId)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TENANT_ID));\n    }\n    return this.invokeRequestHandler(this.authResourceUrlBuilder, DELETE_TENANT, undefined, {\n      tenantId\n    }).then(() => {\n      // Return nothing.\n    });\n  }\n  /**\n   * Creates a new tenant with the properties provided.\n   *\n   * @param tenantOptions - The properties to set on the new tenant to be created.\n   * @returns A promise that resolves with the newly created tenant object.\n   */\n  createTenant(tenantOptions) {\n    try {\n      // Construct backend request.\n      const request = tenant_1.Tenant.buildServerRequest(tenantOptions, true);\n      return this.invokeRequestHandler(this.authResourceUrlBuilder, CREATE_TENANT, request).then(response => {\n        return response;\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n  /**\n   * Updates an existing tenant with the properties provided.\n   *\n   * @param tenantId - The tenant identifier of the tenant to update.\n   * @param tenantOptions - The properties to update on the existing tenant.\n   * @returns A promise that resolves with the modified tenant object.\n   */\n  updateTenant(tenantId, tenantOptions) {\n    if (!validator.isNonEmptyString(tenantId)) {\n      return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TENANT_ID));\n    }\n    try {\n      // Construct backend request.\n      const request = tenant_1.Tenant.buildServerRequest(tenantOptions, false);\n      // Do not traverse deep into testPhoneNumbers. The entire content should be replaced\n      // and not just specific phone numbers.\n      const updateMask = utils.generateUpdateMask(request, ['testPhoneNumbers']);\n      return this.invokeRequestHandler(this.authResourceUrlBuilder, UPDATE_TENANT, request, {\n        tenantId,\n        updateMask: updateMask.join(',')\n      }).then(response => {\n        return response;\n      });\n    } catch (e) {\n      return Promise.reject(e);\n    }\n  }\n}\nexports.AuthRequestHandler = AuthRequestHandler;\n/**\n * Utility for sending requests to Auth server that are tenant Auth instance related. This includes user\n * management related APIs for specified tenants.\n * This extends the BaseFirebaseAuthRequestHandler class.\n */\nclass TenantAwareAuthRequestHandler extends AbstractAuthRequestHandler {\n  /**\n   * The FirebaseTenantRequestHandler constructor used to initialize an instance using a\n   * FirebaseApp and a tenant ID.\n   *\n   * @param app - The app used to fetch access tokens to sign API requests.\n   * @param tenantId - The request handler's tenant ID.\n   * @constructor\n   */\n  constructor(app, tenantId) {\n    super(app);\n    this.tenantId = tenantId;\n  }\n  /**\n   * @returns A new Auth user management resource URL builder instance.\n   */\n  newAuthUrlBuilder() {\n    return new TenantAwareAuthResourceUrlBuilder(this.app, 'v1', this.tenantId);\n  }\n  /**\n   * @returns A new project config resource URL builder instance.\n   */\n  newProjectConfigUrlBuilder() {\n    return new TenantAwareAuthResourceUrlBuilder(this.app, 'v2', this.tenantId);\n  }\n  /**\n   * Imports the list of users provided to Firebase Auth. This is useful when\n   * migrating from an external authentication system without having to use the Firebase CLI SDK.\n   * At most, 1000 users are allowed to be imported one at a time.\n   * When importing a list of password users, UserImportOptions are required to be specified.\n   *\n   * Overrides the superclass methods by adding an additional check to match tenant IDs of\n   * imported user records if present.\n   *\n   * @param users - The list of user records to import to Firebase Auth.\n   * @param options - The user import options, required when the users provided\n   *     include password credentials.\n   * @returns A promise that resolves when the operation completes\n   *     with the result of the import. This includes the number of successful imports, the number\n   *     of failed uploads and their corresponding errors.\n   */\n  uploadAccount(users, options) {\n    // Add additional check to match tenant ID of imported user records.\n    users.forEach((user, index) => {\n      if (validator.isNonEmptyString(user.tenantId) && user.tenantId !== this.tenantId) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MISMATCHING_TENANT_ID, `UserRecord of index \"${index}\" has mismatching tenant ID \"${user.tenantId}\"`);\n      }\n    });\n    return super.uploadAccount(users, options);\n  }\n}\nexports.TenantAwareAuthRequestHandler = TenantAwareAuthRequestHandler;\nfunction emulatorHost() {\n  return process.env.FIREBASE_AUTH_EMULATOR_HOST;\n}\n/**\n * When true the SDK should communicate with the Auth Emulator for all API\n * calls and also produce unsigned tokens.\n */\nfunction useEmulator() {\n  return !!emulatorHost();\n}\nexports.useEmulator = useEmulator;","map":{"version":3,"names":["Object","defineProperty","exports","value","useEmulator","TenantAwareAuthRequestHandler","AuthRequestHandler","AbstractAuthRequestHandler","FIREBASE_AUTH_SIGN_UP_NEW_USER","FIREBASE_AUTH_SET_ACCOUNT_INFO","FIREBASE_AUTH_BATCH_DELETE_ACCOUNTS","FIREBASE_AUTH_DELETE_ACCOUNT","FIREBASE_AUTH_GET_ACCOUNTS_INFO","FIREBASE_AUTH_GET_ACCOUNT_INFO","FIREBASE_AUTH_DOWNLOAD_ACCOUNT","FIREBASE_AUTH_UPLOAD_ACCOUNT","FIREBASE_AUTH_CREATE_SESSION_COOKIE","EMAIL_ACTION_REQUEST_TYPES","RESERVED_CLAIMS","validator","require","deep_copy_1","error_1","api_request_1","utils","user_import_builder_1","action_code_settings_builder_1","tenant_1","identifier_1","auth_config_1","project_config_1","FIREBASE_AUTH_HEADER","getSdkVersion","FIREBASE_AUTH_TIMEOUT","MAX_CLAIMS_PAYLOAD_SIZE","MAX_DOWNLOAD_ACCOUNT_PAGE_SIZE","MAX_UPLOAD_ACCOUNT_BATCH_SIZE","MAX_GET_ACCOUNTS_BATCH_SIZE","MAX_DELETE_ACCOUNTS_BATCH_SIZE","MIN_SESSION_COOKIE_DURATION_SECS","MAX_SESSION_COOKIE_DURATION_SECS","MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE","FIREBASE_AUTH_BASE_URL_FORMAT","FIREBASE_AUTH_EMULATOR_BASE_URL_FORMAT","FIREBASE_AUTH_TENANT_URL_FORMAT","replace","FIREBASE_AUTH_EMULATOR_TENANT_URL_FORMAT","MAX_LIST_TENANT_PAGE_SIZE","WriteOperationType","AuthResourceUrlBuilder","constructor","app","version","arguments","length","undefined","urlFormat","formatString","host","emulatorHost","getUrl","api","params","getProjectId","then","projectId","baseParams","baseUrl","Promise","resolve","findProjectId","isNonEmptyString","FirebaseAuthError","AuthClientErrorCode","INVALID_CREDENTIAL","TenantAwareAuthResourceUrlBuilder","tenantId","url","AuthHttpClient","AuthorizedHttpClient","getToken","validateAuthFactorInfo","request","validKeys","mfaEnrollmentId","displayName","phoneInfo","enrolledAt","key","authFactorInfoIdentifier","JSON","stringify","INVALID_UID","isString","INVALID_DISPLAY_NAME","isISODateString","INVALID_ENROLLMENT_TIME","isPhoneNumber","INVALID_PHONE_NUMBER","INVALID_ENROLLED_FACTORS","validateProviderUserInfo","rawId","providerId","email","photoUrl","INVALID_PROVIDER_ID","isEmail","INVALID_EMAIL","isURL","INVALID_PHOTO_URL","validateCreateEditRequest","writeOperationType","uploadAccountRequest","Upload","localId","password","rawPassword","emailVerified","disabled","disableUser","deleteAttribute","deleteProvider","sanityCheck","phoneNumber","customAttributes","validSince","linkProviderUserInfo","passwordHash","salt","createdAt","lastLoginAt","providerUserInfo","mfaInfo","mfa","INVALID_TENANT_ID","isUid","isPassword","INVALID_PASSWORD","INVALID_EMAIL_VERIFIED","INVALID_DISABLED_FIELD","isNumber","INVALID_TOKENS_VALID_AFTER_TIME","INVALID_CREATION_TIME","INVALID_LAST_SIGN_IN_TIME","developerClaims","parse","error","INVALID_CLAIMS","message","invalidClaims","forEach","blacklistedClaim","prototype","hasOwnProperty","call","push","FORBIDDEN_CLAIM","join","CLAIMS_TOO_LARGE","INVALID_PASSWORD_HASH","INVALID_PASSWORD_SALT","isArray","INVALID_PROVIDER_DATA","providerUserInfoEntry","enrollments","authFactorInfoEntry","ApiSettings","setRequestValidator","idToken","INVALID_ID_TOKEN","validDuration","INVALID_SESSION_COOKIE_DURATION","setResponseValidator","response","sessionCookie","INTERNAL_ERROR","nextPageToken","INVALID_PAGE_TOKEN","maxResults","INVALID_ARGUMENT","federatedUserId","users","USER_NOT_FOUND","localIds","force","errors","batchDeleteErrorInfo","index","Update","Create","FIREBASE_AUTH_GET_OOB_CODE","newEmail","INVALID_NEW_EMAIL","indexOf","requestType","oobLink","GET_OAUTH_IDP_CONFIG","name","DELETE_OAUTH_IDP_CONFIG","CREATE_OAUTH_IDP_CONFIG","UPDATE_OAUTH_IDP_CONFIG","LIST_OAUTH_IDP_CONFIGS","pageToken","pageSize","GET_INBOUND_SAML_CONFIG","DELETE_INBOUND_SAML_CONFIG","CREATE_INBOUND_SAML_CONFIG","UPDATE_INBOUND_SAML_CONFIG","LIST_INBOUND_SAML_CONFIGS","getErrorCode","isNonNullObject","addUidToRequest","id","uid","addEmailToRequest","addPhoneToRequest","addProviderToRequest","providerUid","INVALID_PROVIDER_UID","httpClient","createSessionCookie","expiresIn","invokeRequestHandler","getAuthUrlBuilder","getAccountInfoByUid","reject","getAccountInfoByEmail","getAccountInfoByPhoneNumber","getAccountInfoByFederatedUid","getAccountInfoByIdentifiers","identifiers","MAXIMUM_USER_COUNT_EXCEEDED","isUidIdentifier","isEmailIdentifier","isPhoneIdentifier","isProviderIdentifier","downloadAccount","uploadAccount","options","userImportBuilder","UserImportBuilder","userRequest","buildRequest","buildResponse","failedUploads","deleteAccount","deleteAccounts","uids","setCustomUserClaims","customUserClaims","isObject","updateExistingAccount","properties","providerToLink","providersToUnlink","deepCopy","deletableParams","photoURL","concat","multiFactor","enrolledFactors","multiFactorInfo","convertMultiFactorInfoToServerFormat","e","revokeRefreshTokens","Math","floor","Date","getTime","createNewAccount","isNonEmptyArray","getEmailActionLink","actionCodeSettings","returnOobLink","builder","ActionCodeSettingsBuilder","deepExtend","getOAuthIdpConfig","OIDCConfig","isProviderId","getProjectConfigUrlBuilder","listOAuthIdpConfigs","oauthIdpConfigs","deleteOAuthIdpConfig","createOAuthIdpConfig","buildServerRequest","getProviderIdFromResourceName","updateOAuthIdpConfig","updateMask","generateUpdateMask","getInboundSamlConfig","SAMLConfig","listInboundSamlConfigs","inboundSamlConfigs","deleteInboundSamlConfig","createInboundSamlConfig","updateInboundSamlConfig","urlBuilder","apiSettings","requestData","additionalResourceParams","getEndpoint","requestValidator","getRequestValidator","req","method","getHttpMethod","headers","data","timeout","send","responseValidator","getResponseValidator","catch","err","HttpError","errorCode","fromServerError","authUrlBuilder","newAuthUrlBuilder","projectConfigUrlBuilder","newProjectConfigUrlBuilder","GET_PROJECT_CONFIG","UPDATE_PROJECT_CONFIG","GET_TENANT","DELETE_TENANT","UPDATE_TENANT","Tenant","getTenantIdFromResourceName","LIST_TENANTS","CREATE_TENANT","authResourceUrlBuilder","getProjectConfig","updateProjectConfig","ProjectConfig","getTenant","listTenants","tenants","deleteTenant","createTenant","tenantOptions","updateTenant","user","MISMATCHING_TENANT_ID","process","env","FIREBASE_AUTH_EMULATOR_HOST"],"sources":["D:/Coding/React/taskmybusiness/node_modules/firebase-admin/lib/auth/auth-api-request.js"],"sourcesContent":["/*! firebase-admin v11.9.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.useEmulator = exports.TenantAwareAuthRequestHandler = exports.AuthRequestHandler = exports.AbstractAuthRequestHandler = exports.FIREBASE_AUTH_SIGN_UP_NEW_USER = exports.FIREBASE_AUTH_SET_ACCOUNT_INFO = exports.FIREBASE_AUTH_BATCH_DELETE_ACCOUNTS = exports.FIREBASE_AUTH_DELETE_ACCOUNT = exports.FIREBASE_AUTH_GET_ACCOUNTS_INFO = exports.FIREBASE_AUTH_GET_ACCOUNT_INFO = exports.FIREBASE_AUTH_DOWNLOAD_ACCOUNT = exports.FIREBASE_AUTH_UPLOAD_ACCOUNT = exports.FIREBASE_AUTH_CREATE_SESSION_COOKIE = exports.EMAIL_ACTION_REQUEST_TYPES = exports.RESERVED_CLAIMS = void 0;\nconst validator = require(\"../utils/validator\");\nconst deep_copy_1 = require(\"../utils/deep-copy\");\nconst error_1 = require(\"../utils/error\");\nconst api_request_1 = require(\"../utils/api-request\");\nconst utils = require(\"../utils/index\");\nconst user_import_builder_1 = require(\"./user-import-builder\");\nconst action_code_settings_builder_1 = require(\"./action-code-settings-builder\");\nconst tenant_1 = require(\"./tenant\");\nconst identifier_1 = require(\"./identifier\");\nconst auth_config_1 = require(\"./auth-config\");\nconst project_config_1 = require(\"./project-config\");\n/** Firebase Auth request header. */\nconst FIREBASE_AUTH_HEADER = {\n    'X-Client-Version': `Node/Admin/${utils.getSdkVersion()}`,\n};\n/** Firebase Auth request timeout duration in milliseconds. */\nconst FIREBASE_AUTH_TIMEOUT = 25000;\n/** List of reserved claims which cannot be provided when creating a custom token. */\nexports.RESERVED_CLAIMS = [\n    'acr', 'amr', 'at_hash', 'aud', 'auth_time', 'azp', 'cnf', 'c_hash', 'exp', 'iat',\n    'iss', 'jti', 'nbf', 'nonce', 'sub', 'firebase',\n];\n/** List of supported email action request types. */\nexports.EMAIL_ACTION_REQUEST_TYPES = [\n    'PASSWORD_RESET', 'VERIFY_EMAIL', 'EMAIL_SIGNIN', 'VERIFY_AND_CHANGE_EMAIL',\n];\n/** Maximum allowed number of characters in the custom claims payload. */\nconst MAX_CLAIMS_PAYLOAD_SIZE = 1000;\n/** Maximum allowed number of users to batch download at one time. */\nconst MAX_DOWNLOAD_ACCOUNT_PAGE_SIZE = 1000;\n/** Maximum allowed number of users to batch upload at one time. */\nconst MAX_UPLOAD_ACCOUNT_BATCH_SIZE = 1000;\n/** Maximum allowed number of users to batch get at one time. */\nconst MAX_GET_ACCOUNTS_BATCH_SIZE = 100;\n/** Maximum allowed number of users to batch delete at one time. */\nconst MAX_DELETE_ACCOUNTS_BATCH_SIZE = 1000;\n/** Minimum allowed session cookie duration in seconds (5 minutes). */\nconst MIN_SESSION_COOKIE_DURATION_SECS = 5 * 60;\n/** Maximum allowed session cookie duration in seconds (2 weeks). */\nconst MAX_SESSION_COOKIE_DURATION_SECS = 14 * 24 * 60 * 60;\n/** Maximum allowed number of provider configurations to batch download at one time. */\nconst MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE = 100;\n/** The Firebase Auth backend base URL format. */\nconst FIREBASE_AUTH_BASE_URL_FORMAT = 'https://identitytoolkit.googleapis.com/{version}/projects/{projectId}{api}';\n/** Firebase Auth base URlLformat when using the auth emultor. */\nconst FIREBASE_AUTH_EMULATOR_BASE_URL_FORMAT = 'http://{host}/identitytoolkit.googleapis.com/{version}/projects/{projectId}{api}';\n/** The Firebase Auth backend multi-tenancy base URL format. */\nconst FIREBASE_AUTH_TENANT_URL_FORMAT = FIREBASE_AUTH_BASE_URL_FORMAT.replace('projects/{projectId}', 'projects/{projectId}/tenants/{tenantId}');\n/** Firebase Auth base URL format when using the auth emultor with multi-tenancy. */\nconst FIREBASE_AUTH_EMULATOR_TENANT_URL_FORMAT = FIREBASE_AUTH_EMULATOR_BASE_URL_FORMAT.replace('projects/{projectId}', 'projects/{projectId}/tenants/{tenantId}');\n/** Maximum allowed number of tenants to download at one time. */\nconst MAX_LIST_TENANT_PAGE_SIZE = 1000;\n/**\n * Enum for the user write operation type.\n */\nvar WriteOperationType;\n(function (WriteOperationType) {\n    WriteOperationType[\"Create\"] = \"create\";\n    WriteOperationType[\"Update\"] = \"update\";\n    WriteOperationType[\"Upload\"] = \"upload\";\n})(WriteOperationType || (WriteOperationType = {}));\n/** Defines a base utility to help with resource URL construction. */\nclass AuthResourceUrlBuilder {\n    /**\n     * The resource URL builder constructor.\n     *\n     * @param projectId - The resource project ID.\n     * @param version - The endpoint API version.\n     * @constructor\n     */\n    constructor(app, version = 'v1') {\n        this.app = app;\n        this.version = version;\n        if (useEmulator()) {\n            this.urlFormat = utils.formatString(FIREBASE_AUTH_EMULATOR_BASE_URL_FORMAT, {\n                host: emulatorHost()\n            });\n        }\n        else {\n            this.urlFormat = FIREBASE_AUTH_BASE_URL_FORMAT;\n        }\n    }\n    /**\n     * Returns the resource URL corresponding to the provided parameters.\n     *\n     * @param api - The backend API name.\n     * @param params - The optional additional parameters to substitute in the\n     *     URL path.\n     * @returns The corresponding resource URL.\n     */\n    getUrl(api, params) {\n        return this.getProjectId()\n            .then((projectId) => {\n            const baseParams = {\n                version: this.version,\n                projectId,\n                api: api || '',\n            };\n            const baseUrl = utils.formatString(this.urlFormat, baseParams);\n            // Substitute additional api related parameters.\n            return utils.formatString(baseUrl, params || {});\n        });\n    }\n    getProjectId() {\n        if (this.projectId) {\n            return Promise.resolve(this.projectId);\n        }\n        return utils.findProjectId(this.app)\n            .then((projectId) => {\n            if (!validator.isNonEmptyString(projectId)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'Failed to determine project ID for Auth. Initialize the '\n                    + 'SDK with service account credentials or set project ID as an app option. '\n                    + 'Alternatively set the GOOGLE_CLOUD_PROJECT environment variable.');\n            }\n            this.projectId = projectId;\n            return projectId;\n        });\n    }\n}\n/** Tenant aware resource builder utility. */\nclass TenantAwareAuthResourceUrlBuilder extends AuthResourceUrlBuilder {\n    /**\n     * The tenant aware resource URL builder constructor.\n     *\n     * @param projectId - The resource project ID.\n     * @param version - The endpoint API version.\n     * @param tenantId - The tenant ID.\n     * @constructor\n     */\n    constructor(app, version, tenantId) {\n        super(app, version);\n        this.app = app;\n        this.version = version;\n        this.tenantId = tenantId;\n        if (useEmulator()) {\n            this.urlFormat = utils.formatString(FIREBASE_AUTH_EMULATOR_TENANT_URL_FORMAT, {\n                host: emulatorHost()\n            });\n        }\n        else {\n            this.urlFormat = FIREBASE_AUTH_TENANT_URL_FORMAT;\n        }\n    }\n    /**\n     * Returns the resource URL corresponding to the provided parameters.\n     *\n     * @param api - The backend API name.\n     * @param params - The optional additional parameters to substitute in the\n     *     URL path.\n     * @returns The corresponding resource URL.\n     */\n    getUrl(api, params) {\n        return super.getUrl(api, params)\n            .then((url) => {\n            return utils.formatString(url, { tenantId: this.tenantId });\n        });\n    }\n}\n/**\n * Auth-specific HTTP client which uses the special \"owner\" token\n * when communicating with the Auth Emulator.\n */\nclass AuthHttpClient extends api_request_1.AuthorizedHttpClient {\n    getToken() {\n        if (useEmulator()) {\n            return Promise.resolve('owner');\n        }\n        return super.getToken();\n    }\n}\n/**\n * Validates an AuthFactorInfo object. All unsupported parameters\n * are removed from the original request. If an invalid field is passed\n * an error is thrown.\n *\n * @param request - The AuthFactorInfo request object.\n */\nfunction validateAuthFactorInfo(request) {\n    const validKeys = {\n        mfaEnrollmentId: true,\n        displayName: true,\n        phoneInfo: true,\n        enrolledAt: true,\n    };\n    // Remove unsupported keys from the original request.\n    for (const key in request) {\n        if (!(key in validKeys)) {\n            delete request[key];\n        }\n    }\n    // No enrollment ID is available for signupNewUser. Use another identifier.\n    const authFactorInfoIdentifier = request.mfaEnrollmentId || request.phoneInfo || JSON.stringify(request);\n    // Enrollment uid may or may not be specified for update operations.\n    if (typeof request.mfaEnrollmentId !== 'undefined' &&\n        !validator.isNonEmptyString(request.mfaEnrollmentId)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID, 'The second factor \"uid\" must be a valid non-empty string.');\n    }\n    if (typeof request.displayName !== 'undefined' &&\n        !validator.isString(request.displayName)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISPLAY_NAME, `The second factor \"displayName\" for \"${authFactorInfoIdentifier}\" must be a valid string.`);\n    }\n    // enrolledAt must be a valid UTC date string.\n    if (typeof request.enrolledAt !== 'undefined' &&\n        !validator.isISODateString(request.enrolledAt)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ENROLLMENT_TIME, `The second factor \"enrollmentTime\" for \"${authFactorInfoIdentifier}\" must be a valid ` +\n            'UTC date string.');\n    }\n    // Validate required fields depending on second factor type.\n    if (typeof request.phoneInfo !== 'undefined') {\n        // phoneNumber should be a string and a valid phone number.\n        if (!validator.isPhoneNumber(request.phoneInfo)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHONE_NUMBER, `The second factor \"phoneNumber\" for \"${authFactorInfoIdentifier}\" must be a non-empty ` +\n                'E.164 standard compliant identifier string.');\n        }\n    }\n    else {\n        // Invalid second factor. For example, a phone second factor may have been provided without\n        // a phone number. A TOTP based second factor may require a secret key, etc.\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ENROLLED_FACTORS, 'MFAInfo object provided is invalid.');\n    }\n}\n/**\n * Validates a providerUserInfo object. All unsupported parameters\n * are removed from the original request. If an invalid field is passed\n * an error is thrown.\n *\n * @param request - The providerUserInfo request object.\n */\nfunction validateProviderUserInfo(request) {\n    const validKeys = {\n        rawId: true,\n        providerId: true,\n        email: true,\n        displayName: true,\n        photoUrl: true,\n    };\n    // Remove invalid keys from original request.\n    for (const key in request) {\n        if (!(key in validKeys)) {\n            delete request[key];\n        }\n    }\n    if (!validator.isNonEmptyString(request.providerId)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID);\n    }\n    if (typeof request.displayName !== 'undefined' &&\n        typeof request.displayName !== 'string') {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISPLAY_NAME, `The provider \"displayName\" for \"${request.providerId}\" must be a valid string.`);\n    }\n    if (!validator.isNonEmptyString(request.rawId)) {\n        // This is called localId on the backend but the developer specifies this as\n        // uid externally. So the error message should use the client facing name.\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID, `The provider \"uid\" for \"${request.providerId}\" must be a valid non-empty string.`);\n    }\n    // email should be a string and a valid email.\n    if (typeof request.email !== 'undefined' && !validator.isEmail(request.email)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL, `The provider \"email\" for \"${request.providerId}\" must be a valid email string.`);\n    }\n    // photoUrl should be a URL.\n    if (typeof request.photoUrl !== 'undefined' &&\n        !validator.isURL(request.photoUrl)) {\n        // This is called photoUrl on the backend but the developer specifies this as\n        // photoURL externally. So the error message should use the client facing name.\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHOTO_URL, `The provider \"photoURL\" for \"${request.providerId}\" must be a valid URL string.`);\n    }\n}\n/**\n * Validates a create/edit request object. All unsupported parameters\n * are removed from the original request. If an invalid field is passed\n * an error is thrown.\n *\n * @param request - The create/edit request object.\n * @param writeOperationType - The write operation type.\n */\nfunction validateCreateEditRequest(request, writeOperationType) {\n    const uploadAccountRequest = writeOperationType === WriteOperationType.Upload;\n    // Hash set of whitelisted parameters.\n    const validKeys = {\n        displayName: true,\n        localId: true,\n        email: true,\n        password: true,\n        rawPassword: true,\n        emailVerified: true,\n        photoUrl: true,\n        disabled: true,\n        disableUser: true,\n        deleteAttribute: true,\n        deleteProvider: true,\n        sanityCheck: true,\n        phoneNumber: true,\n        customAttributes: true,\n        validSince: true,\n        // Pass linkProviderUserInfo only for updates (i.e. not for uploads.)\n        linkProviderUserInfo: !uploadAccountRequest,\n        // Pass tenantId only for uploadAccount requests.\n        tenantId: uploadAccountRequest,\n        passwordHash: uploadAccountRequest,\n        salt: uploadAccountRequest,\n        createdAt: uploadAccountRequest,\n        lastLoginAt: uploadAccountRequest,\n        providerUserInfo: uploadAccountRequest,\n        mfaInfo: uploadAccountRequest,\n        // Only for non-uploadAccount requests.\n        mfa: !uploadAccountRequest,\n    };\n    // Remove invalid keys from original request.\n    for (const key in request) {\n        if (!(key in validKeys)) {\n            delete request[key];\n        }\n    }\n    if (typeof request.tenantId !== 'undefined' &&\n        !validator.isNonEmptyString(request.tenantId)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TENANT_ID);\n    }\n    // For any invalid parameter, use the external key name in the error description.\n    // displayName should be a string.\n    if (typeof request.displayName !== 'undefined' &&\n        !validator.isString(request.displayName)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISPLAY_NAME);\n    }\n    if ((typeof request.localId !== 'undefined' || uploadAccountRequest) &&\n        !validator.isUid(request.localId)) {\n        // This is called localId on the backend but the developer specifies this as\n        // uid externally. So the error message should use the client facing name.\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID);\n    }\n    // email should be a string and a valid email.\n    if (typeof request.email !== 'undefined' && !validator.isEmail(request.email)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL);\n    }\n    // phoneNumber should be a string and a valid phone number.\n    if (typeof request.phoneNumber !== 'undefined' &&\n        !validator.isPhoneNumber(request.phoneNumber)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHONE_NUMBER);\n    }\n    // password should be a string and a minimum of 6 chars.\n    if (typeof request.password !== 'undefined' &&\n        !validator.isPassword(request.password)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PASSWORD);\n    }\n    // rawPassword should be a string and a minimum of 6 chars.\n    if (typeof request.rawPassword !== 'undefined' &&\n        !validator.isPassword(request.rawPassword)) {\n        // This is called rawPassword on the backend but the developer specifies this as\n        // password externally. So the error message should use the client facing name.\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PASSWORD);\n    }\n    // emailVerified should be a boolean.\n    if (typeof request.emailVerified !== 'undefined' &&\n        typeof request.emailVerified !== 'boolean') {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL_VERIFIED);\n    }\n    // photoUrl should be a URL.\n    if (typeof request.photoUrl !== 'undefined' &&\n        !validator.isURL(request.photoUrl)) {\n        // This is called photoUrl on the backend but the developer specifies this as\n        // photoURL externally. So the error message should use the client facing name.\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHOTO_URL);\n    }\n    // disabled should be a boolean.\n    if (typeof request.disabled !== 'undefined' &&\n        typeof request.disabled !== 'boolean') {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISABLED_FIELD);\n    }\n    // validSince should be a number.\n    if (typeof request.validSince !== 'undefined' &&\n        !validator.isNumber(request.validSince)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TOKENS_VALID_AFTER_TIME);\n    }\n    // createdAt should be a number.\n    if (typeof request.createdAt !== 'undefined' &&\n        !validator.isNumber(request.createdAt)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREATION_TIME);\n    }\n    // lastSignInAt should be a number.\n    if (typeof request.lastLoginAt !== 'undefined' &&\n        !validator.isNumber(request.lastLoginAt)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_LAST_SIGN_IN_TIME);\n    }\n    // disableUser should be a boolean.\n    if (typeof request.disableUser !== 'undefined' &&\n        typeof request.disableUser !== 'boolean') {\n        // This is called disableUser on the backend but the developer specifies this as\n        // disabled externally. So the error message should use the client facing name.\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_DISABLED_FIELD);\n    }\n    // customAttributes should be stringified JSON with no blacklisted claims.\n    // The payload should not exceed 1KB.\n    if (typeof request.customAttributes !== 'undefined') {\n        let developerClaims;\n        try {\n            developerClaims = JSON.parse(request.customAttributes);\n        }\n        catch (error) {\n            // JSON parsing error. This should never happen as we stringify the claims internally.\n            // However, we still need to check since setAccountInfo via edit requests could pass\n            // this field.\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CLAIMS, error.message);\n        }\n        const invalidClaims = [];\n        // Check for any invalid claims.\n        exports.RESERVED_CLAIMS.forEach((blacklistedClaim) => {\n            if (Object.prototype.hasOwnProperty.call(developerClaims, blacklistedClaim)) {\n                invalidClaims.push(blacklistedClaim);\n            }\n        });\n        // Throw an error if an invalid claim is detected.\n        if (invalidClaims.length > 0) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.FORBIDDEN_CLAIM, invalidClaims.length > 1 ?\n                `Developer claims \"${invalidClaims.join('\", \"')}\" are reserved and cannot be specified.` :\n                `Developer claim \"${invalidClaims[0]}\" is reserved and cannot be specified.`);\n        }\n        // Check claims payload does not exceed maxmimum size.\n        if (request.customAttributes.length > MAX_CLAIMS_PAYLOAD_SIZE) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.CLAIMS_TOO_LARGE, `Developer claims payload should not exceed ${MAX_CLAIMS_PAYLOAD_SIZE} characters.`);\n        }\n    }\n    // passwordHash has to be a base64 encoded string.\n    if (typeof request.passwordHash !== 'undefined' &&\n        !validator.isString(request.passwordHash)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PASSWORD_HASH);\n    }\n    // salt has to be a base64 encoded string.\n    if (typeof request.salt !== 'undefined' &&\n        !validator.isString(request.salt)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PASSWORD_SALT);\n    }\n    // providerUserInfo has to be an array of valid UserInfo requests.\n    if (typeof request.providerUserInfo !== 'undefined' &&\n        !validator.isArray(request.providerUserInfo)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_DATA);\n    }\n    else if (validator.isArray(request.providerUserInfo)) {\n        request.providerUserInfo.forEach((providerUserInfoEntry) => {\n            validateProviderUserInfo(providerUserInfoEntry);\n        });\n    }\n    // linkProviderUserInfo must be a (single) UserProvider value.\n    if (typeof request.linkProviderUserInfo !== 'undefined') {\n        validateProviderUserInfo(request.linkProviderUserInfo);\n    }\n    // mfaInfo is used for importUsers.\n    // mfa.enrollments is used for setAccountInfo.\n    // enrollments has to be an array of valid AuthFactorInfo requests.\n    let enrollments = null;\n    if (request.mfaInfo) {\n        enrollments = request.mfaInfo;\n    }\n    else if (request.mfa && request.mfa.enrollments) {\n        enrollments = request.mfa.enrollments;\n    }\n    if (enrollments) {\n        if (!validator.isArray(enrollments)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ENROLLED_FACTORS);\n        }\n        enrollments.forEach((authFactorInfoEntry) => {\n            validateAuthFactorInfo(authFactorInfoEntry);\n        });\n    }\n}\n/**\n * Instantiates the createSessionCookie endpoint settings.\n *\n * @internal\n */\nexports.FIREBASE_AUTH_CREATE_SESSION_COOKIE = new api_request_1.ApiSettings(':createSessionCookie', 'POST')\n    // Set request validator.\n    .setRequestValidator((request) => {\n    // Validate the ID token is a non-empty string.\n    if (!validator.isNonEmptyString(request.idToken)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ID_TOKEN);\n    }\n    // Validate the custom session cookie duration.\n    if (!validator.isNumber(request.validDuration) ||\n        request.validDuration < MIN_SESSION_COOKIE_DURATION_SECS ||\n        request.validDuration > MAX_SESSION_COOKIE_DURATION_SECS) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_SESSION_COOKIE_DURATION);\n    }\n})\n    // Set response validator.\n    .setResponseValidator((response) => {\n    // Response should always contain the session cookie.\n    if (!validator.isNonEmptyString(response.sessionCookie)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR);\n    }\n});\n/**\n * Instantiates the uploadAccount endpoint settings.\n *\n * @internal\n */\nexports.FIREBASE_AUTH_UPLOAD_ACCOUNT = new api_request_1.ApiSettings('/accounts:batchCreate', 'POST');\n/**\n * Instantiates the downloadAccount endpoint settings.\n *\n * @internal\n */\nexports.FIREBASE_AUTH_DOWNLOAD_ACCOUNT = new api_request_1.ApiSettings('/accounts:batchGet', 'GET')\n    // Set request validator.\n    .setRequestValidator((request) => {\n    // Validate next page token.\n    if (typeof request.nextPageToken !== 'undefined' &&\n        !validator.isNonEmptyString(request.nextPageToken)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PAGE_TOKEN);\n    }\n    // Validate max results.\n    if (!validator.isNumber(request.maxResults) ||\n        request.maxResults <= 0 ||\n        request.maxResults > MAX_DOWNLOAD_ACCOUNT_PAGE_SIZE) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Required \"maxResults\" must be a positive integer that does not exceed ' +\n            `${MAX_DOWNLOAD_ACCOUNT_PAGE_SIZE}.`);\n    }\n});\n/**\n * Instantiates the getAccountInfo endpoint settings.\n *\n * @internal\n */\nexports.FIREBASE_AUTH_GET_ACCOUNT_INFO = new api_request_1.ApiSettings('/accounts:lookup', 'POST')\n    // Set request validator.\n    .setRequestValidator((request) => {\n    if (!request.localId && !request.email && !request.phoneNumber && !request.federatedUserId) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing user identifier');\n    }\n})\n    // Set response validator.\n    .setResponseValidator((response) => {\n    if (!response.users || !response.users.length) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.USER_NOT_FOUND);\n    }\n});\n/**\n * Instantiates the getAccountInfo endpoint settings for use when fetching info\n * for multiple accounts.\n *\n * @internal\n */\nexports.FIREBASE_AUTH_GET_ACCOUNTS_INFO = new api_request_1.ApiSettings('/accounts:lookup', 'POST')\n    // Set request validator.\n    .setRequestValidator((request) => {\n    if (!request.localId && !request.email && !request.phoneNumber && !request.federatedUserId) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing user identifier');\n    }\n});\n/**\n * Instantiates the deleteAccount endpoint settings.\n *\n * @internal\n */\nexports.FIREBASE_AUTH_DELETE_ACCOUNT = new api_request_1.ApiSettings('/accounts:delete', 'POST')\n    // Set request validator.\n    .setRequestValidator((request) => {\n    if (!request.localId) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing user identifier');\n    }\n});\n/**\n * @internal\n */\nexports.FIREBASE_AUTH_BATCH_DELETE_ACCOUNTS = new api_request_1.ApiSettings('/accounts:batchDelete', 'POST')\n    .setRequestValidator((request) => {\n    if (!request.localIds) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing user identifiers');\n    }\n    if (typeof request.force === 'undefined' || request.force !== true) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing force=true field');\n    }\n})\n    .setResponseValidator((response) => {\n    const errors = response.errors || [];\n    errors.forEach((batchDeleteErrorInfo) => {\n        if (typeof batchDeleteErrorInfo.index === 'undefined') {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server BatchDeleteAccountResponse is missing an errors.index field');\n        }\n        if (!batchDeleteErrorInfo.localId) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server BatchDeleteAccountResponse is missing an errors.localId field');\n        }\n        // Allow the (error) message to be missing/undef.\n    });\n});\n/**\n * Instantiates the setAccountInfo endpoint settings for updating existing accounts.\n *\n * @internal\n */\nexports.FIREBASE_AUTH_SET_ACCOUNT_INFO = new api_request_1.ApiSettings('/accounts:update', 'POST')\n    // Set request validator.\n    .setRequestValidator((request) => {\n    // localId is a required parameter.\n    if (typeof request.localId === 'undefined') {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Server request is missing user identifier');\n    }\n    // Throw error when tenantId is passed in POST body.\n    if (typeof request.tenantId !== 'undefined') {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"tenantId\" is an invalid \"UpdateRequest\" property.');\n    }\n    validateCreateEditRequest(request, WriteOperationType.Update);\n})\n    // Set response validator.\n    .setResponseValidator((response) => {\n    // If the localId is not returned, then the request failed.\n    if (!response.localId) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.USER_NOT_FOUND);\n    }\n});\n/**\n * Instantiates the signupNewUser endpoint settings for creating a new user with or without\n * uid being specified. The backend will create a new one if not provided and return it.\n *\n * @internal\n */\nexports.FIREBASE_AUTH_SIGN_UP_NEW_USER = new api_request_1.ApiSettings('/accounts', 'POST')\n    // Set request validator.\n    .setRequestValidator((request) => {\n    // signupNewUser does not support customAttributes.\n    if (typeof request.customAttributes !== 'undefined') {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"customAttributes\" cannot be set when creating a new user.');\n    }\n    // signupNewUser does not support validSince.\n    if (typeof request.validSince !== 'undefined') {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"validSince\" cannot be set when creating a new user.');\n    }\n    // Throw error when tenantId is passed in POST body.\n    if (typeof request.tenantId !== 'undefined') {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"tenantId\" is an invalid \"CreateRequest\" property.');\n    }\n    validateCreateEditRequest(request, WriteOperationType.Create);\n})\n    // Set response validator.\n    .setResponseValidator((response) => {\n    // If the localId is not returned, then the request failed.\n    if (!response.localId) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new user');\n    }\n});\nconst FIREBASE_AUTH_GET_OOB_CODE = new api_request_1.ApiSettings('/accounts:sendOobCode', 'POST')\n    // Set request validator.\n    .setRequestValidator((request) => {\n    if (!validator.isEmail(request.email)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL);\n    }\n    if (typeof request.newEmail !== 'undefined' && !validator.isEmail(request.newEmail)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_NEW_EMAIL);\n    }\n    if (exports.EMAIL_ACTION_REQUEST_TYPES.indexOf(request.requestType) === -1) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `\"${request.requestType}\" is not a supported email action request type.`);\n    }\n})\n    // Set response validator.\n    .setResponseValidator((response) => {\n    // If the oobLink is not returned, then the request failed.\n    if (!response.oobLink) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create the email action link');\n    }\n});\n/**\n * Instantiates the retrieve OIDC configuration endpoint settings.\n *\n * @internal\n */\nconst GET_OAUTH_IDP_CONFIG = new api_request_1.ApiSettings('/oauthIdpConfigs/{providerId}', 'GET')\n    // Set response validator.\n    .setResponseValidator((response) => {\n    // Response should always contain the OIDC provider resource name.\n    if (!validator.isNonEmptyString(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to get OIDC configuration');\n    }\n});\n/**\n * Instantiates the delete OIDC configuration endpoint settings.\n *\n * @internal\n */\nconst DELETE_OAUTH_IDP_CONFIG = new api_request_1.ApiSettings('/oauthIdpConfigs/{providerId}', 'DELETE');\n/**\n * Instantiates the create OIDC configuration endpoint settings.\n *\n * @internal\n */\nconst CREATE_OAUTH_IDP_CONFIG = new api_request_1.ApiSettings('/oauthIdpConfigs?oauthIdpConfigId={providerId}', 'POST')\n    // Set response validator.\n    .setResponseValidator((response) => {\n    // Response should always contain the OIDC provider resource name.\n    if (!validator.isNonEmptyString(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new OIDC configuration');\n    }\n});\n/**\n * Instantiates the update OIDC configuration endpoint settings.\n *\n * @internal\n */\nconst UPDATE_OAUTH_IDP_CONFIG = new api_request_1.ApiSettings('/oauthIdpConfigs/{providerId}?updateMask={updateMask}', 'PATCH')\n    // Set response validator.\n    .setResponseValidator((response) => {\n    // Response should always contain the configuration resource name.\n    if (!validator.isNonEmptyString(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to update OIDC configuration');\n    }\n});\n/**\n * Instantiates the list OIDC configuration endpoint settings.\n *\n * @internal\n */\nconst LIST_OAUTH_IDP_CONFIGS = new api_request_1.ApiSettings('/oauthIdpConfigs', 'GET')\n    // Set request validator.\n    .setRequestValidator((request) => {\n    // Validate next page token.\n    if (typeof request.pageToken !== 'undefined' &&\n        !validator.isNonEmptyString(request.pageToken)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PAGE_TOKEN);\n    }\n    // Validate max results.\n    if (!validator.isNumber(request.pageSize) ||\n        request.pageSize <= 0 ||\n        request.pageSize > MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Required \"maxResults\" must be a positive integer that does not exceed ' +\n            `${MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE}.`);\n    }\n});\n/**\n * Instantiates the retrieve SAML configuration endpoint settings.\n *\n * @internal\n */\nconst GET_INBOUND_SAML_CONFIG = new api_request_1.ApiSettings('/inboundSamlConfigs/{providerId}', 'GET')\n    // Set response validator.\n    .setResponseValidator((response) => {\n    // Response should always contain the SAML provider resource name.\n    if (!validator.isNonEmptyString(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to get SAML configuration');\n    }\n});\n/**\n * Instantiates the delete SAML configuration endpoint settings.\n *\n * @internal\n */\nconst DELETE_INBOUND_SAML_CONFIG = new api_request_1.ApiSettings('/inboundSamlConfigs/{providerId}', 'DELETE');\n/**\n * Instantiates the create SAML configuration endpoint settings.\n *\n * @internal\n */\nconst CREATE_INBOUND_SAML_CONFIG = new api_request_1.ApiSettings('/inboundSamlConfigs?inboundSamlConfigId={providerId}', 'POST')\n    // Set response validator.\n    .setResponseValidator((response) => {\n    // Response should always contain the SAML provider resource name.\n    if (!validator.isNonEmptyString(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new SAML configuration');\n    }\n});\n/**\n * Instantiates the update SAML configuration endpoint settings.\n *\n * @internal\n */\nconst UPDATE_INBOUND_SAML_CONFIG = new api_request_1.ApiSettings('/inboundSamlConfigs/{providerId}?updateMask={updateMask}', 'PATCH')\n    // Set response validator.\n    .setResponseValidator((response) => {\n    // Response should always contain the configuration resource name.\n    if (!validator.isNonEmptyString(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to update SAML configuration');\n    }\n});\n/**\n * Instantiates the list SAML configuration endpoint settings.\n *\n * @internal\n */\nconst LIST_INBOUND_SAML_CONFIGS = new api_request_1.ApiSettings('/inboundSamlConfigs', 'GET')\n    // Set request validator.\n    .setRequestValidator((request) => {\n    // Validate next page token.\n    if (typeof request.pageToken !== 'undefined' &&\n        !validator.isNonEmptyString(request.pageToken)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PAGE_TOKEN);\n    }\n    // Validate max results.\n    if (!validator.isNumber(request.pageSize) ||\n        request.pageSize <= 0 ||\n        request.pageSize > MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Required \"maxResults\" must be a positive integer that does not exceed ' +\n            `${MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE}.`);\n    }\n});\n/**\n * Class that provides the mechanism to send requests to the Firebase Auth backend endpoints.\n *\n * @internal\n */\nclass AbstractAuthRequestHandler {\n    /**\n     * @param response - The response to check for errors.\n     * @returns The error code if present; null otherwise.\n     */\n    static getErrorCode(response) {\n        return (validator.isNonNullObject(response) && response.error && response.error.message) || null;\n    }\n    static addUidToRequest(id, request) {\n        if (!validator.isUid(id.uid)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID);\n        }\n        request.localId ? request.localId.push(id.uid) : request.localId = [id.uid];\n        return request;\n    }\n    static addEmailToRequest(id, request) {\n        if (!validator.isEmail(id.email)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL);\n        }\n        request.email ? request.email.push(id.email) : request.email = [id.email];\n        return request;\n    }\n    static addPhoneToRequest(id, request) {\n        if (!validator.isPhoneNumber(id.phoneNumber)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHONE_NUMBER);\n        }\n        request.phoneNumber ? request.phoneNumber.push(id.phoneNumber) : request.phoneNumber = [id.phoneNumber];\n        return request;\n    }\n    static addProviderToRequest(id, request) {\n        if (!validator.isNonEmptyString(id.providerId)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID);\n        }\n        if (!validator.isNonEmptyString(id.providerUid)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_UID);\n        }\n        const federatedUserId = {\n            providerId: id.providerId,\n            rawId: id.providerUid,\n        };\n        request.federatedUserId\n            ? request.federatedUserId.push(federatedUserId)\n            : request.federatedUserId = [federatedUserId];\n        return request;\n    }\n    /**\n     * @param app - The app used to fetch access tokens to sign API requests.\n     * @constructor\n     */\n    constructor(app) {\n        this.app = app;\n        if (typeof app !== 'object' || app === null || !('options' in app)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'First argument passed to admin.auth() must be a valid Firebase app instance.');\n        }\n        this.httpClient = new AuthHttpClient(app);\n    }\n    /**\n     * Creates a new Firebase session cookie with the specified duration that can be used for\n     * session management (set as a server side session cookie with custom cookie policy).\n     * The session cookie JWT will have the same payload claims as the provided ID token.\n     *\n     * @param idToken - The Firebase ID token to exchange for a session cookie.\n     * @param expiresIn - The session cookie duration in milliseconds.\n     *\n     * @returns A promise that resolves on success with the created session cookie.\n     */\n    createSessionCookie(idToken, expiresIn) {\n        const request = {\n            idToken,\n            // Convert to seconds.\n            validDuration: expiresIn / 1000,\n        };\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_CREATE_SESSION_COOKIE, request)\n            .then((response) => response.sessionCookie);\n    }\n    /**\n     * Looks up a user by uid.\n     *\n     * @param uid - The uid of the user to lookup.\n     * @returns A promise that resolves with the user information.\n     */\n    getAccountInfoByUid(uid) {\n        if (!validator.isUid(uid)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n        }\n        const request = {\n            localId: [uid],\n        };\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_GET_ACCOUNT_INFO, request);\n    }\n    /**\n     * Looks up a user by email.\n     *\n     * @param email - The email of the user to lookup.\n     * @returns A promise that resolves with the user information.\n     */\n    getAccountInfoByEmail(email) {\n        if (!validator.isEmail(email)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_EMAIL));\n        }\n        const request = {\n            email: [email],\n        };\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_GET_ACCOUNT_INFO, request);\n    }\n    /**\n     * Looks up a user by phone number.\n     *\n     * @param phoneNumber - The phone number of the user to lookup.\n     * @returns A promise that resolves with the user information.\n     */\n    getAccountInfoByPhoneNumber(phoneNumber) {\n        if (!validator.isPhoneNumber(phoneNumber)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PHONE_NUMBER));\n        }\n        const request = {\n            phoneNumber: [phoneNumber],\n        };\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_GET_ACCOUNT_INFO, request);\n    }\n    getAccountInfoByFederatedUid(providerId, rawId) {\n        if (!validator.isNonEmptyString(providerId) || !validator.isNonEmptyString(rawId)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID);\n        }\n        const request = {\n            federatedUserId: [{\n                    providerId,\n                    rawId,\n                }],\n        };\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_GET_ACCOUNT_INFO, request);\n    }\n    /**\n     * Looks up multiple users by their identifiers (uid, email, etc).\n     *\n     * @param identifiers - The identifiers indicating the users\n     *     to be looked up. Must have <= 100 entries.\n     * @param A - promise that resolves with the set of successfully\n     *     looked up users. Possibly empty if no users were looked up.\n     */\n    getAccountInfoByIdentifiers(identifiers) {\n        if (identifiers.length === 0) {\n            return Promise.resolve({ users: [] });\n        }\n        else if (identifiers.length > MAX_GET_ACCOUNTS_BATCH_SIZE) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MAXIMUM_USER_COUNT_EXCEEDED, '`identifiers` parameter must have <= ' + MAX_GET_ACCOUNTS_BATCH_SIZE + ' entries.');\n        }\n        let request = {};\n        for (const id of identifiers) {\n            if ((0, identifier_1.isUidIdentifier)(id)) {\n                request = AbstractAuthRequestHandler.addUidToRequest(id, request);\n            }\n            else if ((0, identifier_1.isEmailIdentifier)(id)) {\n                request = AbstractAuthRequestHandler.addEmailToRequest(id, request);\n            }\n            else if ((0, identifier_1.isPhoneIdentifier)(id)) {\n                request = AbstractAuthRequestHandler.addPhoneToRequest(id, request);\n            }\n            else if ((0, identifier_1.isProviderIdentifier)(id)) {\n                request = AbstractAuthRequestHandler.addProviderToRequest(id, request);\n            }\n            else {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Unrecognized identifier: ' + id);\n            }\n        }\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_GET_ACCOUNTS_INFO, request);\n    }\n    /**\n     * Exports the users (single batch only) with a size of maxResults and starting from\n     * the offset as specified by pageToken.\n     *\n     * @param maxResults - The page size, 1000 if undefined. This is also the maximum\n     *     allowed limit.\n     * @param pageToken - The next page token. If not specified, returns users starting\n     *     without any offset. Users are returned in the order they were created from oldest to\n     *     newest, relative to the page token offset.\n     * @returns A promise that resolves with the current batch of downloaded\n     *     users and the next page token if available. For the last page, an empty list of users\n     *     and no page token are returned.\n     */\n    downloadAccount(maxResults = MAX_DOWNLOAD_ACCOUNT_PAGE_SIZE, pageToken) {\n        // Construct request.\n        const request = {\n            maxResults,\n            nextPageToken: pageToken,\n        };\n        // Remove next page token if not provided.\n        if (typeof request.nextPageToken === 'undefined') {\n            delete request.nextPageToken;\n        }\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_DOWNLOAD_ACCOUNT, request)\n            .then((response) => {\n            // No more users available.\n            if (!response.users) {\n                response.users = [];\n            }\n            return response;\n        });\n    }\n    /**\n     * Imports the list of users provided to Firebase Auth. This is useful when\n     * migrating from an external authentication system without having to use the Firebase CLI SDK.\n     * At most, 1000 users are allowed to be imported one at a time.\n     * When importing a list of password users, UserImportOptions are required to be specified.\n     *\n     * @param users - The list of user records to import to Firebase Auth.\n     * @param options - The user import options, required when the users provided\n     *     include password credentials.\n     * @returns A promise that resolves when the operation completes\n     *     with the result of the import. This includes the number of successful imports, the number\n     *     of failed uploads and their corresponding errors.\n     */\n    uploadAccount(users, options) {\n        // This will throw if any error is detected in the hash options.\n        // For errors in the list of users, this will not throw and will report the errors and the\n        // corresponding user index in the user import generated response below.\n        // No need to validate raw request or raw response as this is done in UserImportBuilder.\n        const userImportBuilder = new user_import_builder_1.UserImportBuilder(users, options, (userRequest) => {\n            // Pass true to validate the uploadAccount specific fields.\n            validateCreateEditRequest(userRequest, WriteOperationType.Upload);\n        });\n        const request = userImportBuilder.buildRequest();\n        // Fail quickly if more users than allowed are to be imported.\n        if (validator.isArray(users) && users.length > MAX_UPLOAD_ACCOUNT_BATCH_SIZE) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MAXIMUM_USER_COUNT_EXCEEDED, `A maximum of ${MAX_UPLOAD_ACCOUNT_BATCH_SIZE} users can be imported at once.`);\n        }\n        // If no remaining user in request after client side processing, there is no need\n        // to send the request to the server.\n        if (!request.users || request.users.length === 0) {\n            return Promise.resolve(userImportBuilder.buildResponse([]));\n        }\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_UPLOAD_ACCOUNT, request)\n            .then((response) => {\n            // No error object is returned if no error encountered.\n            const failedUploads = (response.error || []);\n            // Rewrite response as UserImportResult and re-insert client previously detected errors.\n            return userImportBuilder.buildResponse(failedUploads);\n        });\n    }\n    /**\n     * Deletes an account identified by a uid.\n     *\n     * @param uid - The uid of the user to delete.\n     * @returns A promise that resolves when the user is deleted.\n     */\n    deleteAccount(uid) {\n        if (!validator.isUid(uid)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n        }\n        const request = {\n            localId: uid,\n        };\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_DELETE_ACCOUNT, request);\n    }\n    deleteAccounts(uids, force) {\n        if (uids.length === 0) {\n            return Promise.resolve({});\n        }\n        else if (uids.length > MAX_DELETE_ACCOUNTS_BATCH_SIZE) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MAXIMUM_USER_COUNT_EXCEEDED, '`uids` parameter must have <= ' + MAX_DELETE_ACCOUNTS_BATCH_SIZE + ' entries.');\n        }\n        const request = {\n            localIds: [],\n            force,\n        };\n        uids.forEach((uid) => {\n            if (!validator.isUid(uid)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID);\n            }\n            request.localIds.push(uid);\n        });\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_BATCH_DELETE_ACCOUNTS, request);\n    }\n    /**\n     * Sets additional developer claims on an existing user identified by provided UID.\n     *\n     * @param uid - The user to edit.\n     * @param customUserClaims - The developer claims to set.\n     * @returns A promise that resolves when the operation completes\n     *     with the user id that was edited.\n     */\n    setCustomUserClaims(uid, customUserClaims) {\n        // Validate user UID.\n        if (!validator.isUid(uid)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n        }\n        else if (!validator.isObject(customUserClaims)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'CustomUserClaims argument must be an object or null.'));\n        }\n        // Delete operation. Replace null with an empty object.\n        if (customUserClaims === null) {\n            customUserClaims = {};\n        }\n        // Construct custom user attribute editting request.\n        const request = {\n            localId: uid,\n            customAttributes: JSON.stringify(customUserClaims),\n        };\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_SET_ACCOUNT_INFO, request)\n            .then((response) => {\n            return response.localId;\n        });\n    }\n    /**\n     * Edits an existing user.\n     *\n     * @param uid - The user to edit.\n     * @param properties - The properties to set on the user.\n     * @returns A promise that resolves when the operation completes\n     *     with the user id that was edited.\n     */\n    updateExistingAccount(uid, properties) {\n        if (!validator.isUid(uid)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n        }\n        else if (!validator.isNonNullObject(properties)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Properties argument must be a non-null object.'));\n        }\n        else if (validator.isNonNullObject(properties.providerToLink)) {\n            // TODO(rsgowman): These checks overlap somewhat with\n            // validateProviderUserInfo. It may be possible to refactor a bit.\n            if (!validator.isNonEmptyString(properties.providerToLink.providerId)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'providerToLink.providerId of properties argument must be a non-empty string.');\n            }\n            if (!validator.isNonEmptyString(properties.providerToLink.uid)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'providerToLink.uid of properties argument must be a non-empty string.');\n            }\n        }\n        else if (typeof properties.providersToUnlink !== 'undefined') {\n            if (!validator.isArray(properties.providersToUnlink)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'providersToUnlink of properties argument must be an array of strings.');\n            }\n            properties.providersToUnlink.forEach((providerId) => {\n                if (!validator.isNonEmptyString(providerId)) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'providersToUnlink of properties argument must be an array of strings.');\n                }\n            });\n        }\n        // Build the setAccountInfo request.\n        const request = (0, deep_copy_1.deepCopy)(properties);\n        request.localId = uid;\n        // For deleting displayName or photoURL, these values must be passed as null.\n        // They will be removed from the backend request and an additional parameter\n        // deleteAttribute: ['PHOTO_URL', 'DISPLAY_NAME']\n        // with an array of the parameter names to delete will be passed.\n        // Parameters that are deletable and their deleteAttribute names.\n        // Use client facing names, photoURL instead of photoUrl.\n        const deletableParams = {\n            displayName: 'DISPLAY_NAME',\n            photoURL: 'PHOTO_URL',\n        };\n        // Properties to delete if available.\n        request.deleteAttribute = [];\n        for (const key in deletableParams) {\n            if (request[key] === null) {\n                // Add property identifier to list of attributes to delete.\n                request.deleteAttribute.push(deletableParams[key]);\n                // Remove property from request.\n                delete request[key];\n            }\n        }\n        if (request.deleteAttribute.length === 0) {\n            delete request.deleteAttribute;\n        }\n        // For deleting phoneNumber, this value must be passed as null.\n        // It will be removed from the backend request and an additional parameter\n        // deleteProvider: ['phone'] with an array of providerIds (phone in this case),\n        // will be passed.\n        if (request.phoneNumber === null) {\n            request.deleteProvider ? request.deleteProvider.push('phone') : request.deleteProvider = ['phone'];\n            delete request.phoneNumber;\n        }\n        if (typeof (request.providerToLink) !== 'undefined') {\n            request.linkProviderUserInfo = (0, deep_copy_1.deepCopy)(request.providerToLink);\n            delete request.providerToLink;\n            request.linkProviderUserInfo.rawId = request.linkProviderUserInfo.uid;\n            delete request.linkProviderUserInfo.uid;\n        }\n        if (typeof (request.providersToUnlink) !== 'undefined') {\n            if (!validator.isArray(request.deleteProvider)) {\n                request.deleteProvider = [];\n            }\n            request.deleteProvider = request.deleteProvider.concat(request.providersToUnlink);\n            delete request.providersToUnlink;\n        }\n        // Rewrite photoURL to photoUrl.\n        if (typeof request.photoURL !== 'undefined') {\n            request.photoUrl = request.photoURL;\n            delete request.photoURL;\n        }\n        // Rewrite disabled to disableUser.\n        if (typeof request.disabled !== 'undefined') {\n            request.disableUser = request.disabled;\n            delete request.disabled;\n        }\n        // Construct mfa related user data.\n        if (validator.isNonNullObject(request.multiFactor)) {\n            if (request.multiFactor.enrolledFactors === null) {\n                // Remove all second factors.\n                request.mfa = {};\n            }\n            else if (validator.isArray(request.multiFactor.enrolledFactors)) {\n                request.mfa = {\n                    enrollments: [],\n                };\n                try {\n                    request.multiFactor.enrolledFactors.forEach((multiFactorInfo) => {\n                        request.mfa.enrollments.push((0, user_import_builder_1.convertMultiFactorInfoToServerFormat)(multiFactorInfo));\n                    });\n                }\n                catch (e) {\n                    return Promise.reject(e);\n                }\n                if (request.mfa.enrollments.length === 0) {\n                    delete request.mfa.enrollments;\n                }\n            }\n            delete request.multiFactor;\n        }\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_SET_ACCOUNT_INFO, request)\n            .then((response) => {\n            return response.localId;\n        });\n    }\n    /**\n     * Revokes all refresh tokens for the specified user identified by the uid provided.\n     * In addition to revoking all refresh tokens for a user, all ID tokens issued\n     * before revocation will also be revoked on the Auth backend. Any request with an\n     * ID token generated before revocation will be rejected with a token expired error.\n     * Note that due to the fact that the timestamp is stored in seconds, any tokens minted in\n     * the same second as the revocation will still be valid. If there is a chance that a token\n     * was minted in the last second, delay for 1 second before revoking.\n     *\n     * @param uid - The user whose tokens are to be revoked.\n     * @returns A promise that resolves when the operation completes\n     *     successfully with the user id of the corresponding user.\n     */\n    revokeRefreshTokens(uid) {\n        // Validate user UID.\n        if (!validator.isUid(uid)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_UID));\n        }\n        const request = {\n            localId: uid,\n            // validSince is in UTC seconds.\n            validSince: Math.floor(new Date().getTime() / 1000),\n        };\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_SET_ACCOUNT_INFO, request)\n            .then((response) => {\n            return response.localId;\n        });\n    }\n    /**\n     * Create a new user with the properties supplied.\n     *\n     * @param properties - The properties to set on the user.\n     * @returns A promise that resolves when the operation completes\n     *     with the user id that was created.\n     */\n    createNewAccount(properties) {\n        if (!validator.isNonNullObject(properties)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Properties argument must be a non-null object.'));\n        }\n        const request = (0, deep_copy_1.deepCopy)(properties);\n        // Rewrite photoURL to photoUrl.\n        if (typeof request.photoURL !== 'undefined') {\n            request.photoUrl = request.photoURL;\n            delete request.photoURL;\n        }\n        // Rewrite uid to localId if it exists.\n        if (typeof request.uid !== 'undefined') {\n            request.localId = request.uid;\n            delete request.uid;\n        }\n        // Construct mfa related user data.\n        if (validator.isNonNullObject(request.multiFactor)) {\n            if (validator.isNonEmptyArray(request.multiFactor.enrolledFactors)) {\n                const mfaInfo = [];\n                try {\n                    request.multiFactor.enrolledFactors.forEach((multiFactorInfo) => {\n                        // Enrollment time and uid are not allowed for signupNewUser endpoint.\n                        // They will automatically be provisioned server side.\n                        if ('enrollmentTime' in multiFactorInfo) {\n                            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"enrollmentTime\" is not supported when adding second factors via \"createUser()\"');\n                        }\n                        else if ('uid' in multiFactorInfo) {\n                            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, '\"uid\" is not supported when adding second factors via \"createUser()\"');\n                        }\n                        mfaInfo.push((0, user_import_builder_1.convertMultiFactorInfoToServerFormat)(multiFactorInfo));\n                    });\n                }\n                catch (e) {\n                    return Promise.reject(e);\n                }\n                request.mfaInfo = mfaInfo;\n            }\n            delete request.multiFactor;\n        }\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), exports.FIREBASE_AUTH_SIGN_UP_NEW_USER, request)\n            .then((response) => {\n            // Return the user id.\n            return response.localId;\n        });\n    }\n    /**\n     * Generates the out of band email action link for the email specified using the action code settings provided.\n     * Returns a promise that resolves with the generated link.\n     *\n     * @param requestType - The request type. This could be either used for password reset,\n     *     email verification, email link sign-in.\n     * @param email - The email of the user the link is being sent to.\n     * @param actionCodeSettings - The optional action code setings which defines whether\n     *     the link is to be handled by a mobile app and the additional state information to be passed in the\n     *     deep link, etc. Required when requestType === 'EMAIL_SIGNIN'\n     * @param newEmail - The email address the account is being updated to.\n     *     Required only for VERIFY_AND_CHANGE_EMAIL requests.\n     * @returns A promise that resolves with the email action link.\n     */\n    getEmailActionLink(requestType, email, actionCodeSettings, newEmail) {\n        let request = {\n            requestType,\n            email,\n            returnOobLink: true,\n            ...(typeof newEmail !== 'undefined') && { newEmail },\n        };\n        // ActionCodeSettings required for email link sign-in to determine the url where the sign-in will\n        // be completed.\n        if (typeof actionCodeSettings === 'undefined' && requestType === 'EMAIL_SIGNIN') {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"`actionCodeSettings` is required when `requestType` === 'EMAIL_SIGNIN'\"));\n        }\n        if (typeof actionCodeSettings !== 'undefined' || requestType === 'EMAIL_SIGNIN') {\n            try {\n                const builder = new action_code_settings_builder_1.ActionCodeSettingsBuilder(actionCodeSettings);\n                request = (0, deep_copy_1.deepExtend)(request, builder.buildRequest());\n            }\n            catch (e) {\n                return Promise.reject(e);\n            }\n        }\n        if (requestType === 'VERIFY_AND_CHANGE_EMAIL' && typeof newEmail === 'undefined') {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, \"`newEmail` is required when `requestType` === 'VERIFY_AND_CHANGE_EMAIL'\"));\n        }\n        return this.invokeRequestHandler(this.getAuthUrlBuilder(), FIREBASE_AUTH_GET_OOB_CODE, request)\n            .then((response) => {\n            // Return the link.\n            return response.oobLink;\n        });\n    }\n    /**\n     * Looks up an OIDC provider configuration by provider ID.\n     *\n     * @param providerId - The provider identifier of the configuration to lookup.\n     * @returns A promise that resolves with the provider configuration information.\n     */\n    getOAuthIdpConfig(providerId) {\n        if (!auth_config_1.OIDCConfig.isProviderId(providerId)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n        }\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), GET_OAUTH_IDP_CONFIG, {}, { providerId });\n    }\n    /**\n     * Lists the OIDC configurations (single batch only) with a size of maxResults and starting from\n     * the offset as specified by pageToken.\n     *\n     * @param maxResults - The page size, 100 if undefined. This is also the maximum\n     *     allowed limit.\n     * @param pageToken - The next page token. If not specified, returns OIDC configurations\n     *     without any offset. Configurations are returned in the order they were created from oldest to\n     *     newest, relative to the page token offset.\n     * @returns A promise that resolves with the current batch of downloaded\n     *     OIDC configurations and the next page token if available. For the last page, an empty list of provider\n     *     configuration and no page token are returned.\n     */\n    listOAuthIdpConfigs(maxResults = MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE, pageToken) {\n        const request = {\n            pageSize: maxResults,\n        };\n        // Add next page token if provided.\n        if (typeof pageToken !== 'undefined') {\n            request.pageToken = pageToken;\n        }\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), LIST_OAUTH_IDP_CONFIGS, request)\n            .then((response) => {\n            if (!response.oauthIdpConfigs) {\n                response.oauthIdpConfigs = [];\n                delete response.nextPageToken;\n            }\n            return response;\n        });\n    }\n    /**\n     * Deletes an OIDC configuration identified by a providerId.\n     *\n     * @param providerId - The identifier of the OIDC configuration to delete.\n     * @returns A promise that resolves when the OIDC provider is deleted.\n     */\n    deleteOAuthIdpConfig(providerId) {\n        if (!auth_config_1.OIDCConfig.isProviderId(providerId)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n        }\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), DELETE_OAUTH_IDP_CONFIG, {}, { providerId })\n            .then(() => {\n            // Return nothing.\n        });\n    }\n    /**\n     * Creates a new OIDC provider configuration with the properties provided.\n     *\n     * @param options - The properties to set on the new OIDC provider configuration to be created.\n     * @returns A promise that resolves with the newly created OIDC\n     *     configuration.\n     */\n    createOAuthIdpConfig(options) {\n        // Construct backend request.\n        let request;\n        try {\n            request = auth_config_1.OIDCConfig.buildServerRequest(options) || {};\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n        const providerId = options.providerId;\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), CREATE_OAUTH_IDP_CONFIG, request, { providerId })\n            .then((response) => {\n            if (!auth_config_1.OIDCConfig.getProviderIdFromResourceName(response.name)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new OIDC provider configuration');\n            }\n            return response;\n        });\n    }\n    /**\n     * Updates an existing OIDC provider configuration with the properties provided.\n     *\n     * @param providerId - The provider identifier of the OIDC configuration to update.\n     * @param options - The properties to update on the existing configuration.\n     * @returns A promise that resolves with the modified provider\n     *     configuration.\n     */\n    updateOAuthIdpConfig(providerId, options) {\n        if (!auth_config_1.OIDCConfig.isProviderId(providerId)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n        }\n        // Construct backend request.\n        let request;\n        try {\n            request = auth_config_1.OIDCConfig.buildServerRequest(options, true) || {};\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n        const updateMask = utils.generateUpdateMask(request);\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), UPDATE_OAUTH_IDP_CONFIG, request, { providerId, updateMask: updateMask.join(',') })\n            .then((response) => {\n            if (!auth_config_1.OIDCConfig.getProviderIdFromResourceName(response.name)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to update OIDC provider configuration');\n            }\n            return response;\n        });\n    }\n    /**\n     * Looks up an SAML provider configuration by provider ID.\n     *\n     * @param providerId - The provider identifier of the configuration to lookup.\n     * @returns A promise that resolves with the provider configuration information.\n     */\n    getInboundSamlConfig(providerId) {\n        if (!auth_config_1.SAMLConfig.isProviderId(providerId)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n        }\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), GET_INBOUND_SAML_CONFIG, {}, { providerId });\n    }\n    /**\n     * Lists the SAML configurations (single batch only) with a size of maxResults and starting from\n     * the offset as specified by pageToken.\n     *\n     * @param maxResults - The page size, 100 if undefined. This is also the maximum\n     *     allowed limit.\n     * @param pageToken - The next page token. If not specified, returns SAML configurations starting\n     *     without any offset. Configurations are returned in the order they were created from oldest to\n     *     newest, relative to the page token offset.\n     * @returns A promise that resolves with the current batch of downloaded\n     *     SAML configurations and the next page token if available. For the last page, an empty list of provider\n     *     configuration and no page token are returned.\n     */\n    listInboundSamlConfigs(maxResults = MAX_LIST_PROVIDER_CONFIGURATION_PAGE_SIZE, pageToken) {\n        const request = {\n            pageSize: maxResults,\n        };\n        // Add next page token if provided.\n        if (typeof pageToken !== 'undefined') {\n            request.pageToken = pageToken;\n        }\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), LIST_INBOUND_SAML_CONFIGS, request)\n            .then((response) => {\n            if (!response.inboundSamlConfigs) {\n                response.inboundSamlConfigs = [];\n                delete response.nextPageToken;\n            }\n            return response;\n        });\n    }\n    /**\n     * Deletes a SAML configuration identified by a providerId.\n     *\n     * @param providerId - The identifier of the SAML configuration to delete.\n     * @returns A promise that resolves when the SAML provider is deleted.\n     */\n    deleteInboundSamlConfig(providerId) {\n        if (!auth_config_1.SAMLConfig.isProviderId(providerId)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n        }\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), DELETE_INBOUND_SAML_CONFIG, {}, { providerId })\n            .then(() => {\n            // Return nothing.\n        });\n    }\n    /**\n     * Creates a new SAML provider configuration with the properties provided.\n     *\n     * @param options - The properties to set on the new SAML provider configuration to be created.\n     * @returns A promise that resolves with the newly created SAML\n     *     configuration.\n     */\n    createInboundSamlConfig(options) {\n        // Construct backend request.\n        let request;\n        try {\n            request = auth_config_1.SAMLConfig.buildServerRequest(options) || {};\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n        const providerId = options.providerId;\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), CREATE_INBOUND_SAML_CONFIG, request, { providerId })\n            .then((response) => {\n            if (!auth_config_1.SAMLConfig.getProviderIdFromResourceName(response.name)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new SAML provider configuration');\n            }\n            return response;\n        });\n    }\n    /**\n     * Updates an existing SAML provider configuration with the properties provided.\n     *\n     * @param providerId - The provider identifier of the SAML configuration to update.\n     * @param options - The properties to update on the existing configuration.\n     * @returns A promise that resolves with the modified provider\n     *     configuration.\n     */\n    updateInboundSamlConfig(providerId, options) {\n        if (!auth_config_1.SAMLConfig.isProviderId(providerId)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PROVIDER_ID));\n        }\n        // Construct backend request.\n        let request;\n        try {\n            request = auth_config_1.SAMLConfig.buildServerRequest(options, true) || {};\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n        const updateMask = utils.generateUpdateMask(request);\n        return this.invokeRequestHandler(this.getProjectConfigUrlBuilder(), UPDATE_INBOUND_SAML_CONFIG, request, { providerId, updateMask: updateMask.join(',') })\n            .then((response) => {\n            if (!auth_config_1.SAMLConfig.getProviderIdFromResourceName(response.name)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to update SAML provider configuration');\n            }\n            return response;\n        });\n    }\n    /**\n     * Invokes the request handler based on the API settings object passed.\n     *\n     * @param urlBuilder - The URL builder for Auth endpoints.\n     * @param apiSettings - The API endpoint settings to apply to request and response.\n     * @param requestData - The request data.\n     * @param additionalResourceParams - Additional resource related params if needed.\n     * @returns A promise that resolves with the response.\n     */\n    invokeRequestHandler(urlBuilder, apiSettings, requestData, additionalResourceParams) {\n        return urlBuilder.getUrl(apiSettings.getEndpoint(), additionalResourceParams)\n            .then((url) => {\n            // Validate request.\n            if (requestData) {\n                const requestValidator = apiSettings.getRequestValidator();\n                requestValidator(requestData);\n            }\n            // Process request.\n            const req = {\n                method: apiSettings.getHttpMethod(),\n                url,\n                headers: FIREBASE_AUTH_HEADER,\n                data: requestData,\n                timeout: FIREBASE_AUTH_TIMEOUT,\n            };\n            return this.httpClient.send(req);\n        })\n            .then((response) => {\n            // Validate response.\n            const responseValidator = apiSettings.getResponseValidator();\n            responseValidator(response.data);\n            // Return entire response.\n            return response.data;\n        })\n            .catch((err) => {\n            if (err instanceof api_request_1.HttpError) {\n                const error = err.response.data;\n                const errorCode = AbstractAuthRequestHandler.getErrorCode(error);\n                if (!errorCode) {\n                    throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'Error returned from server: ' + error + '. Additionally, an ' +\n                        'internal error occurred while attempting to extract the ' +\n                        'errorcode from the error.');\n                }\n                throw error_1.FirebaseAuthError.fromServerError(errorCode, /* message */ undefined, error);\n            }\n            throw err;\n        });\n    }\n    /**\n     * @returns The current Auth user management resource URL builder.\n     */\n    getAuthUrlBuilder() {\n        if (!this.authUrlBuilder) {\n            this.authUrlBuilder = this.newAuthUrlBuilder();\n        }\n        return this.authUrlBuilder;\n    }\n    /**\n     * @returns The current project config resource URL builder.\n     */\n    getProjectConfigUrlBuilder() {\n        if (!this.projectConfigUrlBuilder) {\n            this.projectConfigUrlBuilder = this.newProjectConfigUrlBuilder();\n        }\n        return this.projectConfigUrlBuilder;\n    }\n}\nexports.AbstractAuthRequestHandler = AbstractAuthRequestHandler;\n/** Instantiates the getConfig endpoint settings. */\nconst GET_PROJECT_CONFIG = new api_request_1.ApiSettings('/config', 'GET')\n    .setResponseValidator((response) => {\n    // Response should always contain at least the config name.\n    if (!validator.isNonEmptyString(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to get project config');\n    }\n});\n/** Instantiates the updateConfig endpoint settings. */\nconst UPDATE_PROJECT_CONFIG = new api_request_1.ApiSettings('/config?updateMask={updateMask}', 'PATCH')\n    .setResponseValidator((response) => {\n    // Response should always contain at least the config name.\n    if (!validator.isNonEmptyString(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to update project config');\n    }\n});\n/** Instantiates the getTenant endpoint settings. */\nconst GET_TENANT = new api_request_1.ApiSettings('/tenants/{tenantId}', 'GET')\n    // Set response validator.\n    .setResponseValidator((response) => {\n    // Response should always contain at least the tenant name.\n    if (!validator.isNonEmptyString(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to get tenant');\n    }\n});\n/** Instantiates the deleteTenant endpoint settings. */\nconst DELETE_TENANT = new api_request_1.ApiSettings('/tenants/{tenantId}', 'DELETE');\n/** Instantiates the updateTenant endpoint settings. */\nconst UPDATE_TENANT = new api_request_1.ApiSettings('/tenants/{tenantId}?updateMask={updateMask}', 'PATCH')\n    // Set response validator.\n    .setResponseValidator((response) => {\n    // Response should always contain at least the tenant name.\n    if (!validator.isNonEmptyString(response.name) ||\n        !tenant_1.Tenant.getTenantIdFromResourceName(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to update tenant');\n    }\n});\n/** Instantiates the listTenants endpoint settings. */\nconst LIST_TENANTS = new api_request_1.ApiSettings('/tenants', 'GET')\n    // Set request validator.\n    .setRequestValidator((request) => {\n    // Validate next page token.\n    if (typeof request.pageToken !== 'undefined' &&\n        !validator.isNonEmptyString(request.pageToken)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_PAGE_TOKEN);\n    }\n    // Validate max results.\n    if (!validator.isNumber(request.pageSize) ||\n        request.pageSize <= 0 ||\n        request.pageSize > MAX_LIST_TENANT_PAGE_SIZE) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'Required \"maxResults\" must be a positive non-zero number that does not exceed ' +\n            `the allowed ${MAX_LIST_TENANT_PAGE_SIZE}.`);\n    }\n});\n/** Instantiates the createTenant endpoint settings. */\nconst CREATE_TENANT = new api_request_1.ApiSettings('/tenants', 'POST')\n    // Set response validator.\n    .setResponseValidator((response) => {\n    // Response should always contain at least the tenant name.\n    if (!validator.isNonEmptyString(response.name) ||\n        !tenant_1.Tenant.getTenantIdFromResourceName(response.name)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, 'INTERNAL ASSERT FAILED: Unable to create new tenant');\n    }\n});\n/**\n * Utility for sending requests to Auth server that are Auth instance related. This includes user, tenant,\n * and project config management related APIs. This extends the BaseFirebaseAuthRequestHandler class and defines\n * additional tenant management related APIs.\n */\nclass AuthRequestHandler extends AbstractAuthRequestHandler {\n    /**\n     * The FirebaseAuthRequestHandler constructor used to initialize an instance using a FirebaseApp.\n     *\n     * @param app - The app used to fetch access tokens to sign API requests.\n     * @constructor.\n     */\n    constructor(app) {\n        super(app);\n        this.authResourceUrlBuilder = new AuthResourceUrlBuilder(app, 'v2');\n    }\n    /**\n     * @returns A new Auth user management resource URL builder instance.\n     */\n    newAuthUrlBuilder() {\n        return new AuthResourceUrlBuilder(this.app, 'v1');\n    }\n    /**\n     * @returns A new project config resource URL builder instance.\n     */\n    newProjectConfigUrlBuilder() {\n        return new AuthResourceUrlBuilder(this.app, 'v2');\n    }\n    /**\n     * Get the current project's config\n     * @returns A promise that resolves with the project config information.\n     */\n    getProjectConfig() {\n        return this.invokeRequestHandler(this.authResourceUrlBuilder, GET_PROJECT_CONFIG, {}, {})\n            .then((response) => {\n            return response;\n        });\n    }\n    /**\n     * Update the current project's config.\n     * @returns A promise that resolves with the project config information.\n     */\n    updateProjectConfig(options) {\n        try {\n            const request = project_config_1.ProjectConfig.buildServerRequest(options);\n            const updateMask = utils.generateUpdateMask(request);\n            return this.invokeRequestHandler(this.authResourceUrlBuilder, UPDATE_PROJECT_CONFIG, request, { updateMask: updateMask.join(',') })\n                .then((response) => {\n                return response;\n            });\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n    /**\n     * Looks up a tenant by tenant ID.\n     *\n     * @param tenantId - The tenant identifier of the tenant to lookup.\n     * @returns A promise that resolves with the tenant information.\n     */\n    getTenant(tenantId) {\n        if (!validator.isNonEmptyString(tenantId)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TENANT_ID));\n        }\n        return this.invokeRequestHandler(this.authResourceUrlBuilder, GET_TENANT, {}, { tenantId })\n            .then((response) => {\n            return response;\n        });\n    }\n    /**\n     * Exports the tenants (single batch only) with a size of maxResults and starting from\n     * the offset as specified by pageToken.\n     *\n     * @param maxResults - The page size, 1000 if undefined. This is also the maximum\n     *     allowed limit.\n     * @param pageToken - The next page token. If not specified, returns tenants starting\n     *     without any offset. Tenants are returned in the order they were created from oldest to\n     *     newest, relative to the page token offset.\n     * @returns A promise that resolves with the current batch of downloaded\n     *     tenants and the next page token if available. For the last page, an empty list of tenants\n     *     and no page token are returned.\n     */\n    listTenants(maxResults = MAX_LIST_TENANT_PAGE_SIZE, pageToken) {\n        const request = {\n            pageSize: maxResults,\n            pageToken,\n        };\n        // Remove next page token if not provided.\n        if (typeof request.pageToken === 'undefined') {\n            delete request.pageToken;\n        }\n        return this.invokeRequestHandler(this.authResourceUrlBuilder, LIST_TENANTS, request)\n            .then((response) => {\n            if (!response.tenants) {\n                response.tenants = [];\n                delete response.nextPageToken;\n            }\n            return response;\n        });\n    }\n    /**\n     * Deletes a tenant identified by a tenantId.\n     *\n     * @param tenantId - The identifier of the tenant to delete.\n     * @returns A promise that resolves when the tenant is deleted.\n     */\n    deleteTenant(tenantId) {\n        if (!validator.isNonEmptyString(tenantId)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TENANT_ID));\n        }\n        return this.invokeRequestHandler(this.authResourceUrlBuilder, DELETE_TENANT, undefined, { tenantId })\n            .then(() => {\n            // Return nothing.\n        });\n    }\n    /**\n     * Creates a new tenant with the properties provided.\n     *\n     * @param tenantOptions - The properties to set on the new tenant to be created.\n     * @returns A promise that resolves with the newly created tenant object.\n     */\n    createTenant(tenantOptions) {\n        try {\n            // Construct backend request.\n            const request = tenant_1.Tenant.buildServerRequest(tenantOptions, true);\n            return this.invokeRequestHandler(this.authResourceUrlBuilder, CREATE_TENANT, request)\n                .then((response) => {\n                return response;\n            });\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n    /**\n     * Updates an existing tenant with the properties provided.\n     *\n     * @param tenantId - The tenant identifier of the tenant to update.\n     * @param tenantOptions - The properties to update on the existing tenant.\n     * @returns A promise that resolves with the modified tenant object.\n     */\n    updateTenant(tenantId, tenantOptions) {\n        if (!validator.isNonEmptyString(tenantId)) {\n            return Promise.reject(new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_TENANT_ID));\n        }\n        try {\n            // Construct backend request.\n            const request = tenant_1.Tenant.buildServerRequest(tenantOptions, false);\n            // Do not traverse deep into testPhoneNumbers. The entire content should be replaced\n            // and not just specific phone numbers.\n            const updateMask = utils.generateUpdateMask(request, ['testPhoneNumbers']);\n            return this.invokeRequestHandler(this.authResourceUrlBuilder, UPDATE_TENANT, request, { tenantId, updateMask: updateMask.join(',') })\n                .then((response) => {\n                return response;\n            });\n        }\n        catch (e) {\n            return Promise.reject(e);\n        }\n    }\n}\nexports.AuthRequestHandler = AuthRequestHandler;\n/**\n * Utility for sending requests to Auth server that are tenant Auth instance related. This includes user\n * management related APIs for specified tenants.\n * This extends the BaseFirebaseAuthRequestHandler class.\n */\nclass TenantAwareAuthRequestHandler extends AbstractAuthRequestHandler {\n    /**\n     * The FirebaseTenantRequestHandler constructor used to initialize an instance using a\n     * FirebaseApp and a tenant ID.\n     *\n     * @param app - The app used to fetch access tokens to sign API requests.\n     * @param tenantId - The request handler's tenant ID.\n     * @constructor\n     */\n    constructor(app, tenantId) {\n        super(app);\n        this.tenantId = tenantId;\n    }\n    /**\n     * @returns A new Auth user management resource URL builder instance.\n     */\n    newAuthUrlBuilder() {\n        return new TenantAwareAuthResourceUrlBuilder(this.app, 'v1', this.tenantId);\n    }\n    /**\n     * @returns A new project config resource URL builder instance.\n     */\n    newProjectConfigUrlBuilder() {\n        return new TenantAwareAuthResourceUrlBuilder(this.app, 'v2', this.tenantId);\n    }\n    /**\n     * Imports the list of users provided to Firebase Auth. This is useful when\n     * migrating from an external authentication system without having to use the Firebase CLI SDK.\n     * At most, 1000 users are allowed to be imported one at a time.\n     * When importing a list of password users, UserImportOptions are required to be specified.\n     *\n     * Overrides the superclass methods by adding an additional check to match tenant IDs of\n     * imported user records if present.\n     *\n     * @param users - The list of user records to import to Firebase Auth.\n     * @param options - The user import options, required when the users provided\n     *     include password credentials.\n     * @returns A promise that resolves when the operation completes\n     *     with the result of the import. This includes the number of successful imports, the number\n     *     of failed uploads and their corresponding errors.\n     */\n    uploadAccount(users, options) {\n        // Add additional check to match tenant ID of imported user records.\n        users.forEach((user, index) => {\n            if (validator.isNonEmptyString(user.tenantId) &&\n                user.tenantId !== this.tenantId) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.MISMATCHING_TENANT_ID, `UserRecord of index \"${index}\" has mismatching tenant ID \"${user.tenantId}\"`);\n            }\n        });\n        return super.uploadAccount(users, options);\n    }\n}\nexports.TenantAwareAuthRequestHandler = TenantAwareAuthRequestHandler;\nfunction emulatorHost() {\n    return process.env.FIREBASE_AUTH_EMULATOR_HOST;\n}\n/**\n * When true the SDK should communicate with the Auth Emulator for all API\n * calls and also produce unsigned tokens.\n */\nfunction useEmulator() {\n    return !!emulatorHost();\n}\nexports.useEmulator = useEmulator;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}