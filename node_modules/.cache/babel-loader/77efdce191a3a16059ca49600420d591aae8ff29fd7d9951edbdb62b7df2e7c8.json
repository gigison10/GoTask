{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setLibVersion = exports.setLogFunction = exports.logger = void 0;\nconst util = require(\"util\");\nconst validate_1 = require(\"./validate\");\n/*! The Firestore library version */\nlet libVersion;\n/*! The external function used to emit logs. */\nlet logFunction = null;\n/**\n * Log function to use for debug output. By default, we don't perform any\n * logging.\n *\n * @private\n * @internal\n */\nfunction logger(methodName, requestTag, logMessage) {\n  requestTag = requestTag || '#####';\n  if (logFunction) {\n    for (var _len = arguments.length, additionalArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n      additionalArgs[_key - 3] = arguments[_key];\n    }\n    const formattedMessage = util.format(logMessage, ...additionalArgs);\n    const time = new Date().toISOString();\n    logFunction(`Firestore (${libVersion}) ${time} ${requestTag} [${methodName}]: ` + formattedMessage);\n  }\n}\nexports.logger = logger;\n/**\n * Sets or disables the log function for all active Firestore instances.\n *\n * @param logger A log function that takes a message (such as `console.log`) or\n * `null` to turn off logging.\n */\nfunction setLogFunction(logger) {\n  if (logger !== null) (0, validate_1.validateFunction)('logger', logger);\n  logFunction = logger;\n}\nexports.setLogFunction = setLogFunction;\n/**\n * Sets the library version to be used in log messages.\n *\n * @private\n * @internal\n */\nfunction setLibVersion(version) {\n  libVersion = version;\n}\nexports.setLibVersion = setLibVersion;","map":{"version":3,"names":["Object","defineProperty","exports","value","setLibVersion","setLogFunction","logger","util","require","validate_1","libVersion","logFunction","methodName","requestTag","logMessage","_len","arguments","length","additionalArgs","Array","_key","formattedMessage","format","time","Date","toISOString","validateFunction","version"],"sources":["D:/Coding/React/taskmybusiness/node_modules/@google-cloud/firestore/build/src/logger.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2018 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.setLibVersion = exports.setLogFunction = exports.logger = void 0;\nconst util = require(\"util\");\nconst validate_1 = require(\"./validate\");\n/*! The Firestore library version */\nlet libVersion;\n/*! The external function used to emit logs. */\nlet logFunction = null;\n/**\n * Log function to use for debug output. By default, we don't perform any\n * logging.\n *\n * @private\n * @internal\n */\nfunction logger(methodName, requestTag, logMessage, ...additionalArgs) {\n    requestTag = requestTag || '#####';\n    if (logFunction) {\n        const formattedMessage = util.format(logMessage, ...additionalArgs);\n        const time = new Date().toISOString();\n        logFunction(`Firestore (${libVersion}) ${time} ${requestTag} [${methodName}]: ` +\n            formattedMessage);\n    }\n}\nexports.logger = logger;\n/**\n * Sets or disables the log function for all active Firestore instances.\n *\n * @param logger A log function that takes a message (such as `console.log`) or\n * `null` to turn off logging.\n */\nfunction setLogFunction(logger) {\n    if (logger !== null)\n        (0, validate_1.validateFunction)('logger', logger);\n    logFunction = logger;\n}\nexports.setLogFunction = setLogFunction;\n/**\n * Sets the library version to be used in log messages.\n *\n * @private\n * @internal\n */\nfunction setLibVersion(version) {\n    libVersion = version;\n}\nexports.setLibVersion = setLibVersion;\n//# sourceMappingURL=logger.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,aAAa,GAAGF,OAAO,CAACG,cAAc,GAAGH,OAAO,CAACI,MAAM,GAAG,KAAK,CAAC;AACxE,MAAMC,IAAI,GAAGC,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAMC,UAAU,GAAGD,OAAO,CAAC,YAAY,CAAC;AACxC;AACA,IAAIE,UAAU;AACd;AACA,IAAIC,WAAW,GAAG,IAAI;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASL,MAAMA,CAACM,UAAU,EAAEC,UAAU,EAAEC,UAAU,EAAqB;EACnED,UAAU,GAAGA,UAAU,IAAI,OAAO;EAClC,IAAIF,WAAW,EAAE;IAAA,SAAAI,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAFkCC,cAAc,OAAAC,KAAA,CAAAJ,IAAA,OAAAA,IAAA,WAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;MAAdF,cAAc,CAAAE,IAAA,QAAAJ,SAAA,CAAAI,IAAA;IAAA;IAG7D,MAAMC,gBAAgB,GAAGd,IAAI,CAACe,MAAM,CAACR,UAAU,EAAE,GAAGI,cAAc,CAAC;IACnE,MAAMK,IAAI,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IACrCd,WAAW,CAAE,cAAaD,UAAW,KAAIa,IAAK,IAAGV,UAAW,KAAID,UAAW,KAAI,GAC3ES,gBAAgB,CAAC;EACzB;AACJ;AACAnB,OAAO,CAACI,MAAM,GAAGA,MAAM;AACvB;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,cAAcA,CAACC,MAAM,EAAE;EAC5B,IAAIA,MAAM,KAAK,IAAI,EACf,CAAC,CAAC,EAAEG,UAAU,CAACiB,gBAAgB,EAAE,QAAQ,EAAEpB,MAAM,CAAC;EACtDK,WAAW,GAAGL,MAAM;AACxB;AACAJ,OAAO,CAACG,cAAc,GAAGA,cAAc;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,aAAaA,CAACuB,OAAO,EAAE;EAC5BjB,UAAU,GAAGiB,OAAO;AACxB;AACAzB,OAAO,CAACE,aAAa,GAAGA,aAAa"},"metadata":{},"sourceType":"script","externalDependencies":[]}