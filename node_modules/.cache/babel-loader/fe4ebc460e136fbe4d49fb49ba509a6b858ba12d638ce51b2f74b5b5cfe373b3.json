{"ast":null,"code":"/*! firebase-admin v11.9.0 */\n\"use strict\";\n\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProjectManagement = void 0;\nconst error_1 = require(\"../utils/error\");\nconst utils = require(\"../utils/index\");\nconst validator = require(\"../utils/validator\");\nconst android_app_1 = require(\"./android-app\");\nconst ios_app_1 = require(\"./ios-app\");\nconst project_management_api_request_internal_1 = require(\"./project-management-api-request-internal\");\nconst app_metadata_1 = require(\"./app-metadata\");\n/**\n * The Firebase ProjectManagement service interface.\n */\nclass ProjectManagement {\n  /**\n   * @param app - The app for this ProjectManagement service.\n   * @constructor\n   * @internal\n   */\n  constructor(app) {\n    this.app = app;\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new error_1.FirebaseProjectManagementError('invalid-argument', 'First argument passed to admin.projectManagement() must be a valid Firebase app ' + 'instance.');\n    }\n    this.requestHandler = new project_management_api_request_internal_1.ProjectManagementRequestHandler(app);\n  }\n  /**\n   * Lists up to 100 Firebase Android apps associated with this Firebase project.\n   *\n   * @returns The list of Android apps.\n   */\n  listAndroidApps() {\n    return this.listPlatformApps('android', 'listAndroidApps()');\n  }\n  /**\n   * Lists up to 100 Firebase iOS apps associated with this Firebase project.\n   *\n   * @returns The list of iOS apps.\n   */\n  listIosApps() {\n    return this.listPlatformApps('ios', 'listIosApps()');\n  }\n  /**\n   * Creates an `AndroidApp` object, referencing the specified Android app within\n   * this Firebase project.\n   *\n   * This method does not perform an RPC.\n   *\n   * @param appId - The `appId` of the Android app to reference.\n   *\n   * @returns An `AndroidApp` object that references the specified Firebase Android app.\n   */\n  androidApp(appId) {\n    return new android_app_1.AndroidApp(appId, this.requestHandler);\n  }\n  /**\n   * Creates an `iOSApp` object, referencing the specified iOS app within\n   * this Firebase project.\n   *\n   * This method does not perform an RPC.\n   *\n   * @param appId - The `appId` of the iOS app to reference.\n   *\n   * @returns An `iOSApp` object that references the specified Firebase iOS app.\n   */\n  iosApp(appId) {\n    return new ios_app_1.IosApp(appId, this.requestHandler);\n  }\n  /**\n   * Creates a `ShaCertificate` object.\n   *\n   * This method does not perform an RPC.\n   *\n   * @param shaHash - The SHA-1 or SHA-256 hash for this certificate.\n   *\n   * @returns A `ShaCertificate` object contains the specified SHA hash.\n   */\n  shaCertificate(shaHash) {\n    return new android_app_1.ShaCertificate(shaHash);\n  }\n  /**\n   * Creates a new Firebase Android app associated with this Firebase project.\n   *\n   * @param packageName - The canonical package name of the Android App,\n   *     as would appear in the Google Play Developer Console.\n   * @param displayName - An optional user-assigned display name for this\n   *     new app.\n   *\n   * @returns A promise that resolves to the newly created Android app.\n   */\n  createAndroidApp(packageName, displayName) {\n    return this.getResourceName().then(resourceName => {\n      return this.requestHandler.createAndroidApp(resourceName, packageName, displayName);\n    }).then(responseData => {\n      (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonNullObject(responseData), responseData, 'createAndroidApp()\\'s responseData must be a non-null object.');\n      (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonEmptyString(responseData.appId), responseData, '\"responseData.appId\" field must be present in createAndroidApp()\\'s response data.');\n      return new android_app_1.AndroidApp(responseData.appId, this.requestHandler);\n    });\n  }\n  /**\n   * Creates a new Firebase iOS app associated with this Firebase project.\n   *\n   * @param bundleId - The iOS app bundle ID to use for this new app.\n   * @param displayName - An optional user-assigned display name for this\n   *     new app.\n   *\n   * @returns A promise that resolves to the newly created iOS app.\n   */\n  createIosApp(bundleId, displayName) {\n    return this.getResourceName().then(resourceName => {\n      return this.requestHandler.createIosApp(resourceName, bundleId, displayName);\n    }).then(responseData => {\n      (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonNullObject(responseData), responseData, 'createIosApp()\\'s responseData must be a non-null object.');\n      (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonEmptyString(responseData.appId), responseData, '\"responseData.appId\" field must be present in createIosApp()\\'s response data.');\n      return new ios_app_1.IosApp(responseData.appId, this.requestHandler);\n    });\n  }\n  /**\n   * Lists up to 100 Firebase apps associated with this Firebase project.\n   *\n   * @returns A promise that resolves to the metadata list of the apps.\n   */\n  listAppMetadata() {\n    return this.getResourceName().then(resourceName => {\n      return this.requestHandler.listAppMetadata(resourceName);\n    }).then(responseData => {\n      return this.getProjectId().then(projectId => {\n        return this.transformResponseToAppMetadata(responseData, projectId);\n      });\n    });\n  }\n  /**\n   * Update the display name of this Firebase project.\n   *\n   * @param newDisplayName - The new display name to be updated.\n   *\n   * @returns A promise that resolves when the project display name has been updated.\n   */\n  setDisplayName(newDisplayName) {\n    return this.getResourceName().then(resourceName => {\n      return this.requestHandler.setDisplayName(resourceName, newDisplayName);\n    });\n  }\n  transformResponseToAppMetadata(responseData, projectId) {\n    this.assertListAppsResponseData(responseData, 'listAppMetadata()');\n    if (!responseData.apps) {\n      return [];\n    }\n    return responseData.apps.map(appJson => {\n      (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonEmptyString(appJson.appId), responseData, '\"apps[].appId\" field must be present in the listAppMetadata() response data.');\n      (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonEmptyString(appJson.platform), responseData, '\"apps[].platform\" field must be present in the listAppMetadata() response data.');\n      const metadata = {\n        appId: appJson.appId,\n        platform: app_metadata_1.AppPlatform[appJson.platform] || app_metadata_1.AppPlatform.PLATFORM_UNKNOWN,\n        projectId,\n        resourceName: appJson.name\n      };\n      if (appJson.displayName) {\n        metadata.displayName = appJson.displayName;\n      }\n      return metadata;\n    });\n  }\n  getResourceName() {\n    return this.getProjectId().then(projectId => {\n      return `projects/${projectId}`;\n    });\n  }\n  getProjectId() {\n    if (this.projectId) {\n      return Promise.resolve(this.projectId);\n    }\n    return utils.findProjectId(this.app).then(projectId => {\n      // Assert that a specific project ID was provided within the app.\n      if (!validator.isNonEmptyString(projectId)) {\n        throw new error_1.FirebaseProjectManagementError('invalid-project-id', 'Failed to determine project ID. Initialize the SDK with service account credentials, or ' + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT ' + 'environment variable.');\n      }\n      this.projectId = projectId;\n      return this.projectId;\n    });\n  }\n  /**\n   * Lists up to 100 Firebase apps for a specified platform, associated with this Firebase project.\n   */\n  listPlatformApps(platform, callerName) {\n    return this.getResourceName().then(resourceName => {\n      return platform === 'android' ? this.requestHandler.listAndroidApps(resourceName) : this.requestHandler.listIosApps(resourceName);\n    }).then(responseData => {\n      this.assertListAppsResponseData(responseData, callerName);\n      if (!responseData.apps) {\n        return [];\n      }\n      return responseData.apps.map(appJson => {\n        (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonEmptyString(appJson.appId), responseData, `\"apps[].appId\" field must be present in the ${callerName} response data.`);\n        if (platform === 'android') {\n          return new android_app_1.AndroidApp(appJson.appId, this.requestHandler);\n        } else {\n          return new ios_app_1.IosApp(appJson.appId, this.requestHandler);\n        }\n      });\n    });\n  }\n  assertListAppsResponseData(responseData, callerName) {\n    (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonNullObject(responseData), responseData, `${callerName}'s responseData must be a non-null object.`);\n    if (responseData.apps) {\n      (0, project_management_api_request_internal_1.assertServerResponse)(validator.isArray(responseData.apps), responseData, `\"apps\" field must be present in the ${callerName} response data.`);\n    }\n  }\n}\nexports.ProjectManagement = ProjectManagement;","map":{"version":3,"names":["Object","defineProperty","exports","value","ProjectManagement","error_1","require","utils","validator","android_app_1","ios_app_1","project_management_api_request_internal_1","app_metadata_1","constructor","app","isNonNullObject","FirebaseProjectManagementError","requestHandler","ProjectManagementRequestHandler","listAndroidApps","listPlatformApps","listIosApps","androidApp","appId","AndroidApp","iosApp","IosApp","shaCertificate","shaHash","ShaCertificate","createAndroidApp","packageName","displayName","getResourceName","then","resourceName","responseData","assertServerResponse","isNonEmptyString","createIosApp","bundleId","listAppMetadata","getProjectId","projectId","transformResponseToAppMetadata","setDisplayName","newDisplayName","assertListAppsResponseData","apps","map","appJson","platform","metadata","AppPlatform","PLATFORM_UNKNOWN","name","Promise","resolve","findProjectId","callerName","isArray"],"sources":["D:/Coding/React/taskmybusiness/node_modules/firebase-admin/lib/project-management/project-management.js"],"sourcesContent":["/*! firebase-admin v11.9.0 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProjectManagement = void 0;\nconst error_1 = require(\"../utils/error\");\nconst utils = require(\"../utils/index\");\nconst validator = require(\"../utils/validator\");\nconst android_app_1 = require(\"./android-app\");\nconst ios_app_1 = require(\"./ios-app\");\nconst project_management_api_request_internal_1 = require(\"./project-management-api-request-internal\");\nconst app_metadata_1 = require(\"./app-metadata\");\n/**\n * The Firebase ProjectManagement service interface.\n */\nclass ProjectManagement {\n    /**\n     * @param app - The app for this ProjectManagement service.\n     * @constructor\n     * @internal\n     */\n    constructor(app) {\n        this.app = app;\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new error_1.FirebaseProjectManagementError('invalid-argument', 'First argument passed to admin.projectManagement() must be a valid Firebase app '\n                + 'instance.');\n        }\n        this.requestHandler = new project_management_api_request_internal_1.ProjectManagementRequestHandler(app);\n    }\n    /**\n     * Lists up to 100 Firebase Android apps associated with this Firebase project.\n     *\n     * @returns The list of Android apps.\n     */\n    listAndroidApps() {\n        return this.listPlatformApps('android', 'listAndroidApps()');\n    }\n    /**\n     * Lists up to 100 Firebase iOS apps associated with this Firebase project.\n     *\n     * @returns The list of iOS apps.\n     */\n    listIosApps() {\n        return this.listPlatformApps('ios', 'listIosApps()');\n    }\n    /**\n     * Creates an `AndroidApp` object, referencing the specified Android app within\n     * this Firebase project.\n     *\n     * This method does not perform an RPC.\n     *\n     * @param appId - The `appId` of the Android app to reference.\n     *\n     * @returns An `AndroidApp` object that references the specified Firebase Android app.\n     */\n    androidApp(appId) {\n        return new android_app_1.AndroidApp(appId, this.requestHandler);\n    }\n    /**\n     * Creates an `iOSApp` object, referencing the specified iOS app within\n     * this Firebase project.\n     *\n     * This method does not perform an RPC.\n     *\n     * @param appId - The `appId` of the iOS app to reference.\n     *\n     * @returns An `iOSApp` object that references the specified Firebase iOS app.\n     */\n    iosApp(appId) {\n        return new ios_app_1.IosApp(appId, this.requestHandler);\n    }\n    /**\n     * Creates a `ShaCertificate` object.\n     *\n     * This method does not perform an RPC.\n     *\n     * @param shaHash - The SHA-1 or SHA-256 hash for this certificate.\n     *\n     * @returns A `ShaCertificate` object contains the specified SHA hash.\n     */\n    shaCertificate(shaHash) {\n        return new android_app_1.ShaCertificate(shaHash);\n    }\n    /**\n     * Creates a new Firebase Android app associated with this Firebase project.\n     *\n     * @param packageName - The canonical package name of the Android App,\n     *     as would appear in the Google Play Developer Console.\n     * @param displayName - An optional user-assigned display name for this\n     *     new app.\n     *\n     * @returns A promise that resolves to the newly created Android app.\n     */\n    createAndroidApp(packageName, displayName) {\n        return this.getResourceName()\n            .then((resourceName) => {\n            return this.requestHandler.createAndroidApp(resourceName, packageName, displayName);\n        })\n            .then((responseData) => {\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonNullObject(responseData), responseData, 'createAndroidApp()\\'s responseData must be a non-null object.');\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonEmptyString(responseData.appId), responseData, '\"responseData.appId\" field must be present in createAndroidApp()\\'s response data.');\n            return new android_app_1.AndroidApp(responseData.appId, this.requestHandler);\n        });\n    }\n    /**\n     * Creates a new Firebase iOS app associated with this Firebase project.\n     *\n     * @param bundleId - The iOS app bundle ID to use for this new app.\n     * @param displayName - An optional user-assigned display name for this\n     *     new app.\n     *\n     * @returns A promise that resolves to the newly created iOS app.\n     */\n    createIosApp(bundleId, displayName) {\n        return this.getResourceName()\n            .then((resourceName) => {\n            return this.requestHandler.createIosApp(resourceName, bundleId, displayName);\n        })\n            .then((responseData) => {\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonNullObject(responseData), responseData, 'createIosApp()\\'s responseData must be a non-null object.');\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonEmptyString(responseData.appId), responseData, '\"responseData.appId\" field must be present in createIosApp()\\'s response data.');\n            return new ios_app_1.IosApp(responseData.appId, this.requestHandler);\n        });\n    }\n    /**\n     * Lists up to 100 Firebase apps associated with this Firebase project.\n     *\n     * @returns A promise that resolves to the metadata list of the apps.\n     */\n    listAppMetadata() {\n        return this.getResourceName()\n            .then((resourceName) => {\n            return this.requestHandler.listAppMetadata(resourceName);\n        })\n            .then((responseData) => {\n            return this.getProjectId()\n                .then((projectId) => {\n                return this.transformResponseToAppMetadata(responseData, projectId);\n            });\n        });\n    }\n    /**\n     * Update the display name of this Firebase project.\n     *\n     * @param newDisplayName - The new display name to be updated.\n     *\n     * @returns A promise that resolves when the project display name has been updated.\n     */\n    setDisplayName(newDisplayName) {\n        return this.getResourceName()\n            .then((resourceName) => {\n            return this.requestHandler.setDisplayName(resourceName, newDisplayName);\n        });\n    }\n    transformResponseToAppMetadata(responseData, projectId) {\n        this.assertListAppsResponseData(responseData, 'listAppMetadata()');\n        if (!responseData.apps) {\n            return [];\n        }\n        return responseData.apps.map((appJson) => {\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonEmptyString(appJson.appId), responseData, '\"apps[].appId\" field must be present in the listAppMetadata() response data.');\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonEmptyString(appJson.platform), responseData, '\"apps[].platform\" field must be present in the listAppMetadata() response data.');\n            const metadata = {\n                appId: appJson.appId,\n                platform: app_metadata_1.AppPlatform[appJson.platform] || app_metadata_1.AppPlatform.PLATFORM_UNKNOWN,\n                projectId,\n                resourceName: appJson.name,\n            };\n            if (appJson.displayName) {\n                metadata.displayName = appJson.displayName;\n            }\n            return metadata;\n        });\n    }\n    getResourceName() {\n        return this.getProjectId()\n            .then((projectId) => {\n            return `projects/${projectId}`;\n        });\n    }\n    getProjectId() {\n        if (this.projectId) {\n            return Promise.resolve(this.projectId);\n        }\n        return utils.findProjectId(this.app)\n            .then((projectId) => {\n            // Assert that a specific project ID was provided within the app.\n            if (!validator.isNonEmptyString(projectId)) {\n                throw new error_1.FirebaseProjectManagementError('invalid-project-id', 'Failed to determine project ID. Initialize the SDK with service account credentials, or '\n                    + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT '\n                    + 'environment variable.');\n            }\n            this.projectId = projectId;\n            return this.projectId;\n        });\n    }\n    /**\n     * Lists up to 100 Firebase apps for a specified platform, associated with this Firebase project.\n     */\n    listPlatformApps(platform, callerName) {\n        return this.getResourceName()\n            .then((resourceName) => {\n            return (platform === 'android') ?\n                this.requestHandler.listAndroidApps(resourceName)\n                : this.requestHandler.listIosApps(resourceName);\n        })\n            .then((responseData) => {\n            this.assertListAppsResponseData(responseData, callerName);\n            if (!responseData.apps) {\n                return [];\n            }\n            return responseData.apps.map((appJson) => {\n                (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonEmptyString(appJson.appId), responseData, `\"apps[].appId\" field must be present in the ${callerName} response data.`);\n                if (platform === 'android') {\n                    return new android_app_1.AndroidApp(appJson.appId, this.requestHandler);\n                }\n                else {\n                    return new ios_app_1.IosApp(appJson.appId, this.requestHandler);\n                }\n            });\n        });\n    }\n    assertListAppsResponseData(responseData, callerName) {\n        (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonNullObject(responseData), responseData, `${callerName}'s responseData must be a non-null object.`);\n        if (responseData.apps) {\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isArray(responseData.apps), responseData, `\"apps\" field must be present in the ${callerName} response data.`);\n        }\n    }\n}\nexports.ProjectManagement = ProjectManagement;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}