{"ast":null,"code":"/*! firebase-admin v11.9.0 */\n\"use strict\";\n\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.BatchRequestClient = void 0;\nconst api_request_1 = require(\"../utils/api-request\");\nconst error_1 = require(\"../utils/error\");\nconst PART_BOUNDARY = '__END_OF_PART__';\nconst TEN_SECONDS_IN_MILLIS = 15000;\n/**\n * An HTTP client that can be used to make batch requests. This client is not tied to any service\n * (FCM or otherwise). Therefore it can be used to make batch requests to any service that allows\n * it. If this requirement ever arises we can move this implementation to the utils module\n * where it can be easily shared among other modules.\n */\nclass BatchRequestClient {\n  /**\n   * @param {HttpClient} httpClient The client that will be used to make HTTP calls.\n   * @param {string} batchUrl The URL that accepts batch requests.\n   * @param {object=} commonHeaders Optional headers that will be included in all requests.\n   *\n   * @constructor\n   */\n  constructor(httpClient, batchUrl, commonHeaders) {\n    this.httpClient = httpClient;\n    this.batchUrl = batchUrl;\n    this.commonHeaders = commonHeaders;\n  }\n  /**\n   * Sends the given array of sub requests as a single batch, and parses the results into an array\n   * of HttpResponse objects.\n   *\n   * @param requests - An array of sub requests to send.\n   * @returns A promise that resolves when the send operation is complete.\n   */\n  send(requests) {\n    requests = requests.map(req => {\n      req.headers = Object.assign({}, this.commonHeaders, req.headers);\n      return req;\n    });\n    const requestHeaders = {\n      'Content-Type': `multipart/mixed; boundary=${PART_BOUNDARY}`\n    };\n    const request = {\n      method: 'POST',\n      url: this.batchUrl,\n      data: this.getMultipartPayload(requests),\n      headers: Object.assign({}, this.commonHeaders, requestHeaders),\n      timeout: TEN_SECONDS_IN_MILLIS\n    };\n    return this.httpClient.send(request).then(response => {\n      if (!response.multipart) {\n        throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'Expected a multipart response.');\n      }\n      return response.multipart.map(buff => {\n        return (0, api_request_1.parseHttpResponse)(buff, request);\n      });\n    });\n  }\n  getMultipartPayload(requests) {\n    let buffer = '';\n    requests.forEach((request, idx) => {\n      buffer += createPart(request, PART_BOUNDARY, idx);\n    });\n    buffer += `--${PART_BOUNDARY}--\\r\\n`;\n    return Buffer.from(buffer, 'utf-8');\n  }\n}\nexports.BatchRequestClient = BatchRequestClient;\n/**\n * Creates a single part in a multipart HTTP request body. The part consists of several headers\n * followed by the serialized sub request as the body. As per the requirements of the FCM batch\n * API, sets the content-type header to application/http, and the content-transfer-encoding to\n * binary.\n *\n * @param request - A sub request that will be used to populate the part.\n * @param boundary - Multipart boundary string.\n * @param idx - An index number that is used to set the content-id header.\n * @returns The part as a string that can be included in the HTTP body.\n */\nfunction createPart(request, boundary, idx) {\n  const serializedRequest = serializeSubRequest(request);\n  let part = `--${boundary}\\r\\n`;\n  part += `Content-Length: ${serializedRequest.length}\\r\\n`;\n  part += 'Content-Type: application/http\\r\\n';\n  part += `content-id: ${idx + 1}\\r\\n`;\n  part += 'content-transfer-encoding: binary\\r\\n';\n  part += '\\r\\n';\n  part += `${serializedRequest}\\r\\n`;\n  return part;\n}\n/**\n * Serializes a sub request into a string that can be embedded in a multipart HTTP request. The\n * format of the string is the wire format of a typical HTTP request, consisting of a header and a\n * body.\n *\n * @param request - The sub request to be serialized.\n * @returns String representation of the SubRequest.\n */\nfunction serializeSubRequest(request) {\n  const requestBody = JSON.stringify(request.body);\n  let messagePayload = `POST ${request.url} HTTP/1.1\\r\\n`;\n  messagePayload += `Content-Length: ${requestBody.length}\\r\\n`;\n  messagePayload += 'Content-Type: application/json; charset=UTF-8\\r\\n';\n  if (request.headers) {\n    Object.keys(request.headers).forEach(key => {\n      messagePayload += `${key}: ${request.headers[key]}\\r\\n`;\n    });\n  }\n  messagePayload += '\\r\\n';\n  messagePayload += requestBody;\n  return messagePayload;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","BatchRequestClient","api_request_1","require","error_1","PART_BOUNDARY","TEN_SECONDS_IN_MILLIS","constructor","httpClient","batchUrl","commonHeaders","send","requests","map","req","headers","assign","requestHeaders","request","method","url","data","getMultipartPayload","timeout","then","response","multipart","FirebaseAppError","AppErrorCodes","INTERNAL_ERROR","buff","parseHttpResponse","buffer","forEach","idx","createPart","Buffer","from","boundary","serializedRequest","serializeSubRequest","part","length","requestBody","JSON","stringify","body","messagePayload","keys","key"],"sources":["D:/Coding/React/taskmybusiness/node_modules/firebase-admin/lib/messaging/batch-request-internal.js"],"sourcesContent":["/*! firebase-admin v11.9.0 */\n\"use strict\";\n/*!\n * Copyright 2019 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.BatchRequestClient = void 0;\nconst api_request_1 = require(\"../utils/api-request\");\nconst error_1 = require(\"../utils/error\");\nconst PART_BOUNDARY = '__END_OF_PART__';\nconst TEN_SECONDS_IN_MILLIS = 15000;\n/**\n * An HTTP client that can be used to make batch requests. This client is not tied to any service\n * (FCM or otherwise). Therefore it can be used to make batch requests to any service that allows\n * it. If this requirement ever arises we can move this implementation to the utils module\n * where it can be easily shared among other modules.\n */\nclass BatchRequestClient {\n    /**\n     * @param {HttpClient} httpClient The client that will be used to make HTTP calls.\n     * @param {string} batchUrl The URL that accepts batch requests.\n     * @param {object=} commonHeaders Optional headers that will be included in all requests.\n     *\n     * @constructor\n     */\n    constructor(httpClient, batchUrl, commonHeaders) {\n        this.httpClient = httpClient;\n        this.batchUrl = batchUrl;\n        this.commonHeaders = commonHeaders;\n    }\n    /**\n     * Sends the given array of sub requests as a single batch, and parses the results into an array\n     * of HttpResponse objects.\n     *\n     * @param requests - An array of sub requests to send.\n     * @returns A promise that resolves when the send operation is complete.\n     */\n    send(requests) {\n        requests = requests.map((req) => {\n            req.headers = Object.assign({}, this.commonHeaders, req.headers);\n            return req;\n        });\n        const requestHeaders = {\n            'Content-Type': `multipart/mixed; boundary=${PART_BOUNDARY}`,\n        };\n        const request = {\n            method: 'POST',\n            url: this.batchUrl,\n            data: this.getMultipartPayload(requests),\n            headers: Object.assign({}, this.commonHeaders, requestHeaders),\n            timeout: TEN_SECONDS_IN_MILLIS,\n        };\n        return this.httpClient.send(request).then((response) => {\n            if (!response.multipart) {\n                throw new error_1.FirebaseAppError(error_1.AppErrorCodes.INTERNAL_ERROR, 'Expected a multipart response.');\n            }\n            return response.multipart.map((buff) => {\n                return (0, api_request_1.parseHttpResponse)(buff, request);\n            });\n        });\n    }\n    getMultipartPayload(requests) {\n        let buffer = '';\n        requests.forEach((request, idx) => {\n            buffer += createPart(request, PART_BOUNDARY, idx);\n        });\n        buffer += `--${PART_BOUNDARY}--\\r\\n`;\n        return Buffer.from(buffer, 'utf-8');\n    }\n}\nexports.BatchRequestClient = BatchRequestClient;\n/**\n * Creates a single part in a multipart HTTP request body. The part consists of several headers\n * followed by the serialized sub request as the body. As per the requirements of the FCM batch\n * API, sets the content-type header to application/http, and the content-transfer-encoding to\n * binary.\n *\n * @param request - A sub request that will be used to populate the part.\n * @param boundary - Multipart boundary string.\n * @param idx - An index number that is used to set the content-id header.\n * @returns The part as a string that can be included in the HTTP body.\n */\nfunction createPart(request, boundary, idx) {\n    const serializedRequest = serializeSubRequest(request);\n    let part = `--${boundary}\\r\\n`;\n    part += `Content-Length: ${serializedRequest.length}\\r\\n`;\n    part += 'Content-Type: application/http\\r\\n';\n    part += `content-id: ${idx + 1}\\r\\n`;\n    part += 'content-transfer-encoding: binary\\r\\n';\n    part += '\\r\\n';\n    part += `${serializedRequest}\\r\\n`;\n    return part;\n}\n/**\n * Serializes a sub request into a string that can be embedded in a multipart HTTP request. The\n * format of the string is the wire format of a typical HTTP request, consisting of a header and a\n * body.\n *\n * @param request - The sub request to be serialized.\n * @returns String representation of the SubRequest.\n */\nfunction serializeSubRequest(request) {\n    const requestBody = JSON.stringify(request.body);\n    let messagePayload = `POST ${request.url} HTTP/1.1\\r\\n`;\n    messagePayload += `Content-Length: ${requestBody.length}\\r\\n`;\n    messagePayload += 'Content-Type: application/json; charset=UTF-8\\r\\n';\n    if (request.headers) {\n        Object.keys(request.headers).forEach((key) => {\n            messagePayload += `${key}: ${request.headers[key]}\\r\\n`;\n        });\n    }\n    messagePayload += '\\r\\n';\n    messagePayload += requestBody;\n    return messagePayload;\n}\n"],"mappings":"AAAA;AACA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,kBAAkB,GAAG,KAAK,CAAC;AACnC,MAAMC,aAAa,GAAGC,OAAO,CAAC,sBAAsB,CAAC;AACrD,MAAMC,OAAO,GAAGD,OAAO,CAAC,gBAAgB,CAAC;AACzC,MAAME,aAAa,GAAG,iBAAiB;AACvC,MAAMC,qBAAqB,GAAG,KAAK;AACnC;AACA;AACA;AACA;AACA;AACA;AACA,MAAML,kBAAkB,CAAC;EACrB;AACJ;AACA;AACA;AACA;AACA;AACA;EACIM,WAAWA,CAACC,UAAU,EAAEC,QAAQ,EAAEC,aAAa,EAAE;IAC7C,IAAI,CAACF,UAAU,GAAGA,UAAU;IAC5B,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,aAAa,GAAGA,aAAa;EACtC;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;EACIC,IAAIA,CAACC,QAAQ,EAAE;IACXA,QAAQ,GAAGA,QAAQ,CAACC,GAAG,CAAEC,GAAG,IAAK;MAC7BA,GAAG,CAACC,OAAO,GAAGlB,MAAM,CAACmB,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAACN,aAAa,EAAEI,GAAG,CAACC,OAAO,CAAC;MAChE,OAAOD,GAAG;IACd,CAAC,CAAC;IACF,MAAMG,cAAc,GAAG;MACnB,cAAc,EAAG,6BAA4BZ,aAAc;IAC/D,CAAC;IACD,MAAMa,OAAO,GAAG;MACZC,MAAM,EAAE,MAAM;MACdC,GAAG,EAAE,IAAI,CAACX,QAAQ;MAClBY,IAAI,EAAE,IAAI,CAACC,mBAAmB,CAACV,QAAQ,CAAC;MACxCG,OAAO,EAAElB,MAAM,CAACmB,MAAM,CAAC,CAAC,CAAC,EAAE,IAAI,CAACN,aAAa,EAAEO,cAAc,CAAC;MAC9DM,OAAO,EAAEjB;IACb,CAAC;IACD,OAAO,IAAI,CAACE,UAAU,CAACG,IAAI,CAACO,OAAO,CAAC,CAACM,IAAI,CAAEC,QAAQ,IAAK;MACpD,IAAI,CAACA,QAAQ,CAACC,SAAS,EAAE;QACrB,MAAM,IAAItB,OAAO,CAACuB,gBAAgB,CAACvB,OAAO,CAACwB,aAAa,CAACC,cAAc,EAAE,gCAAgC,CAAC;MAC9G;MACA,OAAOJ,QAAQ,CAACC,SAAS,CAACb,GAAG,CAAEiB,IAAI,IAAK;QACpC,OAAO,CAAC,CAAC,EAAE5B,aAAa,CAAC6B,iBAAiB,EAAED,IAAI,EAAEZ,OAAO,CAAC;MAC9D,CAAC,CAAC;IACN,CAAC,CAAC;EACN;EACAI,mBAAmBA,CAACV,QAAQ,EAAE;IAC1B,IAAIoB,MAAM,GAAG,EAAE;IACfpB,QAAQ,CAACqB,OAAO,CAAC,CAACf,OAAO,EAAEgB,GAAG,KAAK;MAC/BF,MAAM,IAAIG,UAAU,CAACjB,OAAO,EAAEb,aAAa,EAAE6B,GAAG,CAAC;IACrD,CAAC,CAAC;IACFF,MAAM,IAAK,KAAI3B,aAAc,QAAO;IACpC,OAAO+B,MAAM,CAACC,IAAI,CAACL,MAAM,EAAE,OAAO,CAAC;EACvC;AACJ;AACAjC,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASkC,UAAUA,CAACjB,OAAO,EAAEoB,QAAQ,EAAEJ,GAAG,EAAE;EACxC,MAAMK,iBAAiB,GAAGC,mBAAmB,CAACtB,OAAO,CAAC;EACtD,IAAIuB,IAAI,GAAI,KAAIH,QAAS,MAAK;EAC9BG,IAAI,IAAK,mBAAkBF,iBAAiB,CAACG,MAAO,MAAK;EACzDD,IAAI,IAAI,oCAAoC;EAC5CA,IAAI,IAAK,eAAcP,GAAG,GAAG,CAAE,MAAK;EACpCO,IAAI,IAAI,uCAAuC;EAC/CA,IAAI,IAAI,MAAM;EACdA,IAAI,IAAK,GAAEF,iBAAkB,MAAK;EAClC,OAAOE,IAAI;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,mBAAmBA,CAACtB,OAAO,EAAE;EAClC,MAAMyB,WAAW,GAAGC,IAAI,CAACC,SAAS,CAAC3B,OAAO,CAAC4B,IAAI,CAAC;EAChD,IAAIC,cAAc,GAAI,QAAO7B,OAAO,CAACE,GAAI,eAAc;EACvD2B,cAAc,IAAK,mBAAkBJ,WAAW,CAACD,MAAO,MAAK;EAC7DK,cAAc,IAAI,mDAAmD;EACrE,IAAI7B,OAAO,CAACH,OAAO,EAAE;IACjBlB,MAAM,CAACmD,IAAI,CAAC9B,OAAO,CAACH,OAAO,CAAC,CAACkB,OAAO,CAAEgB,GAAG,IAAK;MAC1CF,cAAc,IAAK,GAAEE,GAAI,KAAI/B,OAAO,CAACH,OAAO,CAACkC,GAAG,CAAE,MAAK;IAC3D,CAAC,CAAC;EACN;EACAF,cAAc,IAAI,MAAM;EACxBA,cAAc,IAAIJ,WAAW;EAC7B,OAAOI,cAAc;AACzB"},"metadata":{},"sourceType":"script","externalDependencies":[]}