{"ast":null,"code":"'use strict';\n\nlet TextDecoder;\ntry {\n  TextDecoder = require('util').TextDecoder;\n} catch (e) {}\nconst {\n  TextDecoder: PolyfillTextDecoder,\n  getEncoding\n} = require('text-decoding');\n\n// Node has always utf-8\nconst textDecoders = new Map();\nif (TextDecoder) {\n  textDecoders.set('utf-8', new TextDecoder('utf-8'));\n} else {\n  textDecoders.set('utf-8', new PolyfillTextDecoder('utf-8'));\n}\ntextDecoders.set('utf8', textDecoders.get('utf-8'));\nfunction decodeText(text, textEncoding, destEncoding) {\n  if (text) {\n    if (textDecoders.has(destEncoding)) {\n      try {\n        return textDecoders.get(destEncoding).decode(Buffer.from(text, textEncoding));\n      } catch (e) {}\n    } else {\n      try {\n        textDecoders.set(destEncoding, new TextDecoder(destEncoding));\n        return textDecoders.get(destEncoding).decode(Buffer.from(text, textEncoding));\n      } catch (e) {\n        if (getEncoding(destEncoding)) {\n          try {\n            textDecoders.set(destEncoding, new PolyfillTextDecoder(destEncoding));\n            return textDecoders.get(destEncoding).decode(Buffer.from(text, textEncoding));\n          } catch (e) {}\n        }\n      }\n    }\n  }\n  return text;\n}\nfunction decodeTextPolyfill(text, textEncoding, destEncoding) {\n  if (text) {\n    if (textDecoders.has(destEncoding)) {\n      try {\n        return textDecoders.get(destEncoding).decode(Buffer.from(text, textEncoding));\n      } catch (e) {}\n    } else {\n      if (getEncoding(destEncoding)) {\n        try {\n          textDecoders.set(destEncoding, new PolyfillTextDecoder(destEncoding));\n          return textDecoders.get(destEncoding).decode(Buffer.from(text, textEncoding));\n        } catch (e) {}\n      }\n    }\n  }\n  return text;\n}\nmodule.exports = TextDecoder ? decodeText : decodeTextPolyfill;","map":{"version":3,"names":["TextDecoder","require","e","PolyfillTextDecoder","getEncoding","textDecoders","Map","set","get","decodeText","text","textEncoding","destEncoding","has","decode","Buffer","from","decodeTextPolyfill","module","exports"],"sources":["D:/Coding/React/taskmybusiness/node_modules/@fastify/busboy/lib/utils/decodeText.js"],"sourcesContent":["'use strict'\n\nlet TextDecoder\ntry {\n  TextDecoder = require('util').TextDecoder\n} catch (e) { }\n\nconst { TextDecoder: PolyfillTextDecoder, getEncoding } = require('text-decoding')\n\n// Node has always utf-8\nconst textDecoders = new Map()\nif (TextDecoder) {\n  textDecoders.set('utf-8', new TextDecoder('utf-8'))\n} else {\n  textDecoders.set('utf-8', new PolyfillTextDecoder('utf-8'))\n}\ntextDecoders.set('utf8', textDecoders.get('utf-8'))\n\nfunction decodeText (text, textEncoding, destEncoding) {\n  if (text) {\n    if (textDecoders.has(destEncoding)) {\n      try {\n        return textDecoders.get(destEncoding).decode(Buffer.from(text, textEncoding))\n      } catch (e) { }\n    } else {\n      try {\n        textDecoders.set(destEncoding, new TextDecoder(destEncoding))\n        return textDecoders.get(destEncoding).decode(Buffer.from(text, textEncoding))\n      } catch (e) {\n        if (getEncoding(destEncoding)) {\n          try {\n            textDecoders.set(destEncoding, new PolyfillTextDecoder(destEncoding))\n            return textDecoders.get(destEncoding).decode(Buffer.from(text, textEncoding))\n          } catch (e) { }\n        }\n      }\n    }\n  }\n  return text\n}\n\nfunction decodeTextPolyfill (text, textEncoding, destEncoding) {\n  if (text) {\n    if (textDecoders.has(destEncoding)) {\n      try {\n        return textDecoders.get(destEncoding).decode(Buffer.from(text, textEncoding))\n      } catch (e) { }\n    } else {\n      if (getEncoding(destEncoding)) {\n        try {\n          textDecoders.set(destEncoding, new PolyfillTextDecoder(destEncoding))\n          return textDecoders.get(destEncoding).decode(Buffer.from(text, textEncoding))\n        } catch (e) { }\n      }\n    }\n  }\n  return text\n}\n\nmodule.exports = TextDecoder ? decodeText : decodeTextPolyfill\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,WAAW;AACf,IAAI;EACFA,WAAW,GAAGC,OAAO,CAAC,MAAM,CAAC,CAACD,WAAW;AAC3C,CAAC,CAAC,OAAOE,CAAC,EAAE,CAAE;AAEd,MAAM;EAAEF,WAAW,EAAEG,mBAAmB;EAAEC;AAAY,CAAC,GAAGH,OAAO,CAAC,eAAe,CAAC;;AAElF;AACA,MAAMI,YAAY,GAAG,IAAIC,GAAG,CAAC,CAAC;AAC9B,IAAIN,WAAW,EAAE;EACfK,YAAY,CAACE,GAAG,CAAC,OAAO,EAAE,IAAIP,WAAW,CAAC,OAAO,CAAC,CAAC;AACrD,CAAC,MAAM;EACLK,YAAY,CAACE,GAAG,CAAC,OAAO,EAAE,IAAIJ,mBAAmB,CAAC,OAAO,CAAC,CAAC;AAC7D;AACAE,YAAY,CAACE,GAAG,CAAC,MAAM,EAAEF,YAAY,CAACG,GAAG,CAAC,OAAO,CAAC,CAAC;AAEnD,SAASC,UAAUA,CAAEC,IAAI,EAAEC,YAAY,EAAEC,YAAY,EAAE;EACrD,IAAIF,IAAI,EAAE;IACR,IAAIL,YAAY,CAACQ,GAAG,CAACD,YAAY,CAAC,EAAE;MAClC,IAAI;QACF,OAAOP,YAAY,CAACG,GAAG,CAACI,YAAY,CAAC,CAACE,MAAM,CAACC,MAAM,CAACC,IAAI,CAACN,IAAI,EAAEC,YAAY,CAAC,CAAC;MAC/E,CAAC,CAAC,OAAOT,CAAC,EAAE,CAAE;IAChB,CAAC,MAAM;MACL,IAAI;QACFG,YAAY,CAACE,GAAG,CAACK,YAAY,EAAE,IAAIZ,WAAW,CAACY,YAAY,CAAC,CAAC;QAC7D,OAAOP,YAAY,CAACG,GAAG,CAACI,YAAY,CAAC,CAACE,MAAM,CAACC,MAAM,CAACC,IAAI,CAACN,IAAI,EAAEC,YAAY,CAAC,CAAC;MAC/E,CAAC,CAAC,OAAOT,CAAC,EAAE;QACV,IAAIE,WAAW,CAACQ,YAAY,CAAC,EAAE;UAC7B,IAAI;YACFP,YAAY,CAACE,GAAG,CAACK,YAAY,EAAE,IAAIT,mBAAmB,CAACS,YAAY,CAAC,CAAC;YACrE,OAAOP,YAAY,CAACG,GAAG,CAACI,YAAY,CAAC,CAACE,MAAM,CAACC,MAAM,CAACC,IAAI,CAACN,IAAI,EAAEC,YAAY,CAAC,CAAC;UAC/E,CAAC,CAAC,OAAOT,CAAC,EAAE,CAAE;QAChB;MACF;IACF;EACF;EACA,OAAOQ,IAAI;AACb;AAEA,SAASO,kBAAkBA,CAAEP,IAAI,EAAEC,YAAY,EAAEC,YAAY,EAAE;EAC7D,IAAIF,IAAI,EAAE;IACR,IAAIL,YAAY,CAACQ,GAAG,CAACD,YAAY,CAAC,EAAE;MAClC,IAAI;QACF,OAAOP,YAAY,CAACG,GAAG,CAACI,YAAY,CAAC,CAACE,MAAM,CAACC,MAAM,CAACC,IAAI,CAACN,IAAI,EAAEC,YAAY,CAAC,CAAC;MAC/E,CAAC,CAAC,OAAOT,CAAC,EAAE,CAAE;IAChB,CAAC,MAAM;MACL,IAAIE,WAAW,CAACQ,YAAY,CAAC,EAAE;QAC7B,IAAI;UACFP,YAAY,CAACE,GAAG,CAACK,YAAY,EAAE,IAAIT,mBAAmB,CAACS,YAAY,CAAC,CAAC;UACrE,OAAOP,YAAY,CAACG,GAAG,CAACI,YAAY,CAAC,CAACE,MAAM,CAACC,MAAM,CAACC,IAAI,CAACN,IAAI,EAAEC,YAAY,CAAC,CAAC;QAC/E,CAAC,CAAC,OAAOT,CAAC,EAAE,CAAE;MAChB;IACF;EACF;EACA,OAAOQ,IAAI;AACb;AAEAQ,MAAM,CAACC,OAAO,GAAGnB,WAAW,GAAGS,UAAU,GAAGQ,kBAAkB"},"metadata":{},"sourceType":"script","externalDependencies":[]}