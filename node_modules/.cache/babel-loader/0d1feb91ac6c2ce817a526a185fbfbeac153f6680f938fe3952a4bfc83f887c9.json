{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExponentialBackoff = exports.setTimeoutHandler = exports.delayExecution = exports.MAX_RETRY_ATTEMPTS = exports.DEFAULT_BACKOFF_FACTOR = exports.DEFAULT_BACKOFF_MAX_DELAY_MS = exports.DEFAULT_BACKOFF_INITIAL_DELAY_MS = void 0;\nconst logger_1 = require(\"./logger\");\n/*\n * @module firestore/backoff\n * @private\n * @internal\n *\n * Contains backoff logic to facilitate RPC error handling. This class derives\n * its implementation from the Firestore Mobile Web Client.\n *\n * @see https://github.com/firebase/firebase-js-sdk/blob/master/packages/firestore/src/remote/backoff.ts\n */\n/*!\n * The default initial backoff time in milliseconds after an error.\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\n */\nexports.DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1000;\n/*!\n * The default maximum backoff time in milliseconds.\n */\nexports.DEFAULT_BACKOFF_MAX_DELAY_MS = 60 * 1000;\n/*!\n * The default factor to increase the backup by after each failed attempt.\n */\nexports.DEFAULT_BACKOFF_FACTOR = 1.5;\n/*!\n * The default jitter to distribute the backoff attempts by (0 means no\n * randomization, 1.0 means +/-50% randomization).\n */\nconst DEFAULT_JITTER_FACTOR = 1.0;\n/*!\n * The maximum number of retries that will be attempted by backoff\n * before stopping all retry attempts.\n */\nexports.MAX_RETRY_ATTEMPTS = 10;\n/*!\n * The timeout handler used by `ExponentialBackoff` and `BulkWriter`.\n */\nexports.delayExecution = setTimeout;\n/**\n * Allows overriding of the timeout handler used by the exponential backoff\n * implementation. If not invoked, we default to `setTimeout()`.\n *\n * Used only in testing.\n *\n * @private\n * @internal\n * @param {function} handler A handler than matches the API of `setTimeout()`.\n */\nfunction setTimeoutHandler(handler) {\n  exports.delayExecution = (f, ms) => {\n    handler(f, ms);\n    const timeout = {\n      hasRef: () => {\n        throw new Error('For tests only. Not Implemented');\n      },\n      ref: () => {\n        throw new Error('For tests only. Not Implemented');\n      },\n      refresh: () => {\n        throw new Error('For tests only. Not Implemented');\n      },\n      unref: () => {\n        throw new Error('For tests only. Not Implemented');\n      },\n      [Symbol.toPrimitive]: () => {\n        throw new Error('For tests only. Not Implemented');\n      }\n    };\n    return timeout;\n  };\n}\nexports.setTimeoutHandler = setTimeoutHandler;\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a \"jitter\" (+/- 50% by default)  that is calculated and\n * added to the base delay. This prevents clients from accidentally\n * synchronizing their delays causing spikes of load to the backend.\n *\n * @private\n * @internal\n */\nclass ExponentialBackoff {\n  constructor() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    /**\n     * The number of retries that has been attempted.\n     *\n     * @private\n     * @internal\n     */\n    this._retryCount = 0;\n    /**\n     * The backoff delay of the current attempt.\n     *\n     * @private\n     * @internal\n     */\n    this.currentBaseMs = 0;\n    /**\n     * Whether we are currently waiting for backoff to complete.\n     *\n     * @private\n     * @internal\n     */\n    this.awaitingBackoffCompletion = false;\n    this.initialDelayMs = options.initialDelayMs !== undefined ? options.initialDelayMs : exports.DEFAULT_BACKOFF_INITIAL_DELAY_MS;\n    this.backoffFactor = options.backoffFactor !== undefined ? options.backoffFactor : exports.DEFAULT_BACKOFF_FACTOR;\n    this.maxDelayMs = options.maxDelayMs !== undefined ? options.maxDelayMs : exports.DEFAULT_BACKOFF_MAX_DELAY_MS;\n    this.jitterFactor = options.jitterFactor !== undefined ? options.jitterFactor : DEFAULT_JITTER_FACTOR;\n  }\n  /**\n   * Resets the backoff delay and retry count.\n   *\n   * The very next backoffAndWait() will have no delay. If it is called again\n   * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n   * subsequent ones will increase according to the backoffFactor.\n   *\n   * @private\n   * @internal\n   */\n  reset() {\n    this._retryCount = 0;\n    this.currentBaseMs = 0;\n  }\n  /**\n   * Resets the backoff delay to the maximum delay (e.g. for use after a\n   * RESOURCE_EXHAUSTED error).\n   *\n   * @private\n   * @internal\n   */\n  resetToMax() {\n    this.currentBaseMs = this.maxDelayMs;\n  }\n  /**\n   * Returns a promise that resolves after currentDelayMs, and increases the\n   * delay for any subsequent attempts.\n   *\n   * @return A Promise that resolves when the current delay elapsed.\n   * @private\n   * @internal\n   */\n  backoffAndWait() {\n    if (this.awaitingBackoffCompletion) {\n      return Promise.reject(new Error('A backoff operation is already in progress.'));\n    }\n    if (this.retryCount > exports.MAX_RETRY_ATTEMPTS) {\n      return Promise.reject(new Error('Exceeded maximum number of retries allowed.'));\n    }\n    // First schedule using the current base (which may be 0 and should be\n    // honored as such).\n    const delayWithJitterMs = this.currentBaseMs + this.jitterDelayMs();\n    if (this.currentBaseMs > 0) {\n      (0, logger_1.logger)('ExponentialBackoff.backoffAndWait', null, `Backing off for ${delayWithJitterMs} ms ` + `(base delay: ${this.currentBaseMs} ms)`);\n    }\n    // Apply backoff factor to determine next delay and ensure it is within\n    // bounds.\n    this.currentBaseMs *= this.backoffFactor;\n    this.currentBaseMs = Math.max(this.currentBaseMs, this.initialDelayMs);\n    this.currentBaseMs = Math.min(this.currentBaseMs, this.maxDelayMs);\n    this._retryCount += 1;\n    return new Promise(resolve => {\n      this.awaitingBackoffCompletion = true;\n      (0, exports.delayExecution)(() => {\n        this.awaitingBackoffCompletion = false;\n        resolve();\n      }, delayWithJitterMs);\n    });\n  }\n  // Visible for testing.\n  get retryCount() {\n    return this._retryCount;\n  }\n  /**\n   * Returns a randomized \"jitter\" delay based on the current base and jitter\n   * factor.\n   *\n   * @returns {number} The jitter to apply based on the current delay.\n   * @private\n   * @internal\n   */\n  jitterDelayMs() {\n    return (Math.random() - 0.5) * this.jitterFactor * this.currentBaseMs;\n  }\n}\nexports.ExponentialBackoff = ExponentialBackoff;","map":{"version":3,"names":["Object","defineProperty","exports","value","ExponentialBackoff","setTimeoutHandler","delayExecution","MAX_RETRY_ATTEMPTS","DEFAULT_BACKOFF_FACTOR","DEFAULT_BACKOFF_MAX_DELAY_MS","DEFAULT_BACKOFF_INITIAL_DELAY_MS","logger_1","require","DEFAULT_JITTER_FACTOR","setTimeout","handler","f","ms","timeout","hasRef","Error","ref","refresh","unref","Symbol","toPrimitive","constructor","options","arguments","length","undefined","_retryCount","currentBaseMs","awaitingBackoffCompletion","initialDelayMs","backoffFactor","maxDelayMs","jitterFactor","reset","resetToMax","backoffAndWait","Promise","reject","retryCount","delayWithJitterMs","jitterDelayMs","logger","Math","max","min","resolve","random"],"sources":["D:/Coding/React/taskmybusiness/node_modules/@google-cloud/firestore/build/src/backoff.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2017 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExponentialBackoff = exports.setTimeoutHandler = exports.delayExecution = exports.MAX_RETRY_ATTEMPTS = exports.DEFAULT_BACKOFF_FACTOR = exports.DEFAULT_BACKOFF_MAX_DELAY_MS = exports.DEFAULT_BACKOFF_INITIAL_DELAY_MS = void 0;\nconst logger_1 = require(\"./logger\");\n/*\n * @module firestore/backoff\n * @private\n * @internal\n *\n * Contains backoff logic to facilitate RPC error handling. This class derives\n * its implementation from the Firestore Mobile Web Client.\n *\n * @see https://github.com/firebase/firebase-js-sdk/blob/master/packages/firestore/src/remote/backoff.ts\n */\n/*!\n * The default initial backoff time in milliseconds after an error.\n * Set to 1s according to https://cloud.google.com/apis/design/errors.\n */\nexports.DEFAULT_BACKOFF_INITIAL_DELAY_MS = 1000;\n/*!\n * The default maximum backoff time in milliseconds.\n */\nexports.DEFAULT_BACKOFF_MAX_DELAY_MS = 60 * 1000;\n/*!\n * The default factor to increase the backup by after each failed attempt.\n */\nexports.DEFAULT_BACKOFF_FACTOR = 1.5;\n/*!\n * The default jitter to distribute the backoff attempts by (0 means no\n * randomization, 1.0 means +/-50% randomization).\n */\nconst DEFAULT_JITTER_FACTOR = 1.0;\n/*!\n * The maximum number of retries that will be attempted by backoff\n * before stopping all retry attempts.\n */\nexports.MAX_RETRY_ATTEMPTS = 10;\n/*!\n * The timeout handler used by `ExponentialBackoff` and `BulkWriter`.\n */\nexports.delayExecution = setTimeout;\n/**\n * Allows overriding of the timeout handler used by the exponential backoff\n * implementation. If not invoked, we default to `setTimeout()`.\n *\n * Used only in testing.\n *\n * @private\n * @internal\n * @param {function} handler A handler than matches the API of `setTimeout()`.\n */\nfunction setTimeoutHandler(handler) {\n    exports.delayExecution = (f, ms) => {\n        handler(f, ms);\n        const timeout = {\n            hasRef: () => {\n                throw new Error('For tests only. Not Implemented');\n            },\n            ref: () => {\n                throw new Error('For tests only. Not Implemented');\n            },\n            refresh: () => {\n                throw new Error('For tests only. Not Implemented');\n            },\n            unref: () => {\n                throw new Error('For tests only. Not Implemented');\n            },\n            [Symbol.toPrimitive]: () => {\n                throw new Error('For tests only. Not Implemented');\n            },\n        };\n        return timeout;\n    };\n}\nexports.setTimeoutHandler = setTimeoutHandler;\n/**\n * A helper for running delayed tasks following an exponential backoff curve\n * between attempts.\n *\n * Each delay is made up of a \"base\" delay which follows the exponential\n * backoff curve, and a \"jitter\" (+/- 50% by default)  that is calculated and\n * added to the base delay. This prevents clients from accidentally\n * synchronizing their delays causing spikes of load to the backend.\n *\n * @private\n * @internal\n */\nclass ExponentialBackoff {\n    constructor(options = {}) {\n        /**\n         * The number of retries that has been attempted.\n         *\n         * @private\n         * @internal\n         */\n        this._retryCount = 0;\n        /**\n         * The backoff delay of the current attempt.\n         *\n         * @private\n         * @internal\n         */\n        this.currentBaseMs = 0;\n        /**\n         * Whether we are currently waiting for backoff to complete.\n         *\n         * @private\n         * @internal\n         */\n        this.awaitingBackoffCompletion = false;\n        this.initialDelayMs =\n            options.initialDelayMs !== undefined\n                ? options.initialDelayMs\n                : exports.DEFAULT_BACKOFF_INITIAL_DELAY_MS;\n        this.backoffFactor =\n            options.backoffFactor !== undefined\n                ? options.backoffFactor\n                : exports.DEFAULT_BACKOFF_FACTOR;\n        this.maxDelayMs =\n            options.maxDelayMs !== undefined\n                ? options.maxDelayMs\n                : exports.DEFAULT_BACKOFF_MAX_DELAY_MS;\n        this.jitterFactor =\n            options.jitterFactor !== undefined\n                ? options.jitterFactor\n                : DEFAULT_JITTER_FACTOR;\n    }\n    /**\n     * Resets the backoff delay and retry count.\n     *\n     * The very next backoffAndWait() will have no delay. If it is called again\n     * (i.e. due to an error), initialDelayMs (plus jitter) will be used, and\n     * subsequent ones will increase according to the backoffFactor.\n     *\n     * @private\n     * @internal\n     */\n    reset() {\n        this._retryCount = 0;\n        this.currentBaseMs = 0;\n    }\n    /**\n     * Resets the backoff delay to the maximum delay (e.g. for use after a\n     * RESOURCE_EXHAUSTED error).\n     *\n     * @private\n     * @internal\n     */\n    resetToMax() {\n        this.currentBaseMs = this.maxDelayMs;\n    }\n    /**\n     * Returns a promise that resolves after currentDelayMs, and increases the\n     * delay for any subsequent attempts.\n     *\n     * @return A Promise that resolves when the current delay elapsed.\n     * @private\n     * @internal\n     */\n    backoffAndWait() {\n        if (this.awaitingBackoffCompletion) {\n            return Promise.reject(new Error('A backoff operation is already in progress.'));\n        }\n        if (this.retryCount > exports.MAX_RETRY_ATTEMPTS) {\n            return Promise.reject(new Error('Exceeded maximum number of retries allowed.'));\n        }\n        // First schedule using the current base (which may be 0 and should be\n        // honored as such).\n        const delayWithJitterMs = this.currentBaseMs + this.jitterDelayMs();\n        if (this.currentBaseMs > 0) {\n            (0, logger_1.logger)('ExponentialBackoff.backoffAndWait', null, `Backing off for ${delayWithJitterMs} ms ` +\n                `(base delay: ${this.currentBaseMs} ms)`);\n        }\n        // Apply backoff factor to determine next delay and ensure it is within\n        // bounds.\n        this.currentBaseMs *= this.backoffFactor;\n        this.currentBaseMs = Math.max(this.currentBaseMs, this.initialDelayMs);\n        this.currentBaseMs = Math.min(this.currentBaseMs, this.maxDelayMs);\n        this._retryCount += 1;\n        return new Promise(resolve => {\n            this.awaitingBackoffCompletion = true;\n            (0, exports.delayExecution)(() => {\n                this.awaitingBackoffCompletion = false;\n                resolve();\n            }, delayWithJitterMs);\n        });\n    }\n    // Visible for testing.\n    get retryCount() {\n        return this._retryCount;\n    }\n    /**\n     * Returns a randomized \"jitter\" delay based on the current base and jitter\n     * factor.\n     *\n     * @returns {number} The jitter to apply based on the current delay.\n     * @private\n     * @internal\n     */\n    jitterDelayMs() {\n        return (Math.random() - 0.5) * this.jitterFactor * this.currentBaseMs;\n    }\n}\nexports.ExponentialBackoff = ExponentialBackoff;\n//# sourceMappingURL=backoff.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}