{"ast":null,"code":"/*! firebase-admin v11.9.0 */\n\"use strict\";\n\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getDatabaseWithUrl = exports.getDatabase = exports.ServerValue = exports.enableLogging = void 0;\nconst standalone_1 = require(\"@firebase/database-compat/standalone\");\nconst app_1 = require(\"../app\");\nconst database_1 = require(\"./database\");\n// TODO: Remove the following any-cast once the typins in @firebase/database-types are fixed.\n/**\n * {@link https://firebase.google.com/docs/reference/js/firebase.database#enablelogging | enableLogging}\n * function from the `@firebase/database` package.\n */\nexports.enableLogging = standalone_1.enableLogging;\n/**\n * {@link https://firebase.google.com/docs/reference/js/firebase.database.ServerValue | ServerValue}\n * constant from the `@firebase/database` package.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexports.ServerValue = standalone_1.ServerValue;\n/**\n * Gets the {@link Database} service for the default\n * app or a given app.\n *\n * `getDatabase()` can be called with no arguments to access the default\n * app's `Database` service or as `getDatabase(app)` to access the\n * `Database` service associated with a specific app.\n *\n * @example\n * ```javascript\n * // Get the Database service for the default app\n * const defaultDatabase = getDatabase();\n * ```\n *\n * @example\n * ```javascript\n * // Get the Database service for a specific app\n * const otherDatabase = getDatabase(app);\n * ```\n *\n * @param App - whose `Database` service to\n *   return. If not provided, the default `Database` service will be returned.\n *\n * @returns The default `Database` service if no app\n *   is provided or the `Database` service associated with the provided app.\n */\nfunction getDatabase(app) {\n  return getDatabaseInstance({\n    app\n  });\n}\nexports.getDatabase = getDatabase;\n/**\n * Gets the {@link Database} service for the default\n * app or a given app.\n *\n * `getDatabaseWithUrl()` can be called with no arguments to access the default\n * app's {@link Database} service or as `getDatabaseWithUrl(app)` to access the\n * {@link Database} service associated with a specific app.\n *\n * @example\n * ```javascript\n * // Get the Database service for the default app\n * const defaultDatabase = getDatabaseWithUrl('https://example.firebaseio.com');\n * ```\n *\n * @example\n * ```javascript\n * // Get the Database service for a specific app\n * const otherDatabase = getDatabaseWithUrl('https://example.firebaseio.com', app);\n * ```\n *\n * @param App - whose `Database` service to\n *   return. If not provided, the default `Database` service will be returned.\n *\n * @returns The default `Database` service if no app\n *   is provided or the `Database` service associated with the provided app.\n */\nfunction getDatabaseWithUrl(url, app) {\n  return getDatabaseInstance({\n    url,\n    app\n  });\n}\nexports.getDatabaseWithUrl = getDatabaseWithUrl;\nfunction getDatabaseInstance(options) {\n  let {\n    app\n  } = options;\n  if (typeof app === 'undefined') {\n    app = (0, app_1.getApp)();\n  }\n  const firebaseApp = app;\n  const dbService = firebaseApp.getOrInitService('database', app => new database_1.DatabaseService(app));\n  return dbService.getDatabase(options.url);\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","getDatabaseWithUrl","getDatabase","ServerValue","enableLogging","standalone_1","require","app_1","database_1","app","getDatabaseInstance","url","options","getApp","firebaseApp","dbService","getOrInitService","DatabaseService"],"sources":["D:/Coding/React/taskmybusiness/node_modules/firebase-admin/lib/database/index.js"],"sourcesContent":["/*! firebase-admin v11.9.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.getDatabaseWithUrl = exports.getDatabase = exports.ServerValue = exports.enableLogging = void 0;\nconst standalone_1 = require(\"@firebase/database-compat/standalone\");\nconst app_1 = require(\"../app\");\nconst database_1 = require(\"./database\");\n// TODO: Remove the following any-cast once the typins in @firebase/database-types are fixed.\n/**\n * {@link https://firebase.google.com/docs/reference/js/firebase.database#enablelogging | enableLogging}\n * function from the `@firebase/database` package.\n */\nexports.enableLogging = standalone_1.enableLogging;\n/**\n * {@link https://firebase.google.com/docs/reference/js/firebase.database.ServerValue | ServerValue}\n * constant from the `@firebase/database` package.\n */\n// eslint-disable-next-line @typescript-eslint/naming-convention\nexports.ServerValue = standalone_1.ServerValue;\n/**\n * Gets the {@link Database} service for the default\n * app or a given app.\n *\n * `getDatabase()` can be called with no arguments to access the default\n * app's `Database` service or as `getDatabase(app)` to access the\n * `Database` service associated with a specific app.\n *\n * @example\n * ```javascript\n * // Get the Database service for the default app\n * const defaultDatabase = getDatabase();\n * ```\n *\n * @example\n * ```javascript\n * // Get the Database service for a specific app\n * const otherDatabase = getDatabase(app);\n * ```\n *\n * @param App - whose `Database` service to\n *   return. If not provided, the default `Database` service will be returned.\n *\n * @returns The default `Database` service if no app\n *   is provided or the `Database` service associated with the provided app.\n */\nfunction getDatabase(app) {\n    return getDatabaseInstance({ app });\n}\nexports.getDatabase = getDatabase;\n/**\n * Gets the {@link Database} service for the default\n * app or a given app.\n *\n * `getDatabaseWithUrl()` can be called with no arguments to access the default\n * app's {@link Database} service or as `getDatabaseWithUrl(app)` to access the\n * {@link Database} service associated with a specific app.\n *\n * @example\n * ```javascript\n * // Get the Database service for the default app\n * const defaultDatabase = getDatabaseWithUrl('https://example.firebaseio.com');\n * ```\n *\n * @example\n * ```javascript\n * // Get the Database service for a specific app\n * const otherDatabase = getDatabaseWithUrl('https://example.firebaseio.com', app);\n * ```\n *\n * @param App - whose `Database` service to\n *   return. If not provided, the default `Database` service will be returned.\n *\n * @returns The default `Database` service if no app\n *   is provided or the `Database` service associated with the provided app.\n */\nfunction getDatabaseWithUrl(url, app) {\n    return getDatabaseInstance({ url, app });\n}\nexports.getDatabaseWithUrl = getDatabaseWithUrl;\nfunction getDatabaseInstance(options) {\n    let { app } = options;\n    if (typeof app === 'undefined') {\n        app = (0, app_1.getApp)();\n    }\n    const firebaseApp = app;\n    const dbService = firebaseApp.getOrInitService('database', (app) => new database_1.DatabaseService(app));\n    return dbService.getDatabase(options.url);\n}\n"],"mappings":"AAAA;AACA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,kBAAkB,GAAGF,OAAO,CAACG,WAAW,GAAGH,OAAO,CAACI,WAAW,GAAGJ,OAAO,CAACK,aAAa,GAAG,KAAK,CAAC;AACvG,MAAMC,YAAY,GAAGC,OAAO,CAAC,sCAAsC,CAAC;AACpE,MAAMC,KAAK,GAAGD,OAAO,CAAC,QAAQ,CAAC;AAC/B,MAAME,UAAU,GAAGF,OAAO,CAAC,YAAY,CAAC;AACxC;AACA;AACA;AACA;AACA;AACAP,OAAO,CAACK,aAAa,GAAGC,YAAY,CAACD,aAAa;AAClD;AACA;AACA;AACA;AACA;AACAL,OAAO,CAACI,WAAW,GAAGE,YAAY,CAACF,WAAW;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,WAAWA,CAACO,GAAG,EAAE;EACtB,OAAOC,mBAAmB,CAAC;IAAED;EAAI,CAAC,CAAC;AACvC;AACAV,OAAO,CAACG,WAAW,GAAGA,WAAW;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,kBAAkBA,CAACU,GAAG,EAAEF,GAAG,EAAE;EAClC,OAAOC,mBAAmB,CAAC;IAAEC,GAAG;IAAEF;EAAI,CAAC,CAAC;AAC5C;AACAV,OAAO,CAACE,kBAAkB,GAAGA,kBAAkB;AAC/C,SAASS,mBAAmBA,CAACE,OAAO,EAAE;EAClC,IAAI;IAAEH;EAAI,CAAC,GAAGG,OAAO;EACrB,IAAI,OAAOH,GAAG,KAAK,WAAW,EAAE;IAC5BA,GAAG,GAAG,CAAC,CAAC,EAAEF,KAAK,CAACM,MAAM,EAAE,CAAC;EAC7B;EACA,MAAMC,WAAW,GAAGL,GAAG;EACvB,MAAMM,SAAS,GAAGD,WAAW,CAACE,gBAAgB,CAAC,UAAU,EAAGP,GAAG,IAAK,IAAID,UAAU,CAACS,eAAe,CAACR,GAAG,CAAC,CAAC;EACxG,OAAOM,SAAS,CAACb,WAAW,CAACU,OAAO,CAACD,GAAG,CAAC;AAC7C"},"metadata":{},"sourceType":"script","externalDependencies":[]}