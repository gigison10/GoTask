{"ast":null,"code":"/*! firebase-admin v11.9.0 */\n\"use strict\";\n\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateMessage = exports.BLACKLISTED_OPTIONS_KEYS = exports.BLACKLISTED_DATA_PAYLOAD_KEYS = void 0;\nconst index_1 = require(\"../utils/index\");\nconst error_1 = require(\"../utils/error\");\nconst validator = require(\"../utils/validator\");\n// Keys which are not allowed in the messaging data payload object.\nexports.BLACKLISTED_DATA_PAYLOAD_KEYS = ['from'];\n// Keys which are not allowed in the messaging options object.\nexports.BLACKLISTED_OPTIONS_KEYS = ['condition', 'data', 'notification', 'registrationIds', 'registration_ids', 'to'];\n/**\n * Checks if the given Message object is valid. Recursively validates all the child objects\n * included in the message (android, apns, data etc.). If successful, transforms the message\n * in place by renaming the keys to what's expected by the remote FCM service.\n *\n * @param {Message} Message An object to be validated.\n */\nfunction validateMessage(message) {\n  if (!validator.isNonNullObject(message)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Message must be a non-null object');\n  }\n  const anyMessage = message;\n  if (anyMessage.topic) {\n    // If the topic name is prefixed, remove it.\n    if (anyMessage.topic.startsWith('/topics/')) {\n      anyMessage.topic = anyMessage.topic.replace(/^\\/topics\\//, '');\n    }\n    // Checks for illegal characters and empty string.\n    if (!/^[a-zA-Z0-9-_.~%]+$/.test(anyMessage.topic)) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Malformed topic name');\n    }\n  }\n  const targets = [anyMessage.token, anyMessage.topic, anyMessage.condition];\n  if (targets.filter(v => validator.isNonEmptyString(v)).length !== 1) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Exactly one of topic, token or condition is required');\n  }\n  validateStringMap(message.data, 'data');\n  validateAndroidConfig(message.android);\n  validateWebpushConfig(message.webpush);\n  validateApnsConfig(message.apns);\n  validateFcmOptions(message.fcmOptions);\n  validateNotification(message.notification);\n}\nexports.validateMessage = validateMessage;\n/**\n * Checks if the given object only contains strings as child values.\n *\n * @param {object} map An object to be validated.\n * @param {string} label A label to be included in the errors thrown.\n */\nfunction validateStringMap(map, label) {\n  if (typeof map === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(map)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `${label} must be a non-null object`);\n  }\n  Object.keys(map).forEach(key => {\n    if (!validator.isString(map[key])) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `${label} must only contain string values`);\n    }\n  });\n}\n/**\n * Checks if the given WebpushConfig object is valid. The object must have valid headers and data.\n *\n * @param {WebpushConfig} config An object to be validated.\n */\nfunction validateWebpushConfig(config) {\n  if (typeof config === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(config)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'webpush must be a non-null object');\n  }\n  validateStringMap(config.headers, 'webpush.headers');\n  validateStringMap(config.data, 'webpush.data');\n}\n/**\n * Checks if the given ApnsConfig object is valid. The object must have valid headers and a\n * payload.\n *\n * @param {ApnsConfig} config An object to be validated.\n */\nfunction validateApnsConfig(config) {\n  if (typeof config === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(config)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns must be a non-null object');\n  }\n  validateStringMap(config.headers, 'apns.headers');\n  validateApnsPayload(config.payload);\n  validateApnsFcmOptions(config.fcmOptions);\n}\n/**\n * Checks if the given ApnsFcmOptions object is valid.\n *\n * @param {ApnsFcmOptions} fcmOptions An object to be validated.\n */\nfunction validateApnsFcmOptions(fcmOptions) {\n  if (typeof fcmOptions === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(fcmOptions)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'fcmOptions must be a non-null object');\n  }\n  if (typeof fcmOptions.imageUrl !== 'undefined' && !validator.isURL(fcmOptions.imageUrl)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'imageUrl must be a valid URL string');\n  }\n  if (typeof fcmOptions.analyticsLabel !== 'undefined' && !validator.isString(fcmOptions.analyticsLabel)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'analyticsLabel must be a string value');\n  }\n  const propertyMappings = {\n    imageUrl: 'image'\n  };\n  Object.keys(propertyMappings).forEach(key => {\n    if (key in fcmOptions && propertyMappings[key] in fcmOptions) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `Multiple specifications for ${key} in ApnsFcmOptions`);\n    }\n  });\n  (0, index_1.renameProperties)(fcmOptions, propertyMappings);\n}\n/**\n * Checks if the given FcmOptions object is valid.\n *\n * @param {FcmOptions} fcmOptions An object to be validated.\n */\nfunction validateFcmOptions(fcmOptions) {\n  if (typeof fcmOptions === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(fcmOptions)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'fcmOptions must be a non-null object');\n  }\n  if (typeof fcmOptions.analyticsLabel !== 'undefined' && !validator.isString(fcmOptions.analyticsLabel)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'analyticsLabel must be a string value');\n  }\n}\n/**\n * Checks if the given Notification object is valid.\n *\n * @param {Notification} notification An object to be validated.\n */\nfunction validateNotification(notification) {\n  if (typeof notification === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(notification)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'notification must be a non-null object');\n  }\n  if (typeof notification.imageUrl !== 'undefined' && !validator.isURL(notification.imageUrl)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'notification.imageUrl must be a valid URL string');\n  }\n  const propertyMappings = {\n    imageUrl: 'image'\n  };\n  Object.keys(propertyMappings).forEach(key => {\n    if (key in notification && propertyMappings[key] in notification) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `Multiple specifications for ${key} in Notification`);\n    }\n  });\n  (0, index_1.renameProperties)(notification, propertyMappings);\n}\n/**\n * Checks if the given ApnsPayload object is valid. The object must have a valid aps value.\n *\n * @param {ApnsPayload} payload An object to be validated.\n */\nfunction validateApnsPayload(payload) {\n  if (typeof payload === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(payload)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload must be a non-null object');\n  }\n  validateAps(payload.aps);\n}\n/**\n * Checks if the given Aps object is valid. The object must have a valid alert. If the validation\n * is successful, transforms the input object by renaming the keys to valid APNS payload keys.\n *\n * @param {Aps} aps An object to be validated.\n */\nfunction validateAps(aps) {\n  if (typeof aps === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(aps)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps must be a non-null object');\n  }\n  validateApsAlert(aps.alert);\n  validateApsSound(aps.sound);\n  const propertyMappings = {\n    contentAvailable: 'content-available',\n    mutableContent: 'mutable-content',\n    threadId: 'thread-id'\n  };\n  Object.keys(propertyMappings).forEach(key => {\n    if (key in aps && propertyMappings[key] in aps) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `Multiple specifications for ${key} in Aps`);\n    }\n  });\n  (0, index_1.renameProperties)(aps, propertyMappings);\n  const contentAvailable = aps['content-available'];\n  if (typeof contentAvailable !== 'undefined' && contentAvailable !== 1) {\n    if (contentAvailable === true) {\n      aps['content-available'] = 1;\n    } else {\n      delete aps['content-available'];\n    }\n  }\n  const mutableContent = aps['mutable-content'];\n  if (typeof mutableContent !== 'undefined' && mutableContent !== 1) {\n    if (mutableContent === true) {\n      aps['mutable-content'] = 1;\n    } else {\n      delete aps['mutable-content'];\n    }\n  }\n}\nfunction validateApsSound(sound) {\n  if (typeof sound === 'undefined' || validator.isNonEmptyString(sound)) {\n    return;\n  } else if (!validator.isNonNullObject(sound)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.sound must be a non-empty string or a non-null object');\n  }\n  if (!validator.isNonEmptyString(sound.name)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.sound.name must be a non-empty string');\n  }\n  const volume = sound.volume;\n  if (typeof volume !== 'undefined') {\n    if (!validator.isNumber(volume)) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.sound.volume must be a number');\n    }\n    if (volume < 0 || volume > 1) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.sound.volume must be in the interval [0, 1]');\n    }\n  }\n  const soundObject = sound;\n  const key = 'critical';\n  const critical = soundObject[key];\n  if (typeof critical !== 'undefined' && critical !== 1) {\n    if (critical === true) {\n      soundObject[key] = 1;\n    } else {\n      delete soundObject[key];\n    }\n  }\n}\n/**\n * Checks if the given alert object is valid. Alert could be a string or a complex object.\n * If specified as an object, it must have valid localization parameters. If successful, transforms\n * the input object by renaming the keys to valid APNS payload keys.\n *\n * @param {string | ApsAlert} alert An alert string or an object to be validated.\n */\nfunction validateApsAlert(alert) {\n  if (typeof alert === 'undefined' || validator.isString(alert)) {\n    return;\n  } else if (!validator.isNonNullObject(alert)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.alert must be a string or a non-null object');\n  }\n  const apsAlert = alert;\n  if (validator.isNonEmptyArray(apsAlert.locArgs) && !validator.isNonEmptyString(apsAlert.locKey)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.alert.locKey is required when specifying locArgs');\n  }\n  if (validator.isNonEmptyArray(apsAlert.titleLocArgs) && !validator.isNonEmptyString(apsAlert.titleLocKey)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.alert.titleLocKey is required when specifying titleLocArgs');\n  }\n  if (validator.isNonEmptyArray(apsAlert.subtitleLocArgs) && !validator.isNonEmptyString(apsAlert.subtitleLocKey)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.alert.subtitleLocKey is required when specifying subtitleLocArgs');\n  }\n  const propertyMappings = {\n    locKey: 'loc-key',\n    locArgs: 'loc-args',\n    titleLocKey: 'title-loc-key',\n    titleLocArgs: 'title-loc-args',\n    subtitleLocKey: 'subtitle-loc-key',\n    subtitleLocArgs: 'subtitle-loc-args',\n    actionLocKey: 'action-loc-key',\n    launchImage: 'launch-image'\n  };\n  (0, index_1.renameProperties)(apsAlert, propertyMappings);\n}\n/**\n * Checks if the given AndroidConfig object is valid. The object must have valid ttl, data,\n * and notification fields. If successful, transforms the input object by renaming keys to valid\n * Android keys. Also transforms the ttl value to the format expected by FCM service.\n *\n * @param config - An object to be validated.\n */\nfunction validateAndroidConfig(config) {\n  if (typeof config === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(config)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android must be a non-null object');\n  }\n  if (typeof config.ttl !== 'undefined') {\n    if (!validator.isNumber(config.ttl) || config.ttl < 0) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'TTL must be a non-negative duration in milliseconds');\n    }\n    const duration = (0, index_1.transformMillisecondsToSecondsString)(config.ttl);\n    config.ttl = duration;\n  }\n  validateStringMap(config.data, 'android.data');\n  validateAndroidNotification(config.notification);\n  validateAndroidFcmOptions(config.fcmOptions);\n  const propertyMappings = {\n    collapseKey: 'collapse_key',\n    restrictedPackageName: 'restricted_package_name'\n  };\n  (0, index_1.renameProperties)(config, propertyMappings);\n}\n/**\n * Checks if the given AndroidNotification object is valid. The object must have valid color and\n * localization parameters. If successful, transforms the input object by renaming keys to valid\n * Android keys.\n *\n * @param {AndroidNotification} notification An object to be validated.\n */\nfunction validateAndroidNotification(notification) {\n  if (typeof notification === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(notification)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification must be a non-null object');\n  }\n  if (typeof notification.color !== 'undefined' && !/^#[0-9a-fA-F]{6}$/.test(notification.color)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.color must be in the form #RRGGBB');\n  }\n  if (validator.isNonEmptyArray(notification.bodyLocArgs) && !validator.isNonEmptyString(notification.bodyLocKey)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.bodyLocKey is required when specifying bodyLocArgs');\n  }\n  if (validator.isNonEmptyArray(notification.titleLocArgs) && !validator.isNonEmptyString(notification.titleLocKey)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.titleLocKey is required when specifying titleLocArgs');\n  }\n  if (typeof notification.imageUrl !== 'undefined' && !validator.isURL(notification.imageUrl)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.imageUrl must be a valid URL string');\n  }\n  if (typeof notification.eventTimestamp !== 'undefined') {\n    if (!(notification.eventTimestamp instanceof Date)) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.eventTimestamp must be a valid `Date` object');\n    }\n    // Convert timestamp to RFC3339 UTC \"Zulu\" format, example \"2014-10-02T15:01:23.045123456Z\"\n    const zuluTimestamp = notification.eventTimestamp.toISOString();\n    notification.eventTimestamp = zuluTimestamp;\n  }\n  if (typeof notification.vibrateTimingsMillis !== 'undefined') {\n    if (!validator.isNonEmptyArray(notification.vibrateTimingsMillis)) {\n      throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.vibrateTimingsMillis must be a non-empty array of numbers');\n    }\n    const vibrateTimings = [];\n    notification.vibrateTimingsMillis.forEach(value => {\n      if (!validator.isNumber(value) || value < 0) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.vibrateTimingsMillis must be non-negative durations in milliseconds');\n      }\n      const duration = (0, index_1.transformMillisecondsToSecondsString)(value);\n      vibrateTimings.push(duration);\n    });\n    notification.vibrateTimingsMillis = vibrateTimings;\n  }\n  if (typeof notification.priority !== 'undefined') {\n    const priority = 'PRIORITY_' + notification.priority.toUpperCase();\n    notification.priority = priority;\n  }\n  if (typeof notification.visibility !== 'undefined') {\n    const visibility = notification.visibility.toUpperCase();\n    notification.visibility = visibility;\n  }\n  validateLightSettings(notification.lightSettings);\n  const propertyMappings = {\n    clickAction: 'click_action',\n    bodyLocKey: 'body_loc_key',\n    bodyLocArgs: 'body_loc_args',\n    titleLocKey: 'title_loc_key',\n    titleLocArgs: 'title_loc_args',\n    channelId: 'channel_id',\n    imageUrl: 'image',\n    eventTimestamp: 'event_time',\n    localOnly: 'local_only',\n    priority: 'notification_priority',\n    vibrateTimingsMillis: 'vibrate_timings',\n    defaultVibrateTimings: 'default_vibrate_timings',\n    defaultSound: 'default_sound',\n    lightSettings: 'light_settings',\n    defaultLightSettings: 'default_light_settings',\n    notificationCount: 'notification_count'\n  };\n  (0, index_1.renameProperties)(notification, propertyMappings);\n}\n/**\n * Checks if the given LightSettings object is valid. The object must have valid color and\n * light on/off duration parameters. If successful, transforms the input object by renaming\n * keys to valid Android keys.\n *\n * @param {LightSettings} lightSettings An object to be validated.\n */\nfunction validateLightSettings(lightSettings) {\n  if (typeof lightSettings === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(lightSettings)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.lightSettings must be a non-null object');\n  }\n  if (!validator.isNumber(lightSettings.lightOnDurationMillis) || lightSettings.lightOnDurationMillis < 0) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.lightSettings.lightOnDurationMillis must be a non-negative duration in milliseconds');\n  }\n  const durationOn = (0, index_1.transformMillisecondsToSecondsString)(lightSettings.lightOnDurationMillis);\n  lightSettings.lightOnDurationMillis = durationOn;\n  if (!validator.isNumber(lightSettings.lightOffDurationMillis) || lightSettings.lightOffDurationMillis < 0) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.lightSettings.lightOffDurationMillis must be a non-negative duration in milliseconds');\n  }\n  const durationOff = (0, index_1.transformMillisecondsToSecondsString)(lightSettings.lightOffDurationMillis);\n  lightSettings.lightOffDurationMillis = durationOff;\n  if (!validator.isString(lightSettings.color) || !/^#[0-9a-fA-F]{6}$/.test(lightSettings.color) && !/^#[0-9a-fA-F]{8}$/.test(lightSettings.color)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.lightSettings.color must be in the form #RRGGBB or #RRGGBBAA format');\n  }\n  const colorString = lightSettings.color.length === 7 ? lightSettings.color + 'FF' : lightSettings.color;\n  const rgb = /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/i.exec(colorString);\n  if (!rgb || rgb.length < 4) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INTERNAL_ERROR, 'regex to extract rgba values from ' + colorString + ' failed.');\n  }\n  const color = {\n    red: parseInt(rgb[1], 16) / 255.0,\n    green: parseInt(rgb[2], 16) / 255.0,\n    blue: parseInt(rgb[3], 16) / 255.0,\n    alpha: parseInt(rgb[4], 16) / 255.0\n  };\n  lightSettings.color = color;\n  const propertyMappings = {\n    lightOnDurationMillis: 'light_on_duration',\n    lightOffDurationMillis: 'light_off_duration'\n  };\n  (0, index_1.renameProperties)(lightSettings, propertyMappings);\n}\n/**\n * Checks if the given AndroidFcmOptions object is valid.\n *\n * @param {AndroidFcmOptions} fcmOptions An object to be validated.\n */\nfunction validateAndroidFcmOptions(fcmOptions) {\n  if (typeof fcmOptions === 'undefined') {\n    return;\n  } else if (!validator.isNonNullObject(fcmOptions)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'fcmOptions must be a non-null object');\n  }\n  if (typeof fcmOptions.analyticsLabel !== 'undefined' && !validator.isString(fcmOptions.analyticsLabel)) {\n    throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'analyticsLabel must be a string value');\n  }\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","validateMessage","BLACKLISTED_OPTIONS_KEYS","BLACKLISTED_DATA_PAYLOAD_KEYS","index_1","require","error_1","validator","message","isNonNullObject","FirebaseMessagingError","MessagingClientErrorCode","INVALID_PAYLOAD","anyMessage","topic","startsWith","replace","test","targets","token","condition","filter","v","isNonEmptyString","length","validateStringMap","data","validateAndroidConfig","android","validateWebpushConfig","webpush","validateApnsConfig","apns","validateFcmOptions","fcmOptions","validateNotification","notification","map","label","keys","forEach","key","isString","config","headers","validateApnsPayload","payload","validateApnsFcmOptions","imageUrl","isURL","analyticsLabel","propertyMappings","renameProperties","validateAps","aps","validateApsAlert","alert","validateApsSound","sound","contentAvailable","mutableContent","threadId","name","volume","isNumber","soundObject","critical","apsAlert","isNonEmptyArray","locArgs","locKey","titleLocArgs","titleLocKey","subtitleLocArgs","subtitleLocKey","actionLocKey","launchImage","ttl","duration","transformMillisecondsToSecondsString","validateAndroidNotification","validateAndroidFcmOptions","collapseKey","restrictedPackageName","color","bodyLocArgs","bodyLocKey","eventTimestamp","Date","zuluTimestamp","toISOString","vibrateTimingsMillis","vibrateTimings","push","priority","toUpperCase","visibility","validateLightSettings","lightSettings","clickAction","channelId","localOnly","defaultVibrateTimings","defaultSound","defaultLightSettings","notificationCount","lightOnDurationMillis","durationOn","lightOffDurationMillis","durationOff","colorString","rgb","exec","INTERNAL_ERROR","red","parseInt","green","blue","alpha"],"sources":["D:/Coding/React/taskmybusiness/node_modules/firebase-admin/lib/messaging/messaging-internal.js"],"sourcesContent":["/*! firebase-admin v11.9.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateMessage = exports.BLACKLISTED_OPTIONS_KEYS = exports.BLACKLISTED_DATA_PAYLOAD_KEYS = void 0;\nconst index_1 = require(\"../utils/index\");\nconst error_1 = require(\"../utils/error\");\nconst validator = require(\"../utils/validator\");\n// Keys which are not allowed in the messaging data payload object.\nexports.BLACKLISTED_DATA_PAYLOAD_KEYS = ['from'];\n// Keys which are not allowed in the messaging options object.\nexports.BLACKLISTED_OPTIONS_KEYS = [\n    'condition', 'data', 'notification', 'registrationIds', 'registration_ids', 'to',\n];\n/**\n * Checks if the given Message object is valid. Recursively validates all the child objects\n * included in the message (android, apns, data etc.). If successful, transforms the message\n * in place by renaming the keys to what's expected by the remote FCM service.\n *\n * @param {Message} Message An object to be validated.\n */\nfunction validateMessage(message) {\n    if (!validator.isNonNullObject(message)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Message must be a non-null object');\n    }\n    const anyMessage = message;\n    if (anyMessage.topic) {\n        // If the topic name is prefixed, remove it.\n        if (anyMessage.topic.startsWith('/topics/')) {\n            anyMessage.topic = anyMessage.topic.replace(/^\\/topics\\//, '');\n        }\n        // Checks for illegal characters and empty string.\n        if (!/^[a-zA-Z0-9-_.~%]+$/.test(anyMessage.topic)) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Malformed topic name');\n        }\n    }\n    const targets = [anyMessage.token, anyMessage.topic, anyMessage.condition];\n    if (targets.filter((v) => validator.isNonEmptyString(v)).length !== 1) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'Exactly one of topic, token or condition is required');\n    }\n    validateStringMap(message.data, 'data');\n    validateAndroidConfig(message.android);\n    validateWebpushConfig(message.webpush);\n    validateApnsConfig(message.apns);\n    validateFcmOptions(message.fcmOptions);\n    validateNotification(message.notification);\n}\nexports.validateMessage = validateMessage;\n/**\n * Checks if the given object only contains strings as child values.\n *\n * @param {object} map An object to be validated.\n * @param {string} label A label to be included in the errors thrown.\n */\nfunction validateStringMap(map, label) {\n    if (typeof map === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(map)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `${label} must be a non-null object`);\n    }\n    Object.keys(map).forEach((key) => {\n        if (!validator.isString(map[key])) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `${label} must only contain string values`);\n        }\n    });\n}\n/**\n * Checks if the given WebpushConfig object is valid. The object must have valid headers and data.\n *\n * @param {WebpushConfig} config An object to be validated.\n */\nfunction validateWebpushConfig(config) {\n    if (typeof config === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(config)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'webpush must be a non-null object');\n    }\n    validateStringMap(config.headers, 'webpush.headers');\n    validateStringMap(config.data, 'webpush.data');\n}\n/**\n * Checks if the given ApnsConfig object is valid. The object must have valid headers and a\n * payload.\n *\n * @param {ApnsConfig} config An object to be validated.\n */\nfunction validateApnsConfig(config) {\n    if (typeof config === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(config)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns must be a non-null object');\n    }\n    validateStringMap(config.headers, 'apns.headers');\n    validateApnsPayload(config.payload);\n    validateApnsFcmOptions(config.fcmOptions);\n}\n/**\n * Checks if the given ApnsFcmOptions object is valid.\n *\n * @param {ApnsFcmOptions} fcmOptions An object to be validated.\n */\nfunction validateApnsFcmOptions(fcmOptions) {\n    if (typeof fcmOptions === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(fcmOptions)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'fcmOptions must be a non-null object');\n    }\n    if (typeof fcmOptions.imageUrl !== 'undefined' &&\n        !validator.isURL(fcmOptions.imageUrl)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'imageUrl must be a valid URL string');\n    }\n    if (typeof fcmOptions.analyticsLabel !== 'undefined' && !validator.isString(fcmOptions.analyticsLabel)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'analyticsLabel must be a string value');\n    }\n    const propertyMappings = {\n        imageUrl: 'image',\n    };\n    Object.keys(propertyMappings).forEach((key) => {\n        if (key in fcmOptions && propertyMappings[key] in fcmOptions) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `Multiple specifications for ${key} in ApnsFcmOptions`);\n        }\n    });\n    (0, index_1.renameProperties)(fcmOptions, propertyMappings);\n}\n/**\n * Checks if the given FcmOptions object is valid.\n *\n * @param {FcmOptions} fcmOptions An object to be validated.\n */\nfunction validateFcmOptions(fcmOptions) {\n    if (typeof fcmOptions === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(fcmOptions)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'fcmOptions must be a non-null object');\n    }\n    if (typeof fcmOptions.analyticsLabel !== 'undefined' && !validator.isString(fcmOptions.analyticsLabel)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'analyticsLabel must be a string value');\n    }\n}\n/**\n * Checks if the given Notification object is valid.\n *\n * @param {Notification} notification An object to be validated.\n */\nfunction validateNotification(notification) {\n    if (typeof notification === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(notification)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'notification must be a non-null object');\n    }\n    if (typeof notification.imageUrl !== 'undefined' && !validator.isURL(notification.imageUrl)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'notification.imageUrl must be a valid URL string');\n    }\n    const propertyMappings = {\n        imageUrl: 'image',\n    };\n    Object.keys(propertyMappings).forEach((key) => {\n        if (key in notification && propertyMappings[key] in notification) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `Multiple specifications for ${key} in Notification`);\n        }\n    });\n    (0, index_1.renameProperties)(notification, propertyMappings);\n}\n/**\n * Checks if the given ApnsPayload object is valid. The object must have a valid aps value.\n *\n * @param {ApnsPayload} payload An object to be validated.\n */\nfunction validateApnsPayload(payload) {\n    if (typeof payload === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(payload)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload must be a non-null object');\n    }\n    validateAps(payload.aps);\n}\n/**\n * Checks if the given Aps object is valid. The object must have a valid alert. If the validation\n * is successful, transforms the input object by renaming the keys to valid APNS payload keys.\n *\n * @param {Aps} aps An object to be validated.\n */\nfunction validateAps(aps) {\n    if (typeof aps === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(aps)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps must be a non-null object');\n    }\n    validateApsAlert(aps.alert);\n    validateApsSound(aps.sound);\n    const propertyMappings = {\n        contentAvailable: 'content-available',\n        mutableContent: 'mutable-content',\n        threadId: 'thread-id',\n    };\n    Object.keys(propertyMappings).forEach((key) => {\n        if (key in aps && propertyMappings[key] in aps) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, `Multiple specifications for ${key} in Aps`);\n        }\n    });\n    (0, index_1.renameProperties)(aps, propertyMappings);\n    const contentAvailable = aps['content-available'];\n    if (typeof contentAvailable !== 'undefined' && contentAvailable !== 1) {\n        if (contentAvailable === true) {\n            aps['content-available'] = 1;\n        }\n        else {\n            delete aps['content-available'];\n        }\n    }\n    const mutableContent = aps['mutable-content'];\n    if (typeof mutableContent !== 'undefined' && mutableContent !== 1) {\n        if (mutableContent === true) {\n            aps['mutable-content'] = 1;\n        }\n        else {\n            delete aps['mutable-content'];\n        }\n    }\n}\nfunction validateApsSound(sound) {\n    if (typeof sound === 'undefined' || validator.isNonEmptyString(sound)) {\n        return;\n    }\n    else if (!validator.isNonNullObject(sound)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.sound must be a non-empty string or a non-null object');\n    }\n    if (!validator.isNonEmptyString(sound.name)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.sound.name must be a non-empty string');\n    }\n    const volume = sound.volume;\n    if (typeof volume !== 'undefined') {\n        if (!validator.isNumber(volume)) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.sound.volume must be a number');\n        }\n        if (volume < 0 || volume > 1) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.sound.volume must be in the interval [0, 1]');\n        }\n    }\n    const soundObject = sound;\n    const key = 'critical';\n    const critical = soundObject[key];\n    if (typeof critical !== 'undefined' && critical !== 1) {\n        if (critical === true) {\n            soundObject[key] = 1;\n        }\n        else {\n            delete soundObject[key];\n        }\n    }\n}\n/**\n * Checks if the given alert object is valid. Alert could be a string or a complex object.\n * If specified as an object, it must have valid localization parameters. If successful, transforms\n * the input object by renaming the keys to valid APNS payload keys.\n *\n * @param {string | ApsAlert} alert An alert string or an object to be validated.\n */\nfunction validateApsAlert(alert) {\n    if (typeof alert === 'undefined' || validator.isString(alert)) {\n        return;\n    }\n    else if (!validator.isNonNullObject(alert)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.alert must be a string or a non-null object');\n    }\n    const apsAlert = alert;\n    if (validator.isNonEmptyArray(apsAlert.locArgs) &&\n        !validator.isNonEmptyString(apsAlert.locKey)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.alert.locKey is required when specifying locArgs');\n    }\n    if (validator.isNonEmptyArray(apsAlert.titleLocArgs) &&\n        !validator.isNonEmptyString(apsAlert.titleLocKey)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.alert.titleLocKey is required when specifying titleLocArgs');\n    }\n    if (validator.isNonEmptyArray(apsAlert.subtitleLocArgs) &&\n        !validator.isNonEmptyString(apsAlert.subtitleLocKey)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'apns.payload.aps.alert.subtitleLocKey is required when specifying subtitleLocArgs');\n    }\n    const propertyMappings = {\n        locKey: 'loc-key',\n        locArgs: 'loc-args',\n        titleLocKey: 'title-loc-key',\n        titleLocArgs: 'title-loc-args',\n        subtitleLocKey: 'subtitle-loc-key',\n        subtitleLocArgs: 'subtitle-loc-args',\n        actionLocKey: 'action-loc-key',\n        launchImage: 'launch-image',\n    };\n    (0, index_1.renameProperties)(apsAlert, propertyMappings);\n}\n/**\n * Checks if the given AndroidConfig object is valid. The object must have valid ttl, data,\n * and notification fields. If successful, transforms the input object by renaming keys to valid\n * Android keys. Also transforms the ttl value to the format expected by FCM service.\n *\n * @param config - An object to be validated.\n */\nfunction validateAndroidConfig(config) {\n    if (typeof config === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(config)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android must be a non-null object');\n    }\n    if (typeof config.ttl !== 'undefined') {\n        if (!validator.isNumber(config.ttl) || config.ttl < 0) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'TTL must be a non-negative duration in milliseconds');\n        }\n        const duration = (0, index_1.transformMillisecondsToSecondsString)(config.ttl);\n        config.ttl = duration;\n    }\n    validateStringMap(config.data, 'android.data');\n    validateAndroidNotification(config.notification);\n    validateAndroidFcmOptions(config.fcmOptions);\n    const propertyMappings = {\n        collapseKey: 'collapse_key',\n        restrictedPackageName: 'restricted_package_name',\n    };\n    (0, index_1.renameProperties)(config, propertyMappings);\n}\n/**\n * Checks if the given AndroidNotification object is valid. The object must have valid color and\n * localization parameters. If successful, transforms the input object by renaming keys to valid\n * Android keys.\n *\n * @param {AndroidNotification} notification An object to be validated.\n */\nfunction validateAndroidNotification(notification) {\n    if (typeof notification === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(notification)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification must be a non-null object');\n    }\n    if (typeof notification.color !== 'undefined' && !/^#[0-9a-fA-F]{6}$/.test(notification.color)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.color must be in the form #RRGGBB');\n    }\n    if (validator.isNonEmptyArray(notification.bodyLocArgs) &&\n        !validator.isNonEmptyString(notification.bodyLocKey)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.bodyLocKey is required when specifying bodyLocArgs');\n    }\n    if (validator.isNonEmptyArray(notification.titleLocArgs) &&\n        !validator.isNonEmptyString(notification.titleLocKey)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.titleLocKey is required when specifying titleLocArgs');\n    }\n    if (typeof notification.imageUrl !== 'undefined' &&\n        !validator.isURL(notification.imageUrl)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.imageUrl must be a valid URL string');\n    }\n    if (typeof notification.eventTimestamp !== 'undefined') {\n        if (!(notification.eventTimestamp instanceof Date)) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.eventTimestamp must be a valid `Date` object');\n        }\n        // Convert timestamp to RFC3339 UTC \"Zulu\" format, example \"2014-10-02T15:01:23.045123456Z\"\n        const zuluTimestamp = notification.eventTimestamp.toISOString();\n        notification.eventTimestamp = zuluTimestamp;\n    }\n    if (typeof notification.vibrateTimingsMillis !== 'undefined') {\n        if (!validator.isNonEmptyArray(notification.vibrateTimingsMillis)) {\n            throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.vibrateTimingsMillis must be a non-empty array of numbers');\n        }\n        const vibrateTimings = [];\n        notification.vibrateTimingsMillis.forEach((value) => {\n            if (!validator.isNumber(value) || value < 0) {\n                throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.vibrateTimingsMillis must be non-negative durations in milliseconds');\n            }\n            const duration = (0, index_1.transformMillisecondsToSecondsString)(value);\n            vibrateTimings.push(duration);\n        });\n        notification.vibrateTimingsMillis = vibrateTimings;\n    }\n    if (typeof notification.priority !== 'undefined') {\n        const priority = 'PRIORITY_' + notification.priority.toUpperCase();\n        notification.priority = priority;\n    }\n    if (typeof notification.visibility !== 'undefined') {\n        const visibility = notification.visibility.toUpperCase();\n        notification.visibility = visibility;\n    }\n    validateLightSettings(notification.lightSettings);\n    const propertyMappings = {\n        clickAction: 'click_action',\n        bodyLocKey: 'body_loc_key',\n        bodyLocArgs: 'body_loc_args',\n        titleLocKey: 'title_loc_key',\n        titleLocArgs: 'title_loc_args',\n        channelId: 'channel_id',\n        imageUrl: 'image',\n        eventTimestamp: 'event_time',\n        localOnly: 'local_only',\n        priority: 'notification_priority',\n        vibrateTimingsMillis: 'vibrate_timings',\n        defaultVibrateTimings: 'default_vibrate_timings',\n        defaultSound: 'default_sound',\n        lightSettings: 'light_settings',\n        defaultLightSettings: 'default_light_settings',\n        notificationCount: 'notification_count',\n    };\n    (0, index_1.renameProperties)(notification, propertyMappings);\n}\n/**\n * Checks if the given LightSettings object is valid. The object must have valid color and\n * light on/off duration parameters. If successful, transforms the input object by renaming\n * keys to valid Android keys.\n *\n * @param {LightSettings} lightSettings An object to be validated.\n */\nfunction validateLightSettings(lightSettings) {\n    if (typeof lightSettings === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(lightSettings)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.lightSettings must be a non-null object');\n    }\n    if (!validator.isNumber(lightSettings.lightOnDurationMillis) || lightSettings.lightOnDurationMillis < 0) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.lightSettings.lightOnDurationMillis must be a non-negative duration in milliseconds');\n    }\n    const durationOn = (0, index_1.transformMillisecondsToSecondsString)(lightSettings.lightOnDurationMillis);\n    lightSettings.lightOnDurationMillis = durationOn;\n    if (!validator.isNumber(lightSettings.lightOffDurationMillis) || lightSettings.lightOffDurationMillis < 0) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.lightSettings.lightOffDurationMillis must be a non-negative duration in milliseconds');\n    }\n    const durationOff = (0, index_1.transformMillisecondsToSecondsString)(lightSettings.lightOffDurationMillis);\n    lightSettings.lightOffDurationMillis = durationOff;\n    if (!validator.isString(lightSettings.color) ||\n        (!/^#[0-9a-fA-F]{6}$/.test(lightSettings.color) && !/^#[0-9a-fA-F]{8}$/.test(lightSettings.color))) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'android.notification.lightSettings.color must be in the form #RRGGBB or #RRGGBBAA format');\n    }\n    const colorString = lightSettings.color.length === 7 ? lightSettings.color + 'FF' : lightSettings.color;\n    const rgb = /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/i.exec(colorString);\n    if (!rgb || rgb.length < 4) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INTERNAL_ERROR, 'regex to extract rgba values from ' + colorString + ' failed.');\n    }\n    const color = {\n        red: parseInt(rgb[1], 16) / 255.0,\n        green: parseInt(rgb[2], 16) / 255.0,\n        blue: parseInt(rgb[3], 16) / 255.0,\n        alpha: parseInt(rgb[4], 16) / 255.0,\n    };\n    lightSettings.color = color;\n    const propertyMappings = {\n        lightOnDurationMillis: 'light_on_duration',\n        lightOffDurationMillis: 'light_off_duration',\n    };\n    (0, index_1.renameProperties)(lightSettings, propertyMappings);\n}\n/**\n * Checks if the given AndroidFcmOptions object is valid.\n *\n * @param {AndroidFcmOptions} fcmOptions An object to be validated.\n */\nfunction validateAndroidFcmOptions(fcmOptions) {\n    if (typeof fcmOptions === 'undefined') {\n        return;\n    }\n    else if (!validator.isNonNullObject(fcmOptions)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'fcmOptions must be a non-null object');\n    }\n    if (typeof fcmOptions.analyticsLabel !== 'undefined' && !validator.isString(fcmOptions.analyticsLabel)) {\n        throw new error_1.FirebaseMessagingError(error_1.MessagingClientErrorCode.INVALID_PAYLOAD, 'analyticsLabel must be a string value');\n    }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}