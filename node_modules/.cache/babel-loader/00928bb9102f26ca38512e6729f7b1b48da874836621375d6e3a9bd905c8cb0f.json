{"ast":null,"code":"import { inRange, decoderError, end_of_stream, finished, convertCodeUnitToBytes } from '../utils';\n\n// 15.2.1 shared utf-16 decoder\n\n/**\n * @implements {Decoder}\n */\nexport class UTF16Decoder {\n  /**\n   * @param {boolean} utf16_be True if big-endian, false if little-endian.\n   * @param {{fatal: boolean}} options\n   */\n  constructor(utf16_be, options) {\n    const {\n      fatal\n    } = options;\n    this.utf16_be = utf16_be;\n    this.fatal = fatal;\n    this.utf16_lead_byte = null;\n    this.utf16_lead_surrogate = null;\n  }\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   */\n  handler(stream, bite) {\n    // 1. If byte is end-of-stream and either utf-16 lead byte or\n    // utf-16 lead surrogate is not null, set utf-16 lead byte and\n    // utf-16 lead surrogate to null, and return error.\n    if (bite === end_of_stream && (this.utf16_lead_byte !== null || this.utf16_lead_surrogate !== null)) {\n      return decoderError(this.fatal);\n    }\n\n    // 2. If byte is end-of-stream and utf-16 lead byte and utf-16\n    // lead surrogate are null, return finished.\n    if (bite === end_of_stream && this.utf16_lead_byte === null && this.utf16_lead_surrogate === null) {\n      return finished;\n    }\n\n    // 3. If utf-16 lead byte is null, set utf-16 lead byte to byte\n    // and return continue.\n    if (this.utf16_lead_byte === null) {\n      this.utf16_lead_byte = bite;\n      return null;\n    }\n\n    // 4. Let code unit be the result of:\n    let code_unit;\n    if (this.utf16_be) {\n      // utf-16be decoder flag is set\n      //   (utf-16 lead byte << 8) + byte.\n      code_unit = (this.utf16_lead_byte << 8) + bite;\n    } else {\n      // utf-16be decoder flag is unset\n      //   (byte << 8) + utf-16 lead byte.\n      code_unit = (bite << 8) + this.utf16_lead_byte;\n    }\n    // Then set utf-16 lead byte to null.\n    this.utf16_lead_byte = null;\n\n    // 5. If utf-16 lead surrogate is not null, let lead surrogate\n    // be utf-16 lead surrogate, set utf-16 lead surrogate to null,\n    // and then run these substeps:\n    if (this.utf16_lead_surrogate !== null) {\n      const lead_surrogate = this.utf16_lead_surrogate;\n      this.utf16_lead_surrogate = null;\n\n      // 1. If code unit is in the range U+DC00 to U+DFFF,\n      // inclusive, return a code point whose value is 0x10000 +\n      // ((lead surrogate − 0xD800) << 10) + (code unit − 0xDC00).\n      if (inRange(code_unit, 0xDC00, 0xDFFF)) {\n        return 0x10000 + (lead_surrogate - 0xD800) * 0x400 + (code_unit - 0xDC00);\n      }\n\n      // 2. Prepend the sequence resulting of converting code unit\n      // to bytes using utf-16be decoder flag to stream and return\n      // error.\n      stream.prepend(convertCodeUnitToBytes(code_unit, this.utf16_be));\n      return decoderError(this.fatal);\n    }\n\n    // 6. If code unit is in the range U+D800 to U+DBFF, inclusive,\n    // set utf-16 lead surrogate to code unit and return continue.\n    if (inRange(code_unit, 0xD800, 0xDBFF)) {\n      this.utf16_lead_surrogate = code_unit;\n      return null;\n    }\n\n    // 7. If code unit is in the range U+DC00 to U+DFFF, inclusive,\n    // return error.\n    if (inRange(code_unit, 0xDC00, 0xDFFF)) return decoderError(this.fatal);\n\n    // 8. Return code point code unit.\n    return code_unit;\n  }\n}\n\n// 15.2.2 shared utf-16 encoder\n/**\n * @implements {Encoder}\n */\nexport class UTF16Encoder {\n  /**\n   * @param {boolean} [utf16_be] True if big-endian, false if little-endian.\n   */\n  constructor() {\n    let utf16_be = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n    this.utf16_be = utf16_be;\n  }\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   */\n  handler(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream) return finished;\n\n    // 2. If code point is in the range U+0000 to U+FFFF, inclusive,\n    // return the sequence resulting of converting code point to\n    // bytes using utf-16be encoder flag.\n    if (inRange(code_point, 0x0000, 0xFFFF)) return convertCodeUnitToBytes(code_point, this.utf16_be);\n\n    // 3. Let lead be ((code point − 0x10000) >> 10) + 0xD800,\n    // converted to bytes using utf-16be encoder flag.\n    const lead = convertCodeUnitToBytes((code_point - 0x10000 >> 10) + 0xD800, this.utf16_be);\n\n    // 4. Let trail be ((code point − 0x10000) & 0x3FF) + 0xDC00,\n    // converted to bytes using utf-16be encoder flag.\n    const trail = convertCodeUnitToBytes((code_point - 0x10000 & 0x3FF) + 0xDC00, this.utf16_be);\n\n    // 5. Return a byte sequence of lead followed by trail.\n    return lead.concat(trail);\n  }\n}","map":{"version":3,"names":["inRange","decoderError","end_of_stream","finished","convertCodeUnitToBytes","UTF16Decoder","constructor","utf16_be","options","fatal","utf16_lead_byte","utf16_lead_surrogate","handler","stream","bite","code_unit","lead_surrogate","prepend","UTF16Encoder","arguments","length","undefined","code_point","lead","trail","concat"],"sources":["D:/Coding/React/taskmybusiness/node_modules/text-decoding/src/implementations/utf16.js"],"sourcesContent":["import { inRange, decoderError, end_of_stream, finished, convertCodeUnitToBytes } from '../utils'\n\n// 15.2.1 shared utf-16 decoder\n\n/**\n * @implements {Decoder}\n */\nexport class UTF16Decoder {\n  /**\n   * @param {boolean} utf16_be True if big-endian, false if little-endian.\n   * @param {{fatal: boolean}} options\n   */\n  constructor(utf16_be, options) {\n    const { fatal } = options\n    this.utf16_be = utf16_be\n    this.fatal = fatal\n    this.utf16_lead_byte = null\n    this.utf16_lead_surrogate = null\n  }\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   */\n  handler(stream, bite) {\n  // 1. If byte is end-of-stream and either utf-16 lead byte or\n  // utf-16 lead surrogate is not null, set utf-16 lead byte and\n  // utf-16 lead surrogate to null, and return error.\n    if (bite === end_of_stream && (this.utf16_lead_byte !== null ||\n                            this.utf16_lead_surrogate !== null)) {\n      return decoderError(this.fatal)\n    }\n\n    // 2. If byte is end-of-stream and utf-16 lead byte and utf-16\n    // lead surrogate are null, return finished.\n    if (bite === end_of_stream && this.utf16_lead_byte === null &&\n      this.utf16_lead_surrogate === null) {\n      return finished\n    }\n\n    // 3. If utf-16 lead byte is null, set utf-16 lead byte to byte\n    // and return continue.\n    if (this.utf16_lead_byte === null) {\n      this.utf16_lead_byte = bite\n      return null\n    }\n\n    // 4. Let code unit be the result of:\n    let code_unit\n    if (this.utf16_be) {\n    // utf-16be decoder flag is set\n    //   (utf-16 lead byte << 8) + byte.\n      code_unit = (this.utf16_lead_byte << 8) + bite\n    } else {\n    // utf-16be decoder flag is unset\n    //   (byte << 8) + utf-16 lead byte.\n      code_unit = (bite << 8) + this.utf16_lead_byte\n    }\n    // Then set utf-16 lead byte to null.\n    this.utf16_lead_byte = null\n\n    // 5. If utf-16 lead surrogate is not null, let lead surrogate\n    // be utf-16 lead surrogate, set utf-16 lead surrogate to null,\n    // and then run these substeps:\n    if (this.utf16_lead_surrogate !== null) {\n      const lead_surrogate = this.utf16_lead_surrogate\n      this.utf16_lead_surrogate = null\n\n      // 1. If code unit is in the range U+DC00 to U+DFFF,\n      // inclusive, return a code point whose value is 0x10000 +\n      // ((lead surrogate − 0xD800) << 10) + (code unit − 0xDC00).\n      if (inRange(code_unit, 0xDC00, 0xDFFF)) {\n        return 0x10000 + (lead_surrogate - 0xD800) * 0x400 +\n          (code_unit - 0xDC00)\n      }\n\n      // 2. Prepend the sequence resulting of converting code unit\n      // to bytes using utf-16be decoder flag to stream and return\n      // error.\n      stream.prepend(convertCodeUnitToBytes(code_unit, this.utf16_be))\n      return decoderError(this.fatal)\n    }\n\n    // 6. If code unit is in the range U+D800 to U+DBFF, inclusive,\n    // set utf-16 lead surrogate to code unit and return continue.\n    if (inRange(code_unit, 0xD800, 0xDBFF)) {\n      this.utf16_lead_surrogate = code_unit\n      return null\n    }\n\n    // 7. If code unit is in the range U+DC00 to U+DFFF, inclusive,\n    // return error.\n    if (inRange(code_unit, 0xDC00, 0xDFFF))\n      return decoderError(this.fatal)\n\n    // 8. Return code point code unit.\n    return code_unit\n  }\n}\n\n// 15.2.2 shared utf-16 encoder\n/**\n * @implements {Encoder}\n */\nexport class UTF16Encoder {\n  /**\n   * @param {boolean} [utf16_be] True if big-endian, false if little-endian.\n   */\n  constructor(utf16_be = false) {\n    this.utf16_be = utf16_be\n  }\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   */\n  handler(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished\n\n    // 2. If code point is in the range U+0000 to U+FFFF, inclusive,\n    // return the sequence resulting of converting code point to\n    // bytes using utf-16be encoder flag.\n    if (inRange(code_point, 0x0000, 0xFFFF))\n      return convertCodeUnitToBytes(code_point, this.utf16_be)\n\n    // 3. Let lead be ((code point − 0x10000) >> 10) + 0xD800,\n    // converted to bytes using utf-16be encoder flag.\n    const lead = convertCodeUnitToBytes(\n      ((code_point - 0x10000) >> 10) + 0xD800, this.utf16_be)\n\n    // 4. Let trail be ((code point − 0x10000) & 0x3FF) + 0xDC00,\n    // converted to bytes using utf-16be encoder flag.\n    const trail = convertCodeUnitToBytes(\n      ((code_point - 0x10000) & 0x3FF) + 0xDC00, this.utf16_be)\n\n    // 5. Return a byte sequence of lead followed by trail.\n    return lead.concat(trail)\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}