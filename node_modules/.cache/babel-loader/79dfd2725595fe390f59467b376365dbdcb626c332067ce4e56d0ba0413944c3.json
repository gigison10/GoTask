{"ast":null,"code":"\"use strict\";\n\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AclRoleAccessorMethods = exports.Acl = void 0;\nconst promisify_1 = require(\"@google-cloud/promisify\");\n/**\n * Attach functionality to a {@link Storage.acl} instance. This will add an\n * object for each role group (owners, readers, and writers), with each object\n * containing methods to add or delete a type of entity.\n *\n * As an example, here are a few methods that are created.\n *\n *   myBucket.acl.readers.deleteGroup('groupId', function(err) {});\n *\n *   myBucket.acl.owners.addUser('email@example.com', function(err, acl) {});\n *\n *   myBucket.acl.writers.addDomain('example.com', function(err, acl) {});\n *\n * @private\n */\nclass AclRoleAccessorMethods {\n  constructor() {\n    this.owners = {};\n    this.readers = {};\n    this.writers = {};\n    /**\n     * An object of convenience methods to add or delete owner ACL permissions\n     * for a given entity.\n     *\n     * The supported methods include:\n     *\n     *   - `myFile.acl.owners.addAllAuthenticatedUsers`\n     *   - `myFile.acl.owners.deleteAllAuthenticatedUsers`\n     *   - `myFile.acl.owners.addAllUsers`\n     *   - `myFile.acl.owners.deleteAllUsers`\n     *   - `myFile.acl.owners.addDomain`\n     *   - `myFile.acl.owners.deleteDomain`\n     *   - `myFile.acl.owners.addGroup`\n     *   - `myFile.acl.owners.deleteGroup`\n     *   - `myFile.acl.owners.addProject`\n     *   - `myFile.acl.owners.deleteProject`\n     *   - `myFile.acl.owners.addUser`\n     *   - `myFile.acl.owners.deleteUser`\n     *\n     * @name Acl#owners\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const myBucket = storage.bucket('my-bucket');\n     * const myFile = myBucket.file('my-file');\n     *\n     * //-\n     * // Add a user as an owner of a file.\n     * //-\n     * const myBucket = gcs.bucket('my-bucket');\n     * const myFile = myBucket.file('my-file');\n     * myFile.acl.owners.addUser('email@example.com', function(err, aclObject)\n     * {});\n     *\n     * //-\n     * // For reference, the above command is the same as running the following.\n     * //-\n     * myFile.acl.add({\n     *   entity: 'user-email@example.com',\n     *   role: gcs.acl.OWNER_ROLE\n     * }, function(err, aclObject) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * myFile.acl.owners.addUser('email@example.com').then(function(data) {\n     *   const aclObject = data[0];\n     *   const apiResponse = data[1];\n     * });\n     * ```\n     */\n    this.owners = {};\n    /**\n     * An object of convenience methods to add or delete reader ACL permissions\n     * for a given entity.\n     *\n     * The supported methods include:\n     *\n     *   - `myFile.acl.readers.addAllAuthenticatedUsers`\n     *   - `myFile.acl.readers.deleteAllAuthenticatedUsers`\n     *   - `myFile.acl.readers.addAllUsers`\n     *   - `myFile.acl.readers.deleteAllUsers`\n     *   - `myFile.acl.readers.addDomain`\n     *   - `myFile.acl.readers.deleteDomain`\n     *   - `myFile.acl.readers.addGroup`\n     *   - `myFile.acl.readers.deleteGroup`\n     *   - `myFile.acl.readers.addProject`\n     *   - `myFile.acl.readers.deleteProject`\n     *   - `myFile.acl.readers.addUser`\n     *   - `myFile.acl.readers.deleteUser`\n     *\n     * @name Acl#readers\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const myBucket = storage.bucket('my-bucket');\n     * const myFile = myBucket.file('my-file');\n     *\n     * //-\n     * // Add a user as a reader of a file.\n     * //-\n     * myFile.acl.readers.addUser('email@example.com', function(err, aclObject)\n     * {});\n     *\n     * //-\n     * // For reference, the above command is the same as running the following.\n     * //-\n     * myFile.acl.add({\n     *   entity: 'user-email@example.com',\n     *   role: gcs.acl.READER_ROLE\n     * }, function(err, aclObject) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * myFile.acl.readers.addUser('email@example.com').then(function(data) {\n     *   const aclObject = data[0];\n     *   const apiResponse = data[1];\n     * });\n     * ```\n     */\n    this.readers = {};\n    /**\n     * An object of convenience methods to add or delete writer ACL permissions\n     * for a given entity.\n     *\n     * The supported methods include:\n     *\n     *   - `myFile.acl.writers.addAllAuthenticatedUsers`\n     *   - `myFile.acl.writers.deleteAllAuthenticatedUsers`\n     *   - `myFile.acl.writers.addAllUsers`\n     *   - `myFile.acl.writers.deleteAllUsers`\n     *   - `myFile.acl.writers.addDomain`\n     *   - `myFile.acl.writers.deleteDomain`\n     *   - `myFile.acl.writers.addGroup`\n     *   - `myFile.acl.writers.deleteGroup`\n     *   - `myFile.acl.writers.addProject`\n     *   - `myFile.acl.writers.deleteProject`\n     *   - `myFile.acl.writers.addUser`\n     *   - `myFile.acl.writers.deleteUser`\n     *\n     * @name Acl#writers\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const myBucket = storage.bucket('my-bucket');\n     * const myFile = myBucket.file('my-file');\n     *\n     * //-\n     * // Add a user as a writer of a file.\n     * //-\n     * myFile.acl.writers.addUser('email@example.com', function(err, aclObject)\n     * {});\n     *\n     * //-\n     * // For reference, the above command is the same as running the following.\n     * //-\n     * myFile.acl.add({\n     *   entity: 'user-email@example.com',\n     *   role: gcs.acl.WRITER_ROLE\n     * }, function(err, aclObject) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * myFile.acl.writers.addUser('email@example.com').then(function(data) {\n     *   const aclObject = data[0];\n     *   const apiResponse = data[1];\n     * });\n     * ```\n     */\n    this.writers = {};\n    AclRoleAccessorMethods.roles.forEach(this._assignAccessMethods.bind(this));\n  }\n  _assignAccessMethods(role) {\n    const accessMethods = AclRoleAccessorMethods.accessMethods;\n    const entities = AclRoleAccessorMethods.entities;\n    const roleGroup = role.toLowerCase() + 's';\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this[roleGroup] = entities.reduce((acc, entity) => {\n      const isPrefix = entity.charAt(entity.length - 1) === '-';\n      accessMethods.forEach(accessMethod => {\n        let method = accessMethod + entity[0].toUpperCase() + entity.substring(1);\n        if (isPrefix) {\n          method = method.replace('-', '');\n        }\n        // Wrap the parent accessor method (e.g. `add` or `delete`) to avoid the\n        // more complex API of specifying an `entity` and `role`.\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        acc[method] = (entityId, options, callback) => {\n          let apiEntity;\n          if (typeof options === 'function') {\n            callback = options;\n            options = {};\n          }\n          if (isPrefix) {\n            apiEntity = entity + entityId;\n          } else {\n            // If the entity is not a prefix, it is a special entity group\n            // that does not require further details. The accessor methods\n            // only accept a callback.\n            apiEntity = entity;\n            callback = entityId;\n          }\n          options = Object.assign({\n            entity: apiEntity,\n            role\n          }, options);\n          const args = [options];\n          if (typeof callback === 'function') {\n            args.push(callback);\n          }\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n          return this[accessMethod].apply(this, args);\n        };\n      });\n      return acc;\n    }, {});\n  }\n}\nexports.AclRoleAccessorMethods = AclRoleAccessorMethods;\nAclRoleAccessorMethods.accessMethods = ['add', 'delete'];\nAclRoleAccessorMethods.entities = [\n// Special entity groups that do not require further specification.\n'allAuthenticatedUsers', 'allUsers',\n// Entity groups that require specification, e.g. `user-email@example.com`.\n'domain-', 'group-', 'project-', 'user-'];\nAclRoleAccessorMethods.roles = ['OWNER', 'READER', 'WRITER'];\n/**\n * Cloud Storage uses access control lists (ACLs) to manage object and\n * bucket access. ACLs are the mechanism you use to share objects with other\n * users and allow other users to access your buckets and objects.\n *\n * An ACL consists of one or more entries, where each entry grants permissions\n * to an entity. Permissions define the actions that can be performed against an\n * object or bucket (for example, `READ` or `WRITE`); the entity defines who the\n * permission applies to (for example, a specific user or group of users).\n *\n * Where an `entity` value is accepted, we follow the format the Cloud Storage\n * API expects.\n *\n * Refer to\n * https://cloud.google.com/storage/docs/json_api/v1/defaultObjectAccessControls\n * for the most up-to-date values.\n *\n *   - `user-userId`\n *   - `user-email`\n *   - `group-groupId`\n *   - `group-email`\n *   - `domain-domain`\n *   - `project-team-projectId`\n *   - `allUsers`\n *   - `allAuthenticatedUsers`\n *\n * Examples:\n *\n *   - The user \"liz@example.com\" would be `user-liz@example.com`.\n *   - The group \"example@googlegroups.com\" would be\n *     `group-example@googlegroups.com`.\n *   - To refer to all members of the Google Apps for Business domain\n *     \"example.com\", the entity would be `domain-example.com`.\n *\n * For more detailed information, see\n * {@link http://goo.gl/6qBBPO| About Access Control Lists}.\n *\n * @constructor Acl\n * @mixin\n * @param {object} options Configuration options.\n */\nclass Acl extends AclRoleAccessorMethods {\n  constructor(options) {\n    super();\n    this.pathPrefix = options.pathPrefix;\n    this.request_ = options.request;\n  }\n  /**\n   * @typedef {array} AddAclResponse\n   * @property {object} 0 The Acl Objects.\n   * @property {object} 1 The full API response.\n   */\n  /**\n   * @callback AddAclCallback\n   * @param {?Error} err Request error, if any.\n   * @param {object} acl The Acl Objects.\n   * @param {object} apiResponse The full API response.\n   */\n  /**\n   * Add access controls on a {@link Bucket} or {@link File}.\n   *\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/insert| BucketAccessControls: insert API Documentation}\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/insert| ObjectAccessControls: insert API Documentation}\n   *\n   * @param {object} options Configuration options.\n   * @param {string} options.entity Whose permissions will be added.\n   * @param {string} options.role Permissions allowed for the defined entity.\n   *     See {@link https://cloud.google.com/storage/docs/access-control Access\n   * Control}.\n   * @param {number} [options.generation] **File Objects Only** Select a specific\n   *     revision of this file (as opposed to the latest version, the default).\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {AddAclCallback} [callback] Callback function.\n   * @returns {Promise<AddAclResponse>}\n   *\n   * @example\n   * ```\n   * const storage = require('@google-cloud/storage')();\n   * const myBucket = storage.bucket('my-bucket');\n   * const myFile = myBucket.file('my-file');\n   *\n   * const options = {\n   *   entity: 'user-useremail@example.com',\n   *   role: gcs.acl.OWNER_ROLE\n   * };\n   *\n   * myBucket.acl.add(options, function(err, aclObject, apiResponse) {});\n   *\n   * //-\n   * // For file ACL operations, you can also specify a `generation` property.\n   * // Here is how you would grant ownership permissions to a user on a\n   * specific\n   * // revision of a file.\n   * //-\n   * myFile.acl.add({\n   *   entity: 'user-useremail@example.com',\n   *   role: gcs.acl.OWNER_ROLE,\n   *   generation: 1\n   * }, function(err, aclObject, apiResponse) {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * myBucket.acl.add(options).then(function(data) {\n   *   const aclObject = data[0];\n   *   const apiResponse = data[1];\n   * });\n   *\n   * ```\n   * @example <caption>include:samples/acl.js</caption>\n   * region_tag:storage_add_file_owner\n   * Example of adding an owner to a file:\n   *\n   * @example <caption>include:samples/acl.js</caption>\n   * region_tag:storage_add_bucket_owner\n   * Example of adding an owner to a bucket:\n   *\n   * @example <caption>include:samples/acl.js</caption>\n   * region_tag:storage_add_bucket_default_owner\n   * Example of adding a default owner to a bucket:\n   */\n  add(options, callback) {\n    const query = {};\n    if (options.generation) {\n      query.generation = options.generation;\n    }\n    if (options.userProject) {\n      query.userProject = options.userProject;\n    }\n    this.request({\n      method: 'POST',\n      uri: '',\n      qs: query,\n      maxRetries: 0,\n      json: {\n        entity: options.entity,\n        role: options.role.toUpperCase()\n      }\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n      callback(null, this.makeAclObject_(resp), resp);\n    });\n  }\n  /**\n   * @typedef {array} RemoveAclResponse\n   * @property {object} 0 The full API response.\n   */\n  /**\n   * @callback RemoveAclCallback\n   * @param {?Error} err Request error, if any.\n   * @param {object} apiResponse The full API response.\n   */\n  /**\n   * Delete access controls on a {@link Bucket} or {@link File}.\n   *\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/delete| BucketAccessControls: delete API Documentation}\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/delete| ObjectAccessControls: delete API Documentation}\n   *\n   * @param {object} options Configuration object.\n   * @param {string} options.entity Whose permissions will be revoked.\n   * @param {int} [options.generation] **File Objects Only** Select a specific\n   *     revision of this file (as opposed to the latest version, the default).\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {RemoveAclCallback} callback The callback function.\n   * @returns {Promise<RemoveAclResponse>}\n   *\n   * @example\n   * ```\n   * const storage = require('@google-cloud/storage')();\n   * const myBucket = storage.bucket('my-bucket');\n   * const myFile = myBucket.file('my-file');\n   *\n   * myBucket.acl.delete({\n   *   entity: 'user-useremail@example.com'\n   * }, function(err, apiResponse) {});\n   *\n   * //-\n   * // For file ACL operations, you can also specify a `generation` property.\n   * //-\n   * myFile.acl.delete({\n   *   entity: 'user-useremail@example.com',\n   *   generation: 1\n   * }, function(err, apiResponse) {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * myFile.acl.delete().then(function(data) {\n   *   const apiResponse = data[0];\n   * });\n   *\n   * ```\n   * @example <caption>include:samples/acl.js</caption>\n   * region_tag:storage_remove_bucket_owner\n   * Example of removing an owner from a bucket:\n   *\n   * @example <caption>include:samples/acl.js</caption>\n   * region_tag:storage_remove_bucket_default_owner\n   * Example of removing a default owner from a bucket:\n   *\n   * @example <caption>include:samples/acl.js</caption>\n   * region_tag:storage_remove_file_owner\n   * Example of removing an owner from a bucket:\n   */\n  delete(options, callback) {\n    const query = {};\n    if (options.generation) {\n      query.generation = options.generation;\n    }\n    if (options.userProject) {\n      query.userProject = options.userProject;\n    }\n    this.request({\n      method: 'DELETE',\n      uri: '/' + encodeURIComponent(options.entity),\n      qs: query\n    }, (err, resp) => {\n      callback(err, resp);\n    });\n  }\n  /**\n   * @typedef {array} GetAclResponse\n   * @property {object|object[]} 0 Single or array of Acl Objects.\n   * @property {object} 1 The full API response.\n   */\n  /**\n   * @callback GetAclCallback\n   * @param {?Error} err Request error, if any.\n   * @param {object|object[]} acl Single or array of Acl Objects.\n   * @param {object} apiResponse The full API response.\n   */\n  /**\n   * Get access controls on a {@link Bucket} or {@link File}. If\n   * an entity is omitted, you will receive an array of all applicable access\n   * controls.\n   *\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/get| BucketAccessControls: get API Documentation}\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/get| ObjectAccessControls: get API Documentation}\n   *\n   * @param {object|function} [options] Configuration options. If you want to\n   *     receive a list of all access controls, pass the callback function as\n   * the only argument.\n   * @param {string} options.entity Whose permissions will be fetched.\n   * @param {number} [options.generation] **File Objects Only** Select a specific\n   *     revision of this file (as opposed to the latest version, the default).\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {GetAclCallback} [callback] Callback function.\n   * @returns {Promise<GetAclResponse>}\n   *\n   * @example\n   * ```\n   * const storage = require('@google-cloud/storage')();\n   * const myBucket = storage.bucket('my-bucket');\n   * const myFile = myBucket.file('my-file');\n   *\n   * myBucket.acl.get({\n   *   entity: 'user-useremail@example.com'\n   * }, function(err, aclObject, apiResponse) {});\n   *\n   * //-\n   * // Get all access controls.\n   * //-\n   * myBucket.acl.get(function(err, aclObjects, apiResponse) {\n   *   // aclObjects = [\n   *   //   {\n   *   //     entity: 'user-useremail@example.com',\n   *   //     role: 'owner'\n   *   //   }\n   *   // ]\n   * });\n   *\n   * //-\n   * // For file ACL operations, you can also specify a `generation` property.\n   * //-\n   * myFile.acl.get({\n   *   entity: 'user-useremail@example.com',\n   *   generation: 1\n   * }, function(err, aclObject, apiResponse) {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * myBucket.acl.get().then(function(data) {\n   *   const aclObject = data[0];\n   *   const apiResponse = data[1];\n   * });\n   *\n   * ```\n   * @example <caption>include:samples/acl.js</caption>\n   * region_tag:storage_print_file_acl\n   * Example of printing a file's ACL:\n   *\n   * @example <caption>include:samples/acl.js</caption>\n   * region_tag:storage_print_file_acl_for_user\n   * Example of printing a file's ACL for a specific user:\n   *\n   * @example <caption>include:samples/acl.js</caption>\n   * region_tag:storage_print_bucket_acl\n   * Example of printing a bucket's ACL:\n   *\n   * @example <caption>include:samples/acl.js</caption>\n   * region_tag:storage_print_bucket_acl_for_user\n   * Example of printing a bucket's ACL for a specific user:\n   */\n  get(optionsOrCallback, cb) {\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : null;\n    const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n    let path = '';\n    const query = {};\n    if (options) {\n      path = '/' + encodeURIComponent(options.entity);\n      if (options.generation) {\n        query.generation = options.generation;\n      }\n      if (options.userProject) {\n        query.userProject = options.userProject;\n      }\n    }\n    this.request({\n      uri: path,\n      qs: query\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n      let results;\n      if (resp.items) {\n        results = resp.items.map(this.makeAclObject_);\n      } else {\n        results = this.makeAclObject_(resp);\n      }\n      callback(null, results, resp);\n    });\n  }\n  /**\n   * @typedef {array} UpdateAclResponse\n   * @property {object} 0 The updated Acl Objects.\n   * @property {object} 1 The full API response.\n   */\n  /**\n   * @callback UpdateAclCallback\n   * @param {?Error} err Request error, if any.\n   * @param {object} acl The updated Acl Objects.\n   * @param {object} apiResponse The full API response.\n   */\n  /**\n   * Update access controls on a {@link Bucket} or {@link File}.\n   *\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/update| BucketAccessControls: update API Documentation}\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/update| ObjectAccessControls: update API Documentation}\n   *\n   * @param {object} options Configuration options.\n   * @param {string} options.entity Whose permissions will be updated.\n   * @param {string} options.role Permissions allowed for the defined entity.\n   *     See {@link Storage.acl}.\n   * @param {number} [options.generation] **File Objects Only** Select a specific\n   *     revision of this file (as opposed to the latest version, the default).\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {UpdateAclCallback} [callback] Callback function.\n   * @returns {Promise<UpdateAclResponse>}\n   *\n   * @example\n   * ```\n   * const storage = require('@google-cloud/storage')();\n   * const myBucket = storage.bucket('my-bucket');\n   * const myFile = myBucket.file('my-file');\n   *\n   * const options = {\n   *   entity: 'user-useremail@example.com',\n   *   role: gcs.acl.WRITER_ROLE\n   * };\n   *\n   * myBucket.acl.update(options, function(err, aclObject, apiResponse) {});\n   *\n   * //-\n   * // For file ACL operations, you can also specify a `generation` property.\n   * //-\n   * myFile.acl.update({\n   *   entity: 'user-useremail@example.com',\n   *   role: gcs.acl.WRITER_ROLE,\n   *   generation: 1\n   * }, function(err, aclObject, apiResponse) {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * myFile.acl.update(options).then(function(data) {\n   *   const aclObject = data[0];\n   *   const apiResponse = data[1];\n   * });\n   * ```\n   */\n  update(options, callback) {\n    const query = {};\n    if (options.generation) {\n      query.generation = options.generation;\n    }\n    if (options.userProject) {\n      query.userProject = options.userProject;\n    }\n    this.request({\n      method: 'PUT',\n      uri: '/' + encodeURIComponent(options.entity),\n      qs: query,\n      json: {\n        role: options.role.toUpperCase()\n      }\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n      callback(null, this.makeAclObject_(resp), resp);\n    });\n  }\n  /**\n   * Transform API responses to a consistent object format.\n   *\n   * @private\n   */\n  makeAclObject_(accessControlObject) {\n    const obj = {\n      entity: accessControlObject.entity,\n      role: accessControlObject.role\n    };\n    if (accessControlObject.projectTeam) {\n      obj.projectTeam = accessControlObject.projectTeam;\n    }\n    return obj;\n  }\n  /**\n   * Patch requests up to the bucket's request object.\n   *\n   * @private\n   *\n   * @param {string} method Action.\n   * @param {string} path Request path.\n   * @param {*} query Request query object.\n   * @param {*} body Request body contents.\n   * @param {function} callback Callback function.\n   */\n  request(reqOpts, callback) {\n    reqOpts.uri = this.pathPrefix + reqOpts.uri;\n    this.request_(reqOpts, callback);\n  }\n}\nexports.Acl = Acl;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0, promisify_1.promisifyAll)(Acl, {\n  exclude: ['request']\n});","map":{"version":3,"names":["Object","defineProperty","exports","value","AclRoleAccessorMethods","Acl","promisify_1","require","constructor","owners","readers","writers","roles","forEach","_assignAccessMethods","bind","role","accessMethods","entities","roleGroup","toLowerCase","reduce","acc","entity","isPrefix","charAt","length","accessMethod","method","toUpperCase","substring","replace","entityId","options","callback","apiEntity","assign","args","push","apply","pathPrefix","request_","request","add","query","generation","userProject","uri","qs","maxRetries","json","err","resp","makeAclObject_","delete","encodeURIComponent","get","optionsOrCallback","cb","path","results","items","map","update","accessControlObject","obj","projectTeam","reqOpts","promisifyAll","exclude"],"sources":["D:/Coding/React/taskmybusiness/node_modules/@google-cloud/storage/build/src/acl.js"],"sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AclRoleAccessorMethods = exports.Acl = void 0;\nconst promisify_1 = require(\"@google-cloud/promisify\");\n/**\n * Attach functionality to a {@link Storage.acl} instance. This will add an\n * object for each role group (owners, readers, and writers), with each object\n * containing methods to add or delete a type of entity.\n *\n * As an example, here are a few methods that are created.\n *\n *   myBucket.acl.readers.deleteGroup('groupId', function(err) {});\n *\n *   myBucket.acl.owners.addUser('email@example.com', function(err, acl) {});\n *\n *   myBucket.acl.writers.addDomain('example.com', function(err, acl) {});\n *\n * @private\n */\nclass AclRoleAccessorMethods {\n    constructor() {\n        this.owners = {};\n        this.readers = {};\n        this.writers = {};\n        /**\n         * An object of convenience methods to add or delete owner ACL permissions\n         * for a given entity.\n         *\n         * The supported methods include:\n         *\n         *   - `myFile.acl.owners.addAllAuthenticatedUsers`\n         *   - `myFile.acl.owners.deleteAllAuthenticatedUsers`\n         *   - `myFile.acl.owners.addAllUsers`\n         *   - `myFile.acl.owners.deleteAllUsers`\n         *   - `myFile.acl.owners.addDomain`\n         *   - `myFile.acl.owners.deleteDomain`\n         *   - `myFile.acl.owners.addGroup`\n         *   - `myFile.acl.owners.deleteGroup`\n         *   - `myFile.acl.owners.addProject`\n         *   - `myFile.acl.owners.deleteProject`\n         *   - `myFile.acl.owners.addUser`\n         *   - `myFile.acl.owners.deleteUser`\n         *\n         * @name Acl#owners\n         *\n         * @example\n         * ```\n         * const storage = require('@google-cloud/storage')();\n         * const myBucket = storage.bucket('my-bucket');\n         * const myFile = myBucket.file('my-file');\n         *\n         * //-\n         * // Add a user as an owner of a file.\n         * //-\n         * const myBucket = gcs.bucket('my-bucket');\n         * const myFile = myBucket.file('my-file');\n         * myFile.acl.owners.addUser('email@example.com', function(err, aclObject)\n         * {});\n         *\n         * //-\n         * // For reference, the above command is the same as running the following.\n         * //-\n         * myFile.acl.add({\n         *   entity: 'user-email@example.com',\n         *   role: gcs.acl.OWNER_ROLE\n         * }, function(err, aclObject) {});\n         *\n         * //-\n         * // If the callback is omitted, we'll return a Promise.\n         * //-\n         * myFile.acl.owners.addUser('email@example.com').then(function(data) {\n         *   const aclObject = data[0];\n         *   const apiResponse = data[1];\n         * });\n         * ```\n         */\n        this.owners = {};\n        /**\n         * An object of convenience methods to add or delete reader ACL permissions\n         * for a given entity.\n         *\n         * The supported methods include:\n         *\n         *   - `myFile.acl.readers.addAllAuthenticatedUsers`\n         *   - `myFile.acl.readers.deleteAllAuthenticatedUsers`\n         *   - `myFile.acl.readers.addAllUsers`\n         *   - `myFile.acl.readers.deleteAllUsers`\n         *   - `myFile.acl.readers.addDomain`\n         *   - `myFile.acl.readers.deleteDomain`\n         *   - `myFile.acl.readers.addGroup`\n         *   - `myFile.acl.readers.deleteGroup`\n         *   - `myFile.acl.readers.addProject`\n         *   - `myFile.acl.readers.deleteProject`\n         *   - `myFile.acl.readers.addUser`\n         *   - `myFile.acl.readers.deleteUser`\n         *\n         * @name Acl#readers\n         *\n         * @example\n         * ```\n         * const storage = require('@google-cloud/storage')();\n         * const myBucket = storage.bucket('my-bucket');\n         * const myFile = myBucket.file('my-file');\n         *\n         * //-\n         * // Add a user as a reader of a file.\n         * //-\n         * myFile.acl.readers.addUser('email@example.com', function(err, aclObject)\n         * {});\n         *\n         * //-\n         * // For reference, the above command is the same as running the following.\n         * //-\n         * myFile.acl.add({\n         *   entity: 'user-email@example.com',\n         *   role: gcs.acl.READER_ROLE\n         * }, function(err, aclObject) {});\n         *\n         * //-\n         * // If the callback is omitted, we'll return a Promise.\n         * //-\n         * myFile.acl.readers.addUser('email@example.com').then(function(data) {\n         *   const aclObject = data[0];\n         *   const apiResponse = data[1];\n         * });\n         * ```\n         */\n        this.readers = {};\n        /**\n         * An object of convenience methods to add or delete writer ACL permissions\n         * for a given entity.\n         *\n         * The supported methods include:\n         *\n         *   - `myFile.acl.writers.addAllAuthenticatedUsers`\n         *   - `myFile.acl.writers.deleteAllAuthenticatedUsers`\n         *   - `myFile.acl.writers.addAllUsers`\n         *   - `myFile.acl.writers.deleteAllUsers`\n         *   - `myFile.acl.writers.addDomain`\n         *   - `myFile.acl.writers.deleteDomain`\n         *   - `myFile.acl.writers.addGroup`\n         *   - `myFile.acl.writers.deleteGroup`\n         *   - `myFile.acl.writers.addProject`\n         *   - `myFile.acl.writers.deleteProject`\n         *   - `myFile.acl.writers.addUser`\n         *   - `myFile.acl.writers.deleteUser`\n         *\n         * @name Acl#writers\n         *\n         * @example\n         * ```\n         * const storage = require('@google-cloud/storage')();\n         * const myBucket = storage.bucket('my-bucket');\n         * const myFile = myBucket.file('my-file');\n         *\n         * //-\n         * // Add a user as a writer of a file.\n         * //-\n         * myFile.acl.writers.addUser('email@example.com', function(err, aclObject)\n         * {});\n         *\n         * //-\n         * // For reference, the above command is the same as running the following.\n         * //-\n         * myFile.acl.add({\n         *   entity: 'user-email@example.com',\n         *   role: gcs.acl.WRITER_ROLE\n         * }, function(err, aclObject) {});\n         *\n         * //-\n         * // If the callback is omitted, we'll return a Promise.\n         * //-\n         * myFile.acl.writers.addUser('email@example.com').then(function(data) {\n         *   const aclObject = data[0];\n         *   const apiResponse = data[1];\n         * });\n         * ```\n         */\n        this.writers = {};\n        AclRoleAccessorMethods.roles.forEach(this._assignAccessMethods.bind(this));\n    }\n    _assignAccessMethods(role) {\n        const accessMethods = AclRoleAccessorMethods.accessMethods;\n        const entities = AclRoleAccessorMethods.entities;\n        const roleGroup = role.toLowerCase() + 's';\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this[roleGroup] = entities.reduce((acc, entity) => {\n            const isPrefix = entity.charAt(entity.length - 1) === '-';\n            accessMethods.forEach(accessMethod => {\n                let method = accessMethod + entity[0].toUpperCase() + entity.substring(1);\n                if (isPrefix) {\n                    method = method.replace('-', '');\n                }\n                // Wrap the parent accessor method (e.g. `add` or `delete`) to avoid the\n                // more complex API of specifying an `entity` and `role`.\n                // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                acc[method] = (entityId, options, callback) => {\n                    let apiEntity;\n                    if (typeof options === 'function') {\n                        callback = options;\n                        options = {};\n                    }\n                    if (isPrefix) {\n                        apiEntity = entity + entityId;\n                    }\n                    else {\n                        // If the entity is not a prefix, it is a special entity group\n                        // that does not require further details. The accessor methods\n                        // only accept a callback.\n                        apiEntity = entity;\n                        callback = entityId;\n                    }\n                    options = Object.assign({\n                        entity: apiEntity,\n                        role,\n                    }, options);\n                    const args = [options];\n                    if (typeof callback === 'function') {\n                        args.push(callback);\n                    }\n                    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                    return this[accessMethod].apply(this, args);\n                };\n            });\n            return acc;\n        }, {});\n    }\n}\nexports.AclRoleAccessorMethods = AclRoleAccessorMethods;\nAclRoleAccessorMethods.accessMethods = ['add', 'delete'];\nAclRoleAccessorMethods.entities = [\n    // Special entity groups that do not require further specification.\n    'allAuthenticatedUsers',\n    'allUsers',\n    // Entity groups that require specification, e.g. `user-email@example.com`.\n    'domain-',\n    'group-',\n    'project-',\n    'user-',\n];\nAclRoleAccessorMethods.roles = ['OWNER', 'READER', 'WRITER'];\n/**\n * Cloud Storage uses access control lists (ACLs) to manage object and\n * bucket access. ACLs are the mechanism you use to share objects with other\n * users and allow other users to access your buckets and objects.\n *\n * An ACL consists of one or more entries, where each entry grants permissions\n * to an entity. Permissions define the actions that can be performed against an\n * object or bucket (for example, `READ` or `WRITE`); the entity defines who the\n * permission applies to (for example, a specific user or group of users).\n *\n * Where an `entity` value is accepted, we follow the format the Cloud Storage\n * API expects.\n *\n * Refer to\n * https://cloud.google.com/storage/docs/json_api/v1/defaultObjectAccessControls\n * for the most up-to-date values.\n *\n *   - `user-userId`\n *   - `user-email`\n *   - `group-groupId`\n *   - `group-email`\n *   - `domain-domain`\n *   - `project-team-projectId`\n *   - `allUsers`\n *   - `allAuthenticatedUsers`\n *\n * Examples:\n *\n *   - The user \"liz@example.com\" would be `user-liz@example.com`.\n *   - The group \"example@googlegroups.com\" would be\n *     `group-example@googlegroups.com`.\n *   - To refer to all members of the Google Apps for Business domain\n *     \"example.com\", the entity would be `domain-example.com`.\n *\n * For more detailed information, see\n * {@link http://goo.gl/6qBBPO| About Access Control Lists}.\n *\n * @constructor Acl\n * @mixin\n * @param {object} options Configuration options.\n */\nclass Acl extends AclRoleAccessorMethods {\n    constructor(options) {\n        super();\n        this.pathPrefix = options.pathPrefix;\n        this.request_ = options.request;\n    }\n    /**\n     * @typedef {array} AddAclResponse\n     * @property {object} 0 The Acl Objects.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback AddAclCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} acl The Acl Objects.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Add access controls on a {@link Bucket} or {@link File}.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/insert| BucketAccessControls: insert API Documentation}\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/insert| ObjectAccessControls: insert API Documentation}\n     *\n     * @param {object} options Configuration options.\n     * @param {string} options.entity Whose permissions will be added.\n     * @param {string} options.role Permissions allowed for the defined entity.\n     *     See {@link https://cloud.google.com/storage/docs/access-control Access\n     * Control}.\n     * @param {number} [options.generation] **File Objects Only** Select a specific\n     *     revision of this file (as opposed to the latest version, the default).\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {AddAclCallback} [callback] Callback function.\n     * @returns {Promise<AddAclResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const myBucket = storage.bucket('my-bucket');\n     * const myFile = myBucket.file('my-file');\n     *\n     * const options = {\n     *   entity: 'user-useremail@example.com',\n     *   role: gcs.acl.OWNER_ROLE\n     * };\n     *\n     * myBucket.acl.add(options, function(err, aclObject, apiResponse) {});\n     *\n     * //-\n     * // For file ACL operations, you can also specify a `generation` property.\n     * // Here is how you would grant ownership permissions to a user on a\n     * specific\n     * // revision of a file.\n     * //-\n     * myFile.acl.add({\n     *   entity: 'user-useremail@example.com',\n     *   role: gcs.acl.OWNER_ROLE,\n     *   generation: 1\n     * }, function(err, aclObject, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * myBucket.acl.add(options).then(function(data) {\n     *   const aclObject = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_add_file_owner\n     * Example of adding an owner to a file:\n     *\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_add_bucket_owner\n     * Example of adding an owner to a bucket:\n     *\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_add_bucket_default_owner\n     * Example of adding a default owner to a bucket:\n     */\n    add(options, callback) {\n        const query = {};\n        if (options.generation) {\n            query.generation = options.generation;\n        }\n        if (options.userProject) {\n            query.userProject = options.userProject;\n        }\n        this.request({\n            method: 'POST',\n            uri: '',\n            qs: query,\n            maxRetries: 0,\n            json: {\n                entity: options.entity,\n                role: options.role.toUpperCase(),\n            },\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            callback(null, this.makeAclObject_(resp), resp);\n        });\n    }\n    /**\n     * @typedef {array} RemoveAclResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * @callback RemoveAclCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Delete access controls on a {@link Bucket} or {@link File}.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/delete| BucketAccessControls: delete API Documentation}\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/delete| ObjectAccessControls: delete API Documentation}\n     *\n     * @param {object} options Configuration object.\n     * @param {string} options.entity Whose permissions will be revoked.\n     * @param {int} [options.generation] **File Objects Only** Select a specific\n     *     revision of this file (as opposed to the latest version, the default).\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {RemoveAclCallback} callback The callback function.\n     * @returns {Promise<RemoveAclResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const myBucket = storage.bucket('my-bucket');\n     * const myFile = myBucket.file('my-file');\n     *\n     * myBucket.acl.delete({\n     *   entity: 'user-useremail@example.com'\n     * }, function(err, apiResponse) {});\n     *\n     * //-\n     * // For file ACL operations, you can also specify a `generation` property.\n     * //-\n     * myFile.acl.delete({\n     *   entity: 'user-useremail@example.com',\n     *   generation: 1\n     * }, function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * myFile.acl.delete().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_remove_bucket_owner\n     * Example of removing an owner from a bucket:\n     *\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_remove_bucket_default_owner\n     * Example of removing a default owner from a bucket:\n     *\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_remove_file_owner\n     * Example of removing an owner from a bucket:\n     */\n    delete(options, callback) {\n        const query = {};\n        if (options.generation) {\n            query.generation = options.generation;\n        }\n        if (options.userProject) {\n            query.userProject = options.userProject;\n        }\n        this.request({\n            method: 'DELETE',\n            uri: '/' + encodeURIComponent(options.entity),\n            qs: query,\n        }, (err, resp) => {\n            callback(err, resp);\n        });\n    }\n    /**\n     * @typedef {array} GetAclResponse\n     * @property {object|object[]} 0 Single or array of Acl Objects.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback GetAclCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object|object[]} acl Single or array of Acl Objects.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Get access controls on a {@link Bucket} or {@link File}. If\n     * an entity is omitted, you will receive an array of all applicable access\n     * controls.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/get| BucketAccessControls: get API Documentation}\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/get| ObjectAccessControls: get API Documentation}\n     *\n     * @param {object|function} [options] Configuration options. If you want to\n     *     receive a list of all access controls, pass the callback function as\n     * the only argument.\n     * @param {string} options.entity Whose permissions will be fetched.\n     * @param {number} [options.generation] **File Objects Only** Select a specific\n     *     revision of this file (as opposed to the latest version, the default).\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {GetAclCallback} [callback] Callback function.\n     * @returns {Promise<GetAclResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const myBucket = storage.bucket('my-bucket');\n     * const myFile = myBucket.file('my-file');\n     *\n     * myBucket.acl.get({\n     *   entity: 'user-useremail@example.com'\n     * }, function(err, aclObject, apiResponse) {});\n     *\n     * //-\n     * // Get all access controls.\n     * //-\n     * myBucket.acl.get(function(err, aclObjects, apiResponse) {\n     *   // aclObjects = [\n     *   //   {\n     *   //     entity: 'user-useremail@example.com',\n     *   //     role: 'owner'\n     *   //   }\n     *   // ]\n     * });\n     *\n     * //-\n     * // For file ACL operations, you can also specify a `generation` property.\n     * //-\n     * myFile.acl.get({\n     *   entity: 'user-useremail@example.com',\n     *   generation: 1\n     * }, function(err, aclObject, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * myBucket.acl.get().then(function(data) {\n     *   const aclObject = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_print_file_acl\n     * Example of printing a file's ACL:\n     *\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_print_file_acl_for_user\n     * Example of printing a file's ACL for a specific user:\n     *\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_print_bucket_acl\n     * Example of printing a bucket's ACL:\n     *\n     * @example <caption>include:samples/acl.js</caption>\n     * region_tag:storage_print_bucket_acl_for_user\n     * Example of printing a bucket's ACL for a specific user:\n     */\n    get(optionsOrCallback, cb) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : null;\n        const callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : cb;\n        let path = '';\n        const query = {};\n        if (options) {\n            path = '/' + encodeURIComponent(options.entity);\n            if (options.generation) {\n                query.generation = options.generation;\n            }\n            if (options.userProject) {\n                query.userProject = options.userProject;\n            }\n        }\n        this.request({\n            uri: path,\n            qs: query,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            let results;\n            if (resp.items) {\n                results = resp.items.map(this.makeAclObject_);\n            }\n            else {\n                results = this.makeAclObject_(resp);\n            }\n            callback(null, results, resp);\n        });\n    }\n    /**\n     * @typedef {array} UpdateAclResponse\n     * @property {object} 0 The updated Acl Objects.\n     * @property {object} 1 The full API response.\n     */\n    /**\n     * @callback UpdateAclCallback\n     * @param {?Error} err Request error, if any.\n     * @param {object} acl The updated Acl Objects.\n     * @param {object} apiResponse The full API response.\n     */\n    /**\n     * Update access controls on a {@link Bucket} or {@link File}.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/bucketAccessControls/update| BucketAccessControls: update API Documentation}\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/objectAccessControls/update| ObjectAccessControls: update API Documentation}\n     *\n     * @param {object} options Configuration options.\n     * @param {string} options.entity Whose permissions will be updated.\n     * @param {string} options.role Permissions allowed for the defined entity.\n     *     See {@link Storage.acl}.\n     * @param {number} [options.generation] **File Objects Only** Select a specific\n     *     revision of this file (as opposed to the latest version, the default).\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {UpdateAclCallback} [callback] Callback function.\n     * @returns {Promise<UpdateAclResponse>}\n     *\n     * @example\n     * ```\n     * const storage = require('@google-cloud/storage')();\n     * const myBucket = storage.bucket('my-bucket');\n     * const myFile = myBucket.file('my-file');\n     *\n     * const options = {\n     *   entity: 'user-useremail@example.com',\n     *   role: gcs.acl.WRITER_ROLE\n     * };\n     *\n     * myBucket.acl.update(options, function(err, aclObject, apiResponse) {});\n     *\n     * //-\n     * // For file ACL operations, you can also specify a `generation` property.\n     * //-\n     * myFile.acl.update({\n     *   entity: 'user-useremail@example.com',\n     *   role: gcs.acl.WRITER_ROLE,\n     *   generation: 1\n     * }, function(err, aclObject, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * myFile.acl.update(options).then(function(data) {\n     *   const aclObject = data[0];\n     *   const apiResponse = data[1];\n     * });\n     * ```\n     */\n    update(options, callback) {\n        const query = {};\n        if (options.generation) {\n            query.generation = options.generation;\n        }\n        if (options.userProject) {\n            query.userProject = options.userProject;\n        }\n        this.request({\n            method: 'PUT',\n            uri: '/' + encodeURIComponent(options.entity),\n            qs: query,\n            json: {\n                role: options.role.toUpperCase(),\n            },\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            callback(null, this.makeAclObject_(resp), resp);\n        });\n    }\n    /**\n     * Transform API responses to a consistent object format.\n     *\n     * @private\n     */\n    makeAclObject_(accessControlObject) {\n        const obj = {\n            entity: accessControlObject.entity,\n            role: accessControlObject.role,\n        };\n        if (accessControlObject.projectTeam) {\n            obj.projectTeam = accessControlObject.projectTeam;\n        }\n        return obj;\n    }\n    /**\n     * Patch requests up to the bucket's request object.\n     *\n     * @private\n     *\n     * @param {string} method Action.\n     * @param {string} path Request path.\n     * @param {*} query Request query object.\n     * @param {*} body Request body contents.\n     * @param {function} callback Callback function.\n     */\n    request(reqOpts, callback) {\n        reqOpts.uri = this.pathPrefix + reqOpts.uri;\n        this.request_(reqOpts, callback);\n    }\n}\nexports.Acl = Acl;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0, promisify_1.promisifyAll)(Acl, {\n    exclude: ['request'],\n});\n//# sourceMappingURL=acl.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,sBAAsB,GAAGF,OAAO,CAACG,GAAG,GAAG,KAAK,CAAC;AACrD,MAAMC,WAAW,GAAGC,OAAO,CAAC,yBAAyB,CAAC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMH,sBAAsB,CAAC;EACzBI,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,MAAM,GAAG,CAAC,CAAC;IAChB,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC;IACjB,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC;IACjB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACF,MAAM,GAAG,CAAC,CAAC;IAChB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC;IACjB;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,OAAO,GAAG,CAAC,CAAC;IACjBP,sBAAsB,CAACQ,KAAK,CAACC,OAAO,CAAC,IAAI,CAACC,oBAAoB,CAACC,IAAI,CAAC,IAAI,CAAC,CAAC;EAC9E;EACAD,oBAAoBA,CAACE,IAAI,EAAE;IACvB,MAAMC,aAAa,GAAGb,sBAAsB,CAACa,aAAa;IAC1D,MAAMC,QAAQ,GAAGd,sBAAsB,CAACc,QAAQ;IAChD,MAAMC,SAAS,GAAGH,IAAI,CAACI,WAAW,CAAC,CAAC,GAAG,GAAG;IAC1C;IACA,IAAI,CAACD,SAAS,CAAC,GAAGD,QAAQ,CAACG,MAAM,CAAC,CAACC,GAAG,EAAEC,MAAM,KAAK;MAC/C,MAAMC,QAAQ,GAAGD,MAAM,CAACE,MAAM,CAACF,MAAM,CAACG,MAAM,GAAG,CAAC,CAAC,KAAK,GAAG;MACzDT,aAAa,CAACJ,OAAO,CAACc,YAAY,IAAI;QAClC,IAAIC,MAAM,GAAGD,YAAY,GAAGJ,MAAM,CAAC,CAAC,CAAC,CAACM,WAAW,CAAC,CAAC,GAAGN,MAAM,CAACO,SAAS,CAAC,CAAC,CAAC;QACzE,IAAIN,QAAQ,EAAE;UACVI,MAAM,GAAGA,MAAM,CAACG,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;QACpC;QACA;QACA;QACA;QACAT,GAAG,CAACM,MAAM,CAAC,GAAG,CAACI,QAAQ,EAAEC,OAAO,EAAEC,QAAQ,KAAK;UAC3C,IAAIC,SAAS;UACb,IAAI,OAAOF,OAAO,KAAK,UAAU,EAAE;YAC/BC,QAAQ,GAAGD,OAAO;YAClBA,OAAO,GAAG,CAAC,CAAC;UAChB;UACA,IAAIT,QAAQ,EAAE;YACVW,SAAS,GAAGZ,MAAM,GAAGS,QAAQ;UACjC,CAAC,MACI;YACD;YACA;YACA;YACAG,SAAS,GAAGZ,MAAM;YAClBW,QAAQ,GAAGF,QAAQ;UACvB;UACAC,OAAO,GAAGjC,MAAM,CAACoC,MAAM,CAAC;YACpBb,MAAM,EAAEY,SAAS;YACjBnB;UACJ,CAAC,EAAEiB,OAAO,CAAC;UACX,MAAMI,IAAI,GAAG,CAACJ,OAAO,CAAC;UACtB,IAAI,OAAOC,QAAQ,KAAK,UAAU,EAAE;YAChCG,IAAI,CAACC,IAAI,CAACJ,QAAQ,CAAC;UACvB;UACA;UACA,OAAO,IAAI,CAACP,YAAY,CAAC,CAACY,KAAK,CAAC,IAAI,EAAEF,IAAI,CAAC;QAC/C,CAAC;MACL,CAAC,CAAC;MACF,OAAOf,GAAG;IACd,CAAC,EAAE,CAAC,CAAC,CAAC;EACV;AACJ;AACApB,OAAO,CAACE,sBAAsB,GAAGA,sBAAsB;AACvDA,sBAAsB,CAACa,aAAa,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC;AACxDb,sBAAsB,CAACc,QAAQ,GAAG;AAC9B;AACA,uBAAuB,EACvB,UAAU;AACV;AACA,SAAS,EACT,QAAQ,EACR,UAAU,EACV,OAAO,CACV;AACDd,sBAAsB,CAACQ,KAAK,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,QAAQ,CAAC;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMP,GAAG,SAASD,sBAAsB,CAAC;EACrCI,WAAWA,CAACyB,OAAO,EAAE;IACjB,KAAK,CAAC,CAAC;IACP,IAAI,CAACO,UAAU,GAAGP,OAAO,CAACO,UAAU;IACpC,IAAI,CAACC,QAAQ,GAAGR,OAAO,CAACS,OAAO;EACnC;EACA;AACJ;AACA;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,GAAGA,CAACV,OAAO,EAAEC,QAAQ,EAAE;IACnB,MAAMU,KAAK,GAAG,CAAC,CAAC;IAChB,IAAIX,OAAO,CAACY,UAAU,EAAE;MACpBD,KAAK,CAACC,UAAU,GAAGZ,OAAO,CAACY,UAAU;IACzC;IACA,IAAIZ,OAAO,CAACa,WAAW,EAAE;MACrBF,KAAK,CAACE,WAAW,GAAGb,OAAO,CAACa,WAAW;IAC3C;IACA,IAAI,CAACJ,OAAO,CAAC;MACTd,MAAM,EAAE,MAAM;MACdmB,GAAG,EAAE,EAAE;MACPC,EAAE,EAAEJ,KAAK;MACTK,UAAU,EAAE,CAAC;MACbC,IAAI,EAAE;QACF3B,MAAM,EAAEU,OAAO,CAACV,MAAM;QACtBP,IAAI,EAAEiB,OAAO,CAACjB,IAAI,CAACa,WAAW,CAAC;MACnC;IACJ,CAAC,EAAE,CAACsB,GAAG,EAAEC,IAAI,KAAK;MACd,IAAID,GAAG,EAAE;QACLjB,QAAQ,CAACiB,GAAG,EAAE,IAAI,EAAEC,IAAI,CAAC;QACzB;MACJ;MACAlB,QAAQ,CAAC,IAAI,EAAE,IAAI,CAACmB,cAAc,CAACD,IAAI,CAAC,EAAEA,IAAI,CAAC;IACnD,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;EACI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIE,MAAMA,CAACrB,OAAO,EAAEC,QAAQ,EAAE;IA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"},"metadata":{},"sourceType":"script","externalDependencies":[]}