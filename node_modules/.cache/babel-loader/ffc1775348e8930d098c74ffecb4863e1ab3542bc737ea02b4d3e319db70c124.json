{"ast":null,"code":"\"use strict\";\n\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Notification = void 0;\nconst nodejs_common_1 = require(\"./nodejs-common\");\nconst promisify_1 = require(\"@google-cloud/promisify\");\n/**\n * The API-formatted resource description of the notification.\n *\n * Note: This is not guaranteed to be up-to-date when accessed. To get the\n * latest record, call the `getMetadata()` method.\n *\n * @name Notification#metadata\n * @type {object}\n */\n/**\n * A Notification object is created from your {@link Bucket} object using\n * {@link Bucket#notification}. Use it to interact with Cloud Pub/Sub\n * notifications.\n *\n * See {@link https://cloud.google.com/storage/docs/pubsub-notifications| Cloud Pub/Sub Notifications for Google Cloud Storage}\n *\n * @class\n * @hideconstructor\n *\n * @param {Bucket} bucket The bucket instance this notification is attached to.\n * @param {string} id The ID of the notification.\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const myBucket = storage.bucket('my-bucket');\n *\n * const notification = myBucket.notification('1');\n * ```\n */\nclass Notification extends nodejs_common_1.ServiceObject {\n  constructor(bucket, id) {\n    const methods = {\n      /**\n       * Creates a notification subscription for the bucket.\n       *\n       * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/insert| Notifications: insert}\n       * @method Notification#create\n       *\n       * @param {Topic|string} topic The Cloud PubSub topic to which this\n       * subscription publishes. If the project ID is omitted, the current\n       * project ID will be used.\n       *\n       * Acceptable formats are:\n       * - `projects/grape-spaceship-123/topics/my-topic`\n       *\n       * - `my-topic`\n       * @param {CreateNotificationRequest} [options] Metadata to set for\n       *     the notification.\n       * @param {CreateNotificationCallback} [callback] Callback function.\n       * @returns {Promise<CreateNotificationResponse>}\n       * @throws {Error} If a valid topic is not provided.\n       *\n       * @example\n       * ```\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const myBucket = storage.bucket('my-bucket');\n       * const notification = myBucket.notification('1');\n       *\n       * notification.create(function(err, notification, apiResponse) {\n       *   if (!err) {\n       *     // The notification was created successfully.\n       *   }\n       * });\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * notification.create().then(function(data) {\n       *   const notification = data[0];\n       *   const apiResponse = data[1];\n       * });\n       * ```\n       */\n      create: true,\n      /**\n       * @typedef {array} NotificationExistsResponse\n       * @property {boolean} 0 Whether the notification exists or not.\n       */\n      /**\n       * @callback NotificationExistsCallback\n       * @param {?Error} err Request error, if any.\n       * @param {boolean} exists Whether the notification exists or not.\n       */\n      /**\n       * Check if the notification exists.\n       *\n       * @method Notification#exists\n       * @param {NotificationExistsCallback} [callback] Callback function.\n       * @returns {Promise<NotificationExistsResponse>}\n       *\n       * @example\n       * ```\n       * const {Storage} = require('@google-cloud/storage');\n       * const storage = new Storage();\n       * const myBucket = storage.bucket('my-bucket');\n       * const notification = myBucket.notification('1');\n       *\n       * notification.exists(function(err, exists) {});\n       *\n       * //-\n       * // If the callback is omitted, we'll return a Promise.\n       * //-\n       * notification.exists().then(function(data) {\n       *   const exists = data[0];\n       * });\n       * ```\n       */\n      exists: true\n    };\n    super({\n      parent: bucket,\n      baseUrl: '/notificationConfigs',\n      id: id.toString(),\n      createMethod: bucket.createNotification.bind(bucket),\n      methods\n    });\n  }\n  /**\n   * @typedef {array} DeleteNotificationResponse\n   * @property {object} 0 The full API response.\n   */\n  /**\n   * Permanently deletes a notification subscription.\n   *\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/delete| Notifications: delete API Documentation}\n   *\n   * @param {object} [options] Configuration options.\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {DeleteNotificationCallback} [callback] Callback function.\n   * @returns {Promise<DeleteNotificationResponse>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const myBucket = storage.bucket('my-bucket');\n   * const notification = myBucket.notification('1');\n   *\n   * notification.delete(function(err, apiResponse) {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * notification.delete().then(function(data) {\n   *   const apiResponse = data[0];\n   * });\n   *\n   * ```\n   * @example <caption>include:samples/deleteNotification.js</caption>\n   * region_tag:storage_delete_bucket_notification\n   * Another example:\n   */\n  delete(optionsOrCallback, callback) {\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n    this.request({\n      method: 'DELETE',\n      uri: '',\n      qs: options\n    }, callback || nodejs_common_1.util.noop);\n  }\n  /**\n   * Get a notification and its metadata if it exists.\n   *\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/get| Notifications: get API Documentation}\n   *\n   * @param {object} [options] Configuration options.\n   *     See {@link Bucket#createNotification} for create options.\n   * @param {boolean} [options.autoCreate] Automatically create the object if\n   *     it does not exist. Default: `false`.\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {GetNotificationCallback} [callback] Callback function.\n   * @return {Promise<GetNotificationCallback>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const myBucket = storage.bucket('my-bucket');\n   * const notification = myBucket.notification('1');\n   *\n   * notification.get(function(err, notification, apiResponse) {\n   *   // `notification.metadata` has been populated.\n   * });\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * notification.get().then(function(data) {\n   *   const notification = data[0];\n   *   const apiResponse = data[1];\n   * });\n   * ```\n   */\n  get(optionsOrCallback, callback) {\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n    const autoCreate = options.autoCreate;\n    delete options.autoCreate;\n    const onCreate = (err, notification, apiResponse) => {\n      if (err) {\n        if (err.code === 409) {\n          this.get(options, callback);\n          return;\n        }\n        callback(err, null, apiResponse);\n        return;\n      }\n      callback(null, notification, apiResponse);\n    };\n    this.getMetadata(options, (err, metadata) => {\n      if (err) {\n        if (err.code === 404 && autoCreate) {\n          const args = [];\n          if (Object.keys(options).length > 0) {\n            args.push(options);\n          }\n          args.push(onCreate);\n          // eslint-disable-next-line\n          this.create.apply(this, args);\n          return;\n        }\n        callback(err, null, metadata);\n        return;\n      }\n      callback(null, this, metadata);\n    });\n  }\n  /**\n   * Get the notification's metadata.\n   *\n   * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/get| Notifications: get API Documentation}\n   *\n   * @param {object} [options] Configuration options.\n   * @param {string} [options.userProject] The ID of the project which will be\n   *     billed for the request.\n   * @param {GetNotificationMetadataCallback} [callback] Callback function.\n   * @returns {Promise<GetNotificationMetadataResponse>}\n   *\n   * @example\n   * ```\n   * const {Storage} = require('@google-cloud/storage');\n   * const storage = new Storage();\n   * const myBucket = storage.bucket('my-bucket');\n   * const notification = myBucket.notification('1');\n   *\n   * notification.getMetadata(function(err, metadata, apiResponse) {});\n   *\n   * //-\n   * // If the callback is omitted, we'll return a Promise.\n   * //-\n   * notification.getMetadata().then(function(data) {\n   *   const metadata = data[0];\n   *   const apiResponse = data[1];\n   * });\n   *\n   * ```\n   * @example <caption>include:samples/getMetadataNotifications.js</caption>\n   * region_tag:storage_print_pubsub_bucket_notification\n   * Another example:\n   */\n  getMetadata(optionsOrCallback, callback) {\n    const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n    callback = typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n    this.request({\n      uri: '',\n      qs: options\n    }, (err, resp) => {\n      if (err) {\n        callback(err, null, resp);\n        return;\n      }\n      this.metadata = resp;\n      callback(null, this.metadata, resp);\n    });\n  }\n}\nexports.Notification = Notification;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0, promisify_1.promisifyAll)(Notification);","map":{"version":3,"names":["Object","defineProperty","exports","value","Notification","nodejs_common_1","require","promisify_1","ServiceObject","constructor","bucket","id","methods","create","exists","parent","baseUrl","toString","createMethod","createNotification","bind","delete","optionsOrCallback","callback","options","request","method","uri","qs","util","noop","get","autoCreate","onCreate","err","notification","apiResponse","code","getMetadata","metadata","args","keys","length","push","apply","resp","promisifyAll"],"sources":["D:/Coding/React/taskmybusiness/node_modules/@google-cloud/storage/build/src/notification.js"],"sourcesContent":["\"use strict\";\n// Copyright 2019 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Notification = void 0;\nconst nodejs_common_1 = require(\"./nodejs-common\");\nconst promisify_1 = require(\"@google-cloud/promisify\");\n/**\n * The API-formatted resource description of the notification.\n *\n * Note: This is not guaranteed to be up-to-date when accessed. To get the\n * latest record, call the `getMetadata()` method.\n *\n * @name Notification#metadata\n * @type {object}\n */\n/**\n * A Notification object is created from your {@link Bucket} object using\n * {@link Bucket#notification}. Use it to interact with Cloud Pub/Sub\n * notifications.\n *\n * See {@link https://cloud.google.com/storage/docs/pubsub-notifications| Cloud Pub/Sub Notifications for Google Cloud Storage}\n *\n * @class\n * @hideconstructor\n *\n * @param {Bucket} bucket The bucket instance this notification is attached to.\n * @param {string} id The ID of the notification.\n *\n * @example\n * ```\n * const {Storage} = require('@google-cloud/storage');\n * const storage = new Storage();\n * const myBucket = storage.bucket('my-bucket');\n *\n * const notification = myBucket.notification('1');\n * ```\n */\nclass Notification extends nodejs_common_1.ServiceObject {\n    constructor(bucket, id) {\n        const methods = {\n            /**\n             * Creates a notification subscription for the bucket.\n             *\n             * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/insert| Notifications: insert}\n             * @method Notification#create\n             *\n             * @param {Topic|string} topic The Cloud PubSub topic to which this\n             * subscription publishes. If the project ID is omitted, the current\n             * project ID will be used.\n             *\n             * Acceptable formats are:\n             * - `projects/grape-spaceship-123/topics/my-topic`\n             *\n             * - `my-topic`\n             * @param {CreateNotificationRequest} [options] Metadata to set for\n             *     the notification.\n             * @param {CreateNotificationCallback} [callback] Callback function.\n             * @returns {Promise<CreateNotificationResponse>}\n             * @throws {Error} If a valid topic is not provided.\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             * const notification = myBucket.notification('1');\n             *\n             * notification.create(function(err, notification, apiResponse) {\n             *   if (!err) {\n             *     // The notification was created successfully.\n             *   }\n             * });\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * notification.create().then(function(data) {\n             *   const notification = data[0];\n             *   const apiResponse = data[1];\n             * });\n             * ```\n             */\n            create: true,\n            /**\n             * @typedef {array} NotificationExistsResponse\n             * @property {boolean} 0 Whether the notification exists or not.\n             */\n            /**\n             * @callback NotificationExistsCallback\n             * @param {?Error} err Request error, if any.\n             * @param {boolean} exists Whether the notification exists or not.\n             */\n            /**\n             * Check if the notification exists.\n             *\n             * @method Notification#exists\n             * @param {NotificationExistsCallback} [callback] Callback function.\n             * @returns {Promise<NotificationExistsResponse>}\n             *\n             * @example\n             * ```\n             * const {Storage} = require('@google-cloud/storage');\n             * const storage = new Storage();\n             * const myBucket = storage.bucket('my-bucket');\n             * const notification = myBucket.notification('1');\n             *\n             * notification.exists(function(err, exists) {});\n             *\n             * //-\n             * // If the callback is omitted, we'll return a Promise.\n             * //-\n             * notification.exists().then(function(data) {\n             *   const exists = data[0];\n             * });\n             * ```\n             */\n            exists: true,\n        };\n        super({\n            parent: bucket,\n            baseUrl: '/notificationConfigs',\n            id: id.toString(),\n            createMethod: bucket.createNotification.bind(bucket),\n            methods,\n        });\n    }\n    /**\n     * @typedef {array} DeleteNotificationResponse\n     * @property {object} 0 The full API response.\n     */\n    /**\n     * Permanently deletes a notification subscription.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/delete| Notifications: delete API Documentation}\n     *\n     * @param {object} [options] Configuration options.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {DeleteNotificationCallback} [callback] Callback function.\n     * @returns {Promise<DeleteNotificationResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     * const notification = myBucket.notification('1');\n     *\n     * notification.delete(function(err, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * notification.delete().then(function(data) {\n     *   const apiResponse = data[0];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/deleteNotification.js</caption>\n     * region_tag:storage_delete_bucket_notification\n     * Another example:\n     */\n    delete(optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        this.request({\n            method: 'DELETE',\n            uri: '',\n            qs: options,\n        }, callback || nodejs_common_1.util.noop);\n    }\n    /**\n     * Get a notification and its metadata if it exists.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/get| Notifications: get API Documentation}\n     *\n     * @param {object} [options] Configuration options.\n     *     See {@link Bucket#createNotification} for create options.\n     * @param {boolean} [options.autoCreate] Automatically create the object if\n     *     it does not exist. Default: `false`.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {GetNotificationCallback} [callback] Callback function.\n     * @return {Promise<GetNotificationCallback>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     * const notification = myBucket.notification('1');\n     *\n     * notification.get(function(err, notification, apiResponse) {\n     *   // `notification.metadata` has been populated.\n     * });\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * notification.get().then(function(data) {\n     *   const notification = data[0];\n     *   const apiResponse = data[1];\n     * });\n     * ```\n     */\n    get(optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        const autoCreate = options.autoCreate;\n        delete options.autoCreate;\n        const onCreate = (err, notification, apiResponse) => {\n            if (err) {\n                if (err.code === 409) {\n                    this.get(options, callback);\n                    return;\n                }\n                callback(err, null, apiResponse);\n                return;\n            }\n            callback(null, notification, apiResponse);\n        };\n        this.getMetadata(options, (err, metadata) => {\n            if (err) {\n                if (err.code === 404 && autoCreate) {\n                    const args = [];\n                    if (Object.keys(options).length > 0) {\n                        args.push(options);\n                    }\n                    args.push(onCreate);\n                    // eslint-disable-next-line\n                    this.create.apply(this, args);\n                    return;\n                }\n                callback(err, null, metadata);\n                return;\n            }\n            callback(null, this, metadata);\n        });\n    }\n    /**\n     * Get the notification's metadata.\n     *\n     * See {@link https://cloud.google.com/storage/docs/json_api/v1/notifications/get| Notifications: get API Documentation}\n     *\n     * @param {object} [options] Configuration options.\n     * @param {string} [options.userProject] The ID of the project which will be\n     *     billed for the request.\n     * @param {GetNotificationMetadataCallback} [callback] Callback function.\n     * @returns {Promise<GetNotificationMetadataResponse>}\n     *\n     * @example\n     * ```\n     * const {Storage} = require('@google-cloud/storage');\n     * const storage = new Storage();\n     * const myBucket = storage.bucket('my-bucket');\n     * const notification = myBucket.notification('1');\n     *\n     * notification.getMetadata(function(err, metadata, apiResponse) {});\n     *\n     * //-\n     * // If the callback is omitted, we'll return a Promise.\n     * //-\n     * notification.getMetadata().then(function(data) {\n     *   const metadata = data[0];\n     *   const apiResponse = data[1];\n     * });\n     *\n     * ```\n     * @example <caption>include:samples/getMetadataNotifications.js</caption>\n     * region_tag:storage_print_pubsub_bucket_notification\n     * Another example:\n     */\n    getMetadata(optionsOrCallback, callback) {\n        const options = typeof optionsOrCallback === 'object' ? optionsOrCallback : {};\n        callback =\n            typeof optionsOrCallback === 'function' ? optionsOrCallback : callback;\n        this.request({\n            uri: '',\n            qs: options,\n        }, (err, resp) => {\n            if (err) {\n                callback(err, null, resp);\n                return;\n            }\n            this.metadata = resp;\n            callback(null, this.metadata, resp);\n        });\n    }\n}\nexports.Notification = Notification;\n/*! Developer Documentation\n *\n * All async methods (except for streams) will return a Promise in the event\n * that a callback is omitted.\n */\n(0, promisify_1.promisifyAll)(Notification);\n//# sourceMappingURL=notification.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,YAAY,GAAG,KAAK,CAAC;AAC7B,MAAMC,eAAe,GAAGC,OAAO,CAAC,iBAAiB,CAAC;AAClD,MAAMC,WAAW,GAAGD,OAAO,CAAC,yBAAyB,CAAC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMF,YAAY,SAASC,eAAe,CAACG,aAAa,CAAC;EACrDC,WAAWA,CAACC,MAAM,EAAEC,EAAE,EAAE;IACpB,MAAMC,OAAO,GAAG;MACZ;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYC,MAAM,EAAE,IAAI;MACZ;AACZ;AACA;AACA;MACY;AACZ;AACA;AACA;AACA;MACY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACYC,MAAM,EAAE;IACZ,CAAC;IACD,KAAK,CAAC;MACFC,MAAM,EAAEL,MAAM;MACdM,OAAO,EAAE,sBAAsB;MAC/BL,EAAE,EAAEA,EAAE,CAACM,QAAQ,CAAC,CAAC;MACjBC,YAAY,EAAER,MAAM,CAACS,kBAAkB,CAACC,IAAI,CAACV,MAAM,CAAC;MACpDE;IACJ,CAAC,CAAC;EACN;EACA;AACJ;AACA;AACA;EACI;AACJ;AACA;AACA;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"},"metadata":{},"sourceType":"script","externalDependencies":[]}