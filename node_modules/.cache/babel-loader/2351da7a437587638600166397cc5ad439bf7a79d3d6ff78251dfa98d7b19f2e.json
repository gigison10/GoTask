{"ast":null,"code":"\"use strict\";\n\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateUserInput = exports.Serializer = void 0;\nconst convert_1 = require(\"./convert\");\nconst field_value_1 = require(\"./field-value\");\nconst geo_point_1 = require(\"./geo-point\");\nconst index_1 = require(\"./index\");\nconst path_1 = require(\"./path\");\nconst timestamp_1 = require(\"./timestamp\");\nconst util_1 = require(\"./util\");\nconst validate_1 = require(\"./validate\");\n/**\n * The maximum depth of a Firestore object.\n *\n * @private\n * @internal\n */\nconst MAX_DEPTH = 20;\n/**\n * Serializer that is used to convert between JavaScript types and their\n * Firestore Protobuf representation.\n *\n * @private\n * @internal\n */\nclass Serializer {\n  constructor(firestore) {\n    // Instead of storing the `firestore` object, we store just a reference to\n    // its `.doc()` method. This avoid a circular reference, which breaks\n    // JSON.stringify().\n    this.createReference = path => firestore.doc(path);\n    this.createInteger = n => firestore._settings.useBigInt ? BigInt(n) : Number(n);\n    this.allowUndefined = !!firestore._settings.ignoreUndefinedProperties;\n  }\n  /**\n   * Encodes a JavaScript object into the Firestore 'Fields' representation.\n   *\n   * @private\n   * @internal\n   * @param obj The object to encode.\n   * @returns The Firestore 'Fields' representation\n   */\n  encodeFields(obj) {\n    const fields = {};\n    for (const prop of Object.keys(obj)) {\n      const val = this.encodeValue(obj[prop]);\n      if (val) {\n        fields[prop] = val;\n      }\n    }\n    return fields;\n  }\n  /**\n   * Encodes a JavaScript value into the Firestore 'Value' representation.\n   *\n   * @private\n   * @internal\n   * @param val The object to encode\n   * @returns The Firestore Proto or null if we are deleting a field.\n   */\n  encodeValue(val) {\n    if (val instanceof field_value_1.FieldTransform) {\n      return null;\n    }\n    if (typeof val === 'string') {\n      return {\n        stringValue: val\n      };\n    }\n    if (typeof val === 'boolean') {\n      return {\n        booleanValue: val\n      };\n    }\n    if (typeof val === 'number') {\n      const isNegativeZero = val === 0 && 1 / val === 1 / -0;\n      if (Number.isSafeInteger(val) && !isNegativeZero) {\n        return {\n          integerValue: val\n        };\n      } else {\n        return {\n          doubleValue: val\n        };\n      }\n    }\n    if (typeof val === 'bigint') {\n      return {\n        integerValue: val.toString()\n      };\n    }\n    if (val instanceof Date) {\n      const timestamp = timestamp_1.Timestamp.fromDate(val);\n      return {\n        timestampValue: {\n          seconds: timestamp.seconds,\n          nanos: timestamp.nanoseconds\n        }\n      };\n    }\n    if (isMomentJsType(val)) {\n      const timestamp = timestamp_1.Timestamp.fromDate(val.toDate());\n      return {\n        timestampValue: {\n          seconds: timestamp.seconds,\n          nanos: timestamp.nanoseconds\n        }\n      };\n    }\n    if (val === null) {\n      return {\n        nullValue: 'NULL_VALUE'\n      };\n    }\n    if (val instanceof Buffer || val instanceof Uint8Array) {\n      return {\n        bytesValue: val\n      };\n    }\n    if ((0, util_1.isObject)(val)) {\n      const toProto = val['toProto'];\n      if (typeof toProto === 'function') {\n        return toProto.bind(val)();\n      }\n    }\n    if (Array.isArray(val)) {\n      const array = {\n        arrayValue: {}\n      };\n      if (val.length > 0) {\n        array.arrayValue.values = [];\n        for (let i = 0; i < val.length; ++i) {\n          const enc = this.encodeValue(val[i]);\n          if (enc) {\n            array.arrayValue.values.push(enc);\n          }\n        }\n      }\n      return array;\n    }\n    if (typeof val === 'object' && (0, util_1.isPlainObject)(val)) {\n      const map = {\n        mapValue: {}\n      };\n      // If we encounter an empty object, we always need to send it to make sure\n      // the server creates a map entry.\n      if (!(0, util_1.isEmpty)(val)) {\n        map.mapValue.fields = this.encodeFields(val);\n        if ((0, util_1.isEmpty)(map.mapValue.fields)) {\n          return null;\n        }\n      }\n      return map;\n    }\n    if (val === undefined && this.allowUndefined) {\n      return null;\n    }\n    throw new Error(`Cannot encode value: ${val}`);\n  }\n  /**\n   * Decodes a single Firestore 'Value' Protobuf.\n   *\n   * @private\n   * @internal\n   * @param proto A Firestore 'Value' Protobuf.\n   * @returns The converted JS type.\n   */\n  decodeValue(proto) {\n    const valueType = (0, convert_1.detectValueType)(proto);\n    switch (valueType) {\n      case 'stringValue':\n        {\n          return proto.stringValue;\n        }\n      case 'booleanValue':\n        {\n          return proto.booleanValue;\n        }\n      case 'integerValue':\n        {\n          return this.createInteger(proto.integerValue);\n        }\n      case 'doubleValue':\n        {\n          return proto.doubleValue;\n        }\n      case 'timestampValue':\n        {\n          return timestamp_1.Timestamp.fromProto(proto.timestampValue);\n        }\n      case 'referenceValue':\n        {\n          const resourcePath = path_1.QualifiedResourcePath.fromSlashSeparatedString(proto.referenceValue);\n          return this.createReference(resourcePath.relativeName);\n        }\n      case 'arrayValue':\n        {\n          const array = [];\n          if (Array.isArray(proto.arrayValue.values)) {\n            for (const value of proto.arrayValue.values) {\n              array.push(this.decodeValue(value));\n            }\n          }\n          return array;\n        }\n      case 'nullValue':\n        {\n          return null;\n        }\n      case 'mapValue':\n        {\n          const obj = {};\n          const fields = proto.mapValue.fields;\n          if (fields) {\n            for (const prop of Object.keys(fields)) {\n              obj[prop] = this.decodeValue(fields[prop]);\n            }\n          }\n          return obj;\n        }\n      case 'geoPointValue':\n        {\n          return geo_point_1.GeoPoint.fromProto(proto.geoPointValue);\n        }\n      case 'bytesValue':\n        {\n          return proto.bytesValue;\n        }\n      default:\n        {\n          throw new Error('Cannot decode type from Firestore Value: ' + JSON.stringify(proto));\n        }\n    }\n  }\n}\nexports.Serializer = Serializer;\n/**\n * Validates a JavaScript value for usage as a Firestore value.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value JavaScript value to validate.\n * @param desc A description of the expected type.\n * @param path The field path to validate.\n * @param options Validation options\n * @param level The current depth of the traversal. This is used to decide\n * whether undefined values or deletes are allowed.\n * @param inArray Whether we are inside an array.\n * @throws when the object is invalid.\n */\nfunction validateUserInput(arg, value, desc, options, path, level, inArray) {\n  if (path && path.size - 1 > MAX_DEPTH) {\n    throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} Input object is deeper than ${MAX_DEPTH} levels or contains a cycle.`);\n  }\n  level = level || 0;\n  inArray = inArray || false;\n  const fieldPathMessage = path ? ` (found in field \"${path}\")` : '';\n  if (Array.isArray(value)) {\n    for (let i = 0; i < value.length; ++i) {\n      validateUserInput(arg, value[i], desc, options, path ? path.append(String(i)) : new path_1.FieldPath(String(i)), level + 1, /* inArray= */true);\n    }\n  } else if ((0, util_1.isPlainObject)(value)) {\n    for (const prop of Object.keys(value)) {\n      validateUserInput(arg, value[prop], desc, options, path ? path.append(new path_1.FieldPath(prop)) : new path_1.FieldPath(prop), level + 1, inArray);\n    }\n  } else if (value === undefined) {\n    if (options.allowUndefined && level === 0) {\n      throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} \"undefined\" values are only ignored inside of objects.`);\n    } else if (!options.allowUndefined) {\n      throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} Cannot use \"undefined\" as a Firestore value${fieldPathMessage}. ` + 'If you want to ignore undefined values, enable `ignoreUndefinedProperties`.');\n    }\n  } else if (value instanceof field_value_1.DeleteTransform) {\n    if (inArray) {\n      throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} ${value.methodName}() cannot be used inside of an array${fieldPathMessage}.`);\n    } else if (options.allowDeletes === 'none') {\n      throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} ${value.methodName}() must appear at the top-level and can only be used in update() ` + `or set() with {merge:true}${fieldPathMessage}.`);\n    } else if (options.allowDeletes === 'root') {\n      if (level === 0) {\n        // Ok (update() with UpdateData).\n      } else if (level === 1 && (path === null || path === void 0 ? void 0 : path.size) === 1) {\n        // Ok (update with varargs).\n      } else {\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} ${value.methodName}() must appear at the top-level and can only be used in update() ` + `or set() with {merge:true}${fieldPathMessage}.`);\n      }\n    }\n  } else if (value instanceof field_value_1.FieldTransform) {\n    if (inArray) {\n      throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} ${value.methodName}() cannot be used inside of an array${fieldPathMessage}.`);\n    } else if (!options.allowTransforms) {\n      throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} ${value.methodName}() can only be used in set(), create() or update()${fieldPathMessage}.`);\n    }\n  } else if (value instanceof path_1.FieldPath) {\n    throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} Cannot use object of type \"FieldPath\" as a Firestore value${fieldPathMessage}.`);\n  } else if (value instanceof index_1.DocumentReference) {\n    // Ok.\n  } else if (value instanceof geo_point_1.GeoPoint) {\n    // Ok.\n  } else if (value instanceof timestamp_1.Timestamp || value instanceof Date) {\n    // Ok.\n  } else if (isMomentJsType(value)) {\n    // Ok.\n  } else if (value instanceof Buffer || value instanceof Uint8Array) {\n    // Ok.\n  } else if (value === null) {\n    // Ok.\n  } else if (typeof value === 'object') {\n    throw new Error((0, validate_1.customObjectMessage)(arg, value, path));\n  }\n}\nexports.validateUserInput = validateUserInput;\n/**\n * Returns true if value is a MomentJs date object.\n * @private\n * @internal\n */\nfunction isMomentJsType(value) {\n  return typeof value === 'object' && value !== null && value.constructor && value.constructor.name === 'Moment' && typeof value.toDate === 'function';\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","validateUserInput","Serializer","convert_1","require","field_value_1","geo_point_1","index_1","path_1","timestamp_1","util_1","validate_1","MAX_DEPTH","constructor","firestore","createReference","path","doc","createInteger","n","_settings","useBigInt","BigInt","Number","allowUndefined","ignoreUndefinedProperties","encodeFields","obj","fields","prop","keys","val","encodeValue","FieldTransform","stringValue","booleanValue","isNegativeZero","isSafeInteger","integerValue","doubleValue","toString","Date","timestamp","Timestamp","fromDate","timestampValue","seconds","nanos","nanoseconds","isMomentJsType","toDate","nullValue","Buffer","Uint8Array","bytesValue","isObject","toProto","bind","Array","isArray","array","arrayValue","length","values","i","enc","push","isPlainObject","map","mapValue","isEmpty","undefined","Error","decodeValue","proto","valueType","detectValueType","fromProto","resourcePath","QualifiedResourcePath","fromSlashSeparatedString","referenceValue","relativeName","GeoPoint","geoPointValue","JSON","stringify","arg","desc","options","level","inArray","size","invalidArgumentMessage","fieldPathMessage","append","String","FieldPath","DeleteTransform","methodName","allowDeletes","allowTransforms","DocumentReference","customObjectMessage","name"],"sources":["D:/Coding/React/taskmybusiness/node_modules/@google-cloud/firestore/build/src/serializer.js"],"sourcesContent":["\"use strict\";\n/*!\n * Copyright 2019 Google Inc. All Rights Reserved.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.validateUserInput = exports.Serializer = void 0;\nconst convert_1 = require(\"./convert\");\nconst field_value_1 = require(\"./field-value\");\nconst geo_point_1 = require(\"./geo-point\");\nconst index_1 = require(\"./index\");\nconst path_1 = require(\"./path\");\nconst timestamp_1 = require(\"./timestamp\");\nconst util_1 = require(\"./util\");\nconst validate_1 = require(\"./validate\");\n/**\n * The maximum depth of a Firestore object.\n *\n * @private\n * @internal\n */\nconst MAX_DEPTH = 20;\n/**\n * Serializer that is used to convert between JavaScript types and their\n * Firestore Protobuf representation.\n *\n * @private\n * @internal\n */\nclass Serializer {\n    constructor(firestore) {\n        // Instead of storing the `firestore` object, we store just a reference to\n        // its `.doc()` method. This avoid a circular reference, which breaks\n        // JSON.stringify().\n        this.createReference = path => firestore.doc(path);\n        this.createInteger = n => firestore._settings.useBigInt ? BigInt(n) : Number(n);\n        this.allowUndefined = !!firestore._settings.ignoreUndefinedProperties;\n    }\n    /**\n     * Encodes a JavaScript object into the Firestore 'Fields' representation.\n     *\n     * @private\n     * @internal\n     * @param obj The object to encode.\n     * @returns The Firestore 'Fields' representation\n     */\n    encodeFields(obj) {\n        const fields = {};\n        for (const prop of Object.keys(obj)) {\n            const val = this.encodeValue(obj[prop]);\n            if (val) {\n                fields[prop] = val;\n            }\n        }\n        return fields;\n    }\n    /**\n     * Encodes a JavaScript value into the Firestore 'Value' representation.\n     *\n     * @private\n     * @internal\n     * @param val The object to encode\n     * @returns The Firestore Proto or null if we are deleting a field.\n     */\n    encodeValue(val) {\n        if (val instanceof field_value_1.FieldTransform) {\n            return null;\n        }\n        if (typeof val === 'string') {\n            return {\n                stringValue: val,\n            };\n        }\n        if (typeof val === 'boolean') {\n            return {\n                booleanValue: val,\n            };\n        }\n        if (typeof val === 'number') {\n            const isNegativeZero = val === 0 && 1 / val === 1 / -0;\n            if (Number.isSafeInteger(val) && !isNegativeZero) {\n                return {\n                    integerValue: val,\n                };\n            }\n            else {\n                return {\n                    doubleValue: val,\n                };\n            }\n        }\n        if (typeof val === 'bigint') {\n            return {\n                integerValue: val.toString(),\n            };\n        }\n        if (val instanceof Date) {\n            const timestamp = timestamp_1.Timestamp.fromDate(val);\n            return {\n                timestampValue: {\n                    seconds: timestamp.seconds,\n                    nanos: timestamp.nanoseconds,\n                },\n            };\n        }\n        if (isMomentJsType(val)) {\n            const timestamp = timestamp_1.Timestamp.fromDate(val.toDate());\n            return {\n                timestampValue: {\n                    seconds: timestamp.seconds,\n                    nanos: timestamp.nanoseconds,\n                },\n            };\n        }\n        if (val === null) {\n            return {\n                nullValue: 'NULL_VALUE',\n            };\n        }\n        if (val instanceof Buffer || val instanceof Uint8Array) {\n            return {\n                bytesValue: val,\n            };\n        }\n        if ((0, util_1.isObject)(val)) {\n            const toProto = val['toProto'];\n            if (typeof toProto === 'function') {\n                return toProto.bind(val)();\n            }\n        }\n        if (Array.isArray(val)) {\n            const array = {\n                arrayValue: {},\n            };\n            if (val.length > 0) {\n                array.arrayValue.values = [];\n                for (let i = 0; i < val.length; ++i) {\n                    const enc = this.encodeValue(val[i]);\n                    if (enc) {\n                        array.arrayValue.values.push(enc);\n                    }\n                }\n            }\n            return array;\n        }\n        if (typeof val === 'object' && (0, util_1.isPlainObject)(val)) {\n            const map = {\n                mapValue: {},\n            };\n            // If we encounter an empty object, we always need to send it to make sure\n            // the server creates a map entry.\n            if (!(0, util_1.isEmpty)(val)) {\n                map.mapValue.fields = this.encodeFields(val);\n                if ((0, util_1.isEmpty)(map.mapValue.fields)) {\n                    return null;\n                }\n            }\n            return map;\n        }\n        if (val === undefined && this.allowUndefined) {\n            return null;\n        }\n        throw new Error(`Cannot encode value: ${val}`);\n    }\n    /**\n     * Decodes a single Firestore 'Value' Protobuf.\n     *\n     * @private\n     * @internal\n     * @param proto A Firestore 'Value' Protobuf.\n     * @returns The converted JS type.\n     */\n    decodeValue(proto) {\n        const valueType = (0, convert_1.detectValueType)(proto);\n        switch (valueType) {\n            case 'stringValue': {\n                return proto.stringValue;\n            }\n            case 'booleanValue': {\n                return proto.booleanValue;\n            }\n            case 'integerValue': {\n                return this.createInteger(proto.integerValue);\n            }\n            case 'doubleValue': {\n                return proto.doubleValue;\n            }\n            case 'timestampValue': {\n                return timestamp_1.Timestamp.fromProto(proto.timestampValue);\n            }\n            case 'referenceValue': {\n                const resourcePath = path_1.QualifiedResourcePath.fromSlashSeparatedString(proto.referenceValue);\n                return this.createReference(resourcePath.relativeName);\n            }\n            case 'arrayValue': {\n                const array = [];\n                if (Array.isArray(proto.arrayValue.values)) {\n                    for (const value of proto.arrayValue.values) {\n                        array.push(this.decodeValue(value));\n                    }\n                }\n                return array;\n            }\n            case 'nullValue': {\n                return null;\n            }\n            case 'mapValue': {\n                const obj = {};\n                const fields = proto.mapValue.fields;\n                if (fields) {\n                    for (const prop of Object.keys(fields)) {\n                        obj[prop] = this.decodeValue(fields[prop]);\n                    }\n                }\n                return obj;\n            }\n            case 'geoPointValue': {\n                return geo_point_1.GeoPoint.fromProto(proto.geoPointValue);\n            }\n            case 'bytesValue': {\n                return proto.bytesValue;\n            }\n            default: {\n                throw new Error('Cannot decode type from Firestore Value: ' + JSON.stringify(proto));\n            }\n        }\n    }\n}\nexports.Serializer = Serializer;\n/**\n * Validates a JavaScript value for usage as a Firestore value.\n *\n * @private\n * @internal\n * @param arg The argument name or argument index (for varargs methods).\n * @param value JavaScript value to validate.\n * @param desc A description of the expected type.\n * @param path The field path to validate.\n * @param options Validation options\n * @param level The current depth of the traversal. This is used to decide\n * whether undefined values or deletes are allowed.\n * @param inArray Whether we are inside an array.\n * @throws when the object is invalid.\n */\nfunction validateUserInput(arg, value, desc, options, path, level, inArray) {\n    if (path && path.size - 1 > MAX_DEPTH) {\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} Input object is deeper than ${MAX_DEPTH} levels or contains a cycle.`);\n    }\n    level = level || 0;\n    inArray = inArray || false;\n    const fieldPathMessage = path ? ` (found in field \"${path}\")` : '';\n    if (Array.isArray(value)) {\n        for (let i = 0; i < value.length; ++i) {\n            validateUserInput(arg, value[i], desc, options, path ? path.append(String(i)) : new path_1.FieldPath(String(i)), level + 1, \n            /* inArray= */ true);\n        }\n    }\n    else if ((0, util_1.isPlainObject)(value)) {\n        for (const prop of Object.keys(value)) {\n            validateUserInput(arg, value[prop], desc, options, path ? path.append(new path_1.FieldPath(prop)) : new path_1.FieldPath(prop), level + 1, inArray);\n        }\n    }\n    else if (value === undefined) {\n        if (options.allowUndefined && level === 0) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} \"undefined\" values are only ignored inside of objects.`);\n        }\n        else if (!options.allowUndefined) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} Cannot use \"undefined\" as a Firestore value${fieldPathMessage}. ` +\n                'If you want to ignore undefined values, enable `ignoreUndefinedProperties`.');\n        }\n    }\n    else if (value instanceof field_value_1.DeleteTransform) {\n        if (inArray) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} ${value.methodName}() cannot be used inside of an array${fieldPathMessage}.`);\n        }\n        else if (options.allowDeletes === 'none') {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} ${value.methodName}() must appear at the top-level and can only be used in update() ` +\n                `or set() with {merge:true}${fieldPathMessage}.`);\n        }\n        else if (options.allowDeletes === 'root') {\n            if (level === 0) {\n                // Ok (update() with UpdateData).\n            }\n            else if (level === 1 && (path === null || path === void 0 ? void 0 : path.size) === 1) {\n                // Ok (update with varargs).\n            }\n            else {\n                throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} ${value.methodName}() must appear at the top-level and can only be used in update() ` +\n                    `or set() with {merge:true}${fieldPathMessage}.`);\n            }\n        }\n    }\n    else if (value instanceof field_value_1.FieldTransform) {\n        if (inArray) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} ${value.methodName}() cannot be used inside of an array${fieldPathMessage}.`);\n        }\n        else if (!options.allowTransforms) {\n            throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} ${value.methodName}() can only be used in set(), create() or update()${fieldPathMessage}.`);\n        }\n    }\n    else if (value instanceof path_1.FieldPath) {\n        throw new Error(`${(0, validate_1.invalidArgumentMessage)(arg, desc)} Cannot use object of type \"FieldPath\" as a Firestore value${fieldPathMessage}.`);\n    }\n    else if (value instanceof index_1.DocumentReference) {\n        // Ok.\n    }\n    else if (value instanceof geo_point_1.GeoPoint) {\n        // Ok.\n    }\n    else if (value instanceof timestamp_1.Timestamp || value instanceof Date) {\n        // Ok.\n    }\n    else if (isMomentJsType(value)) {\n        // Ok.\n    }\n    else if (value instanceof Buffer || value instanceof Uint8Array) {\n        // Ok.\n    }\n    else if (value === null) {\n        // Ok.\n    }\n    else if (typeof value === 'object') {\n        throw new Error((0, validate_1.customObjectMessage)(arg, value, path));\n    }\n}\nexports.validateUserInput = validateUserInput;\n/**\n * Returns true if value is a MomentJs date object.\n * @private\n * @internal\n */\nfunction isMomentJsType(value) {\n    return (typeof value === 'object' &&\n        value !== null &&\n        value.constructor &&\n        value.constructor.name === 'Moment' &&\n        typeof value.toDate === 'function');\n}\n//# sourceMappingURL=serializer.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,iBAAiB,GAAGF,OAAO,CAACG,UAAU,GAAG,KAAK,CAAC;AACvD,MAAMC,SAAS,GAAGC,OAAO,CAAC,WAAW,CAAC;AACtC,MAAMC,aAAa,GAAGD,OAAO,CAAC,eAAe,CAAC;AAC9C,MAAME,WAAW,GAAGF,OAAO,CAAC,aAAa,CAAC;AAC1C,MAAMG,OAAO,GAAGH,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMI,MAAM,GAAGJ,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMK,WAAW,GAAGL,OAAO,CAAC,aAAa,CAAC;AAC1C,MAAMM,MAAM,GAAGN,OAAO,CAAC,QAAQ,CAAC;AAChC,MAAMO,UAAU,GAAGP,OAAO,CAAC,YAAY,CAAC;AACxC;AACA;AACA;AACA;AACA;AACA;AACA,MAAMQ,SAAS,GAAG,EAAE;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMV,UAAU,CAAC;EACbW,WAAWA,CAACC,SAAS,EAAE;IACnB;IACA;IACA;IACA,IAAI,CAACC,eAAe,GAAGC,IAAI,IAAIF,SAAS,CAACG,GAAG,CAACD,IAAI,CAAC;IAClD,IAAI,CAACE,aAAa,GAAGC,CAAC,IAAIL,SAAS,CAACM,SAAS,CAACC,SAAS,GAAGC,MAAM,CAACH,CAAC,CAAC,GAAGI,MAAM,CAACJ,CAAC,CAAC;IAC/E,IAAI,CAACK,cAAc,GAAG,CAAC,CAACV,SAAS,CAACM,SAAS,CAACK,yBAAyB;EACzE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACIC,YAAYA,CAACC,GAAG,EAAE;IACd,MAAMC,MAAM,GAAG,CAAC,CAAC;IACjB,KAAK,MAAMC,IAAI,IAAIhC,MAAM,CAACiC,IAAI,CAACH,GAAG,CAAC,EAAE;MACjC,MAAMI,GAAG,GAAG,IAAI,CAACC,WAAW,CAACL,GAAG,CAACE,IAAI,CAAC,CAAC;MACvC,IAAIE,GAAG,EAAE;QACLH,MAAM,CAACC,IAAI,CAAC,GAAGE,GAAG;MACtB;IACJ;IACA,OAAOH,MAAM;EACjB;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACII,WAAWA,CAACD,GAAG,EAAE;IACb,IAAIA,GAAG,YAAY1B,aAAa,CAAC4B,cAAc,EAAE;MAC7C,OAAO,IAAI;IACf;IACA,IAAI,OAAOF,GAAG,KAAK,QAAQ,EAAE;MACzB,OAAO;QACHG,WAAW,EAAEH;MACjB,CAAC;IACL;IACA,IAAI,OAAOA,GAAG,KAAK,SAAS,EAAE;MAC1B,OAAO;QACHI,YAAY,EAAEJ;MAClB,CAAC;IACL;IACA,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;MACzB,MAAMK,cAAc,GAAGL,GAAG,KAAK,CAAC,IAAI,CAAC,GAAGA,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC;MACtD,IAAIR,MAAM,CAACc,aAAa,CAACN,GAAG,CAAC,IAAI,CAACK,cAAc,EAAE;QAC9C,OAAO;UACHE,YAAY,EAAEP;QAClB,CAAC;MACL,CAAC,MACI;QACD,OAAO;UACHQ,WAAW,EAAER;QACjB,CAAC;MACL;IACJ;IACA,IAAI,OAAOA,GAAG,KAAK,QAAQ,EAAE;MACzB,OAAO;QACHO,YAAY,EAAEP,GAAG,CAACS,QAAQ,CAAC;MAC/B,CAAC;IACL;IACA,IAAIT,GAAG,YAAYU,IAAI,EAAE;MACrB,MAAMC,SAAS,GAAGjC,WAAW,CAACkC,SAAS,CAACC,QAAQ,CAACb,GAAG,CAAC;MACrD,OAAO;QACHc,cAAc,EAAE;UACZC,OAAO,EAAEJ,SAAS,CAACI,OAAO;UAC1BC,KAAK,EAAEL,SAAS,CAACM;QACrB;MACJ,CAAC;IACL;IACA,IAAIC,cAAc,CAAClB,GAAG,CAAC,EAAE;MACrB,MAAMW,SAAS,GAAGjC,WAAW,CAACkC,SAAS,CAACC,QAAQ,CAACb,GAAG,CAACmB,MAAM,CAAC,CAAC,CAAC;MAC9D,OAAO;QACHL,cAAc,EAAE;UACZC,OAAO,EAAEJ,SAAS,CAACI,OAAO;UAC1BC,KAAK,EAAEL,SAAS,CAACM;QACrB;MACJ,CAAC;IACL;IACA,IAAIjB,GAAG,KAAK,IAAI,EAAE;MACd,OAAO;QACHoB,SAAS,EAAE;MACf,CAAC;IACL;IACA,IAAIpB,GAAG,YAAYqB,MAAM,IAAIrB,GAAG,YAAYsB,UAAU,EAAE;MACpD,OAAO;QACHC,UAAU,EAAEvB;MAChB,CAAC;IACL;IACA,IAAI,CAAC,CAAC,EAAErB,MAAM,CAAC6C,QAAQ,EAAExB,GAAG,CAAC,EAAE;MAC3B,MAAMyB,OAAO,GAAGzB,GAAG,CAAC,SAAS,CAAC;MAC9B,IAAI,OAAOyB,OAAO,KAAK,UAAU,EAAE;QAC/B,OAAOA,OAAO,CAACC,IAAI,CAAC1B,GAAG,CAAC,CAAC,CAAC;MAC9B;IACJ;IACA,IAAI2B,KAAK,CAACC,OAAO,CAAC5B,GAAG,CAAC,EAAE;MACpB,MAAM6B,KAAK,GAAG;QACVC,UAAU,EAAE,CAAC;MACjB,CAAC;MACD,IAAI9B,GAAG,CAAC+B,MAAM,GAAG,CAAC,EAAE;QAChBF,KAAK,CAACC,UAAU,CAACE,MAAM,GAAG,EAAE;QAC5B,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGjC,GAAG,CAAC+B,MAAM,EAAE,EAAEE,CAAC,EAAE;UACjC,MAAMC,GAAG,GAAG,IAAI,CAACjC,WAAW,CAACD,GAAG,CAACiC,CAAC,CAAC,CAAC;UACpC,IAAIC,GAAG,EAAE;YACLL,KAAK,CAACC,UAAU,CAACE,MAAM,CAACG,IAAI,CAACD,GAAG,CAAC;UACrC;QACJ;MACJ;MACA,OAAOL,KAAK;IAChB;IACA,IAAI,OAAO7B,GAAG,KAAK,QAAQ,IAAI,CAAC,CAAC,EAAErB,MAAM,CAACyD,aAAa,EAAEpC,GAAG,CAAC,EAAE;MAC3D,MAAMqC,GAAG,GAAG;QACRC,QAAQ,EAAE,CAAC;MACf,CAAC;MACD;MACA;MACA,IAAI,CAAC,CAAC,CAAC,EAAE3D,MAAM,CAAC4D,OAAO,EAAEvC,GAAG,CAAC,EAAE;QAC3BqC,GAAG,CAACC,QAAQ,CAACzC,MAAM,GAAG,IAAI,CAACF,YAAY,CAACK,GAAG,CAAC;QAC5C,IAAI,CAAC,CAAC,EAAErB,MAAM,CAAC4D,OAAO,EAAEF,GAAG,CAACC,QAAQ,CAACzC,MAAM,CAAC,EAAE;UAC1C,OAAO,IAAI;QACf;MACJ;MACA,OAAOwC,GAAG;IACd;IACA,IAAIrC,GAAG,KAAKwC,SAAS,IAAI,IAAI,CAAC/C,cAAc,EAAE;MAC1C,OAAO,IAAI;IACf;IACA,MAAM,IAAIgD,KAAK,CAAE,wBAAuBzC,GAAI,EAAC,CAAC;EAClD;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;EACI0C,WAAWA,CAACC,KAAK,EAAE;IACf,MAAMC,SAAS,GAAG,CAAC,CAAC,EAAExE,SAAS,CAACyE,eAAe,EAAEF,KAAK,CAAC;IACvD,QAAQC,SAAS;MACb,KAAK,aAAa;QAAE;UAChB,OAAOD,KAAK,CAACxC,WAAW;QAC5B;MACA,KAAK,cAAc;QAAE;UACjB,OAAOwC,KAAK,CAACvC,YAAY;QAC7B;MACA,KAAK,cAAc;QAAE;UACjB,OAAO,IAAI,CAACjB,aAAa,CAACwD,KAAK,CAACpC,YAAY,CAAC;QACjD;MACA,KAAK,aAAa;QAAE;UAChB,OAAOoC,KAAK,CAACnC,WAAW;QAC5B;MACA,KAAK,gBAAgB;QAAE;UACnB,OAAO9B,WAAW,CAACkC,SAAS,CAACkC,SAAS,CAACH,KAAK,CAAC7B,cAAc,CAAC;QAChE;MACA,KAAK,gBAAgB;QAAE;UACnB,MAAMiC,YAAY,GAAGtE,MAAM,CAACuE,qBAAqB,CAACC,wBAAwB,CAACN,KAAK,CAACO,cAAc,CAAC;UAChG,OAAO,IAAI,CAAClE,eAAe,CAAC+D,YAAY,CAACI,YAAY,CAAC;QAC1D;MACA,KAAK,YAAY;QAAE;UACf,MAAMtB,KAAK,GAAG,EAAE;UAChB,IAAIF,KAAK,CAACC,OAAO,CAACe,KAAK,CAACb,UAAU,CAACE,MAAM,CAAC,EAAE;YACxC,KAAK,MAAM/D,KAAK,IAAI0E,KAAK,CAACb,UAAU,CAACE,MAAM,EAAE;cACzCH,KAAK,CAACM,IAAI,CAAC,IAAI,CAACO,WAAW,CAACzE,KAAK,CAAC,CAAC;YACvC;UACJ;UACA,OAAO4D,KAAK;QAChB;MACA,KAAK,WAAW;QAAE;UACd,OAAO,IAAI;QACf;MACA,KAAK,UAAU;QAAE;UACb,MAAMjC,GAAG,GAAG,CAAC,CAAC;UACd,MAAMC,MAAM,GAAG8C,KAAK,CAACL,QAAQ,CAACzC,MAAM;UACpC,IAAIA,MAAM,EAAE;YACR,KAAK,MAAMC,IAAI,IAAIhC,MAAM,CAACiC,IAAI,CAACF,MAAM,CAAC,EAAE;cACpCD,GAAG,CAACE,IAAI,CAAC,GAAG,IAAI,CAAC4C,WAAW,CAAC7C,MAAM,CAACC,IAAI,CAAC,CAAC;YAC9C;UACJ;UACA,OAAOF,GAAG;QACd;MACA,KAAK,eAAe;QAAE;UAClB,OAAOrB,WAAW,CAAC6E,QAAQ,CAACN,SAAS,CAACH,KAAK,CAACU,aAAa,CAAC;QAC9D;MACA,KAAK,YAAY;QAAE;UACf,OAAOV,KAAK,CAACpB,UAAU;QAC3B;MACA;QAAS;UACL,MAAM,IAAIkB,KAAK,CAAC,2CAA2C,GAAGa,IAAI,CAACC,SAAS,CAACZ,KAAK,CAAC,CAAC;QACxF;IACJ;EACJ;AACJ;AACA3E,OAAO,CAACG,UAAU,GAAGA,UAAU;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASD,iBAAiBA,CAACsF,GAAG,EAAEvF,KAAK,EAAEwF,IAAI,EAAEC,OAAO,EAAEzE,IAAI,EAAE0E,KAAK,EAAEC,OAAO,EAAE;EACxE,IAAI3E,IAAI,IAAIA,IAAI,CAAC4E,IAAI,GAAG,CAAC,GAAGhF,SAAS,EAAE;IACnC,MAAM,IAAI4D,KAAK,CAAE,GAAE,CAAC,CAAC,EAAE7D,UAAU,CAACkF,sBAAsB,EAAEN,GAAG,EAAEC,IAAI,CAAE,gCAA+B5E,SAAU,8BAA6B,CAAC;EAChJ;EACA8E,KAAK,GAAGA,KAAK,IAAI,CAAC;EAClBC,OAAO,GAAGA,OAAO,IAAI,KAAK;EAC1B,MAAMG,gBAAgB,GAAG9E,IAAI,GAAI,qBAAoBA,IAAK,IAAG,GAAG,EAAE;EAClE,IAAI0C,KAAK,CAACC,OAAO,CAAC3D,KAAK,CAAC,EAAE;IACtB,KAAK,IAAIgE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGhE,KAAK,CAAC8D,MAAM,EAAE,EAAEE,CAAC,EAAE;MACnC/D,iBAAiB,CAACsF,GAAG,EAAEvF,KAAK,CAACgE,CAAC,CAAC,EAAEwB,IAAI,EAAEC,OAAO,EAAEzE,IAAI,GAAGA,IAAI,CAAC+E,MAAM,CAACC,MAAM,CAAChC,CAAC,CAAC,CAAC,GAAG,IAAIxD,MAAM,CAACyF,SAAS,CAACD,MAAM,CAAChC,CAAC,CAAC,CAAC,EAAE0B,KAAK,GAAG,CAAC,EAC1H,cAAe,IAAI,CAAC;IACxB;EACJ,CAAC,MACI,IAAI,CAAC,CAAC,EAAEhF,MAAM,CAACyD,aAAa,EAAEnE,KAAK,CAAC,EAAE;IACvC,KAAK,MAAM6B,IAAI,IAAIhC,MAAM,CAACiC,IAAI,CAAC9B,KAAK,CAAC,EAAE;MACnCC,iBAAiB,CAACsF,GAAG,EAAEvF,KAAK,CAAC6B,IAAI,CAAC,EAAE2D,IAAI,EAAEC,OAAO,EAAEzE,IAAI,GAAGA,IAAI,CAAC+E,MAAM,CAAC,IAAIvF,MAAM,CAACyF,SAAS,CAACpE,IAAI,CAAC,CAAC,GAAG,IAAIrB,MAAM,CAACyF,SAAS,CAACpE,IAAI,CAAC,EAAE6D,KAAK,GAAG,CAAC,EAAEC,OAAO,CAAC;IACvJ;EACJ,CAAC,MACI,IAAI3F,KAAK,KAAKuE,SAAS,EAAE;IAC1B,IAAIkB,OAAO,CAACjE,cAAc,IAAIkE,KAAK,KAAK,CAAC,EAAE;MACvC,MAAM,IAAIlB,KAAK,CAAE,GAAE,CAAC,CAAC,EAAE7D,UAAU,CAACkF,sBAAsB,EAAEN,GAAG,EAAEC,IAAI,CAAE,yDAAwD,CAAC;IAClI,CAAC,MACI,IAAI,CAACC,OAAO,CAACjE,cAAc,EAAE;MAC9B,MAAM,IAAIgD,KAAK,CAAE,GAAE,CAAC,CAAC,EAAE7D,UAAU,CAACkF,sBAAsB,EAAEN,GAAG,EAAEC,IAAI,CAAE,+CAA8CM,gBAAiB,IAAG,GACnI,6EAA6E,CAAC;IACtF;EACJ,CAAC,MACI,IAAI9F,KAAK,YAAYK,aAAa,CAAC6F,eAAe,EAAE;IACrD,IAAIP,OAAO,EAAE;MACT,MAAM,IAAInB,KAAK,CAAE,GAAE,CAAC,CAAC,EAAE7D,UAAU,CAACkF,sBAAsB,EAAEN,GAAG,EAAEC,IAAI,CAAE,IAAGxF,KAAK,CAACmG,UAAW,uCAAsCL,gBAAiB,GAAE,CAAC;IACvJ,CAAC,MACI,IAAIL,OAAO,CAACW,YAAY,KAAK,MAAM,EAAE;MACtC,MAAM,IAAI5B,KAAK,CAAE,GAAE,CAAC,CAAC,EAAE7D,UAAU,CAACkF,sBAAsB,EAAEN,GAAG,EAAEC,IAAI,CAAE,IAAGxF,KAAK,CAACmG,UAAW,mEAAkE,GACtJ,6BAA4BL,gBAAiB,GAAE,CAAC;IACzD,CAAC,MACI,IAAIL,OAAO,CAACW,YAAY,KAAK,MAAM,EAAE;MACtC,IAAIV,KAAK,KAAK,CAAC,EAAE;QACb;MAAA,CACH,MACI,IAAIA,KAAK,KAAK,CAAC,IAAI,CAAC1E,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAAC4E,IAAI,MAAM,CAAC,EAAE;QACnF;MAAA,CACH,MACI;QACD,MAAM,IAAIpB,KAAK,CAAE,GAAE,CAAC,CAAC,EAAE7D,UAAU,CAACkF,sBAAsB,EAAEN,GAAG,EAAEC,IAAI,CAAE,IAAGxF,KAAK,CAACmG,UAAW,mEAAkE,GACtJ,6BAA4BL,gBAAiB,GAAE,CAAC;MACzD;IACJ;EACJ,CAAC,MACI,IAAI9F,KAAK,YAAYK,aAAa,CAAC4B,cAAc,EAAE;IACpD,IAAI0D,OAAO,EAAE;MACT,MAAM,IAAInB,KAAK,CAAE,GAAE,CAAC,CAAC,EAAE7D,UAAU,CAACkF,sBAAsB,EAAEN,GAAG,EAAEC,IAAI,CAAE,IAAGxF,KAAK,CAACmG,UAAW,uCAAsCL,gBAAiB,GAAE,CAAC;IACvJ,CAAC,MACI,IAAI,CAACL,OAAO,CAACY,eAAe,EAAE;MAC/B,MAAM,IAAI7B,KAAK,CAAE,GAAE,CAAC,CAAC,EAAE7D,UAAU,CAACkF,sBAAsB,EAAEN,GAAG,EAAEC,IAAI,CAAE,IAAGxF,KAAK,CAACmG,UAAW,qDAAoDL,gBAAiB,GAAE,CAAC;IACrK;EACJ,CAAC,MACI,IAAI9F,KAAK,YAAYQ,MAAM,CAACyF,SAAS,EAAE;IACxC,MAAM,IAAIzB,KAAK,CAAE,GAAE,CAAC,CAAC,EAAE7D,UAAU,CAACkF,sBAAsB,EAAEN,GAAG,EAAEC,IAAI,CAAE,8DAA6DM,gBAAiB,GAAE,CAAC;EAC1J,CAAC,MACI,IAAI9F,KAAK,YAAYO,OAAO,CAAC+F,iBAAiB,EAAE;IACjD;EAAA,CACH,MACI,IAAItG,KAAK,YAAYM,WAAW,CAAC6E,QAAQ,EAAE;IAC5C;EAAA,CACH,MACI,IAAInF,KAAK,YAAYS,WAAW,CAACkC,SAAS,IAAI3C,KAAK,YAAYyC,IAAI,EAAE;IACtE;EAAA,CACH,MACI,IAAIQ,cAAc,CAACjD,KAAK,CAAC,EAAE;IAC5B;EAAA,CACH,MACI,IAAIA,KAAK,YAAYoD,MAAM,IAAIpD,KAAK,YAAYqD,UAAU,EAAE;IAC7D;EAAA,CACH,MACI,IAAIrD,KAAK,KAAK,IAAI,EAAE;IACrB;EAAA,CACH,MACI,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IAChC,MAAM,IAAIwE,KAAK,CAAC,CAAC,CAAC,EAAE7D,UAAU,CAAC4F,mBAAmB,EAAEhB,GAAG,EAAEvF,KAAK,EAAEgB,IAAI,CAAC,CAAC;EAC1E;AACJ;AACAjB,OAAO,CAACE,iBAAiB,GAAGA,iBAAiB;AAC7C;AACA;AACA;AACA;AACA;AACA,SAASgD,cAAcA,CAACjD,KAAK,EAAE;EAC3B,OAAQ,OAAOA,KAAK,KAAK,QAAQ,IAC7BA,KAAK,KAAK,IAAI,IACdA,KAAK,CAACa,WAAW,IACjBb,KAAK,CAACa,WAAW,CAAC2F,IAAI,KAAK,QAAQ,IACnC,OAAOxG,KAAK,CAACkD,MAAM,KAAK,UAAU;AAC1C"},"metadata":{},"sourceType":"script","externalDependencies":[]}