{"ast":null,"code":"import Encodings from './encodings';\nimport { UTF8Decoder, UTF8Encoder } from './implementations/utf8';\nimport { UTF16Decoder, UTF16Encoder } from './implementations/utf16';\nimport { GB18030Decoder, GB18030Encoder } from './implementations/gb18030';\nimport { Big5Decoder, Big5Encoder } from './implementations/big5';\nimport { EUCJPDecoder, EUCJPEncoder } from './implementations/euc-jp';\nimport { EUCKRDecoder, EUCKREncoder } from './implementations/euc-kr';\nimport { ISO2022JPDecoder, ISO2022JPEncoder } from './implementations/iso-2022-jp';\nimport { XUserDefinedDecoder, XUserDefinedEncoder } from './implementations/x-user-defined';\nimport { ShiftJISDecoder, ShiftJISEncoder } from './implementations/shift-jis';\nimport { SingleByteDecoder, SingleByteEncoder } from './implementations/single-byte';\nimport index from './indexes';\n\n// 5.2 Names and labels\n\n// TODO: Define @typedef for Encoding: {name:string,labels:Array.<string>}\n// https://github.com/google/closure-compiler/issues/247\n\n// Label to encoding registry.\n/** @type {Object.<string,{name:string,labels:Array.<string>}>} */\nexport const label_to_encoding = {};\nEncodings.forEach(_ref => {\n  let {\n    encodings\n  } = _ref;\n  encodings.forEach(encoding => {\n    encoding.labels.forEach(label => {\n      label_to_encoding[label] = encoding;\n    });\n  });\n});\n\n// Registry of of encoder/decoder factories, by encoding name.\nexport const encoders = {\n  'UTF-8'() {\n    // 9.1 utf-8\n    return new UTF8Encoder();\n  },\n  'GBK'(options) {\n    // 11.1.2 gbk encoder;\n    // gbk's encoder is gb18030's encoder with its gbk flag set.\n    return new GB18030Encoder(options, true);\n  },\n  'gb18030'() {\n    return new GB18030Encoder();\n  },\n  'Big5'() {\n    return new Big5Encoder();\n  },\n  'EUC-JP'() {\n    return new EUCJPEncoder();\n  },\n  'EUC-KR'() {\n    return new EUCKREncoder();\n  },\n  'ISO-2022-JP'() {\n    return new ISO2022JPEncoder();\n  },\n  'UTF-16BE'() {\n    // 15.3 utf-16be\n    return new UTF16Encoder(true);\n  },\n  'UTF-16LE'() {\n    // 15.4 utf-16le\n    return new UTF16Encoder();\n  },\n  'x-user-defined'() {\n    return new XUserDefinedEncoder();\n  },\n  'Shift_JIS'() {\n    return new ShiftJISEncoder();\n  }\n};\n\n/** @type {Object.<string, function({fatal:boolean}): Decoder>} */\nexport const decoders = {\n  'UTF-8'(options) {\n    // 9.1.1 utf-8 decoder\n    return new UTF8Decoder(options);\n  },\n  'GBK'(options) {\n    // 11.1.1 gbk decoder;  gbk's decoder is gb18030's decoder.\n    return new GB18030Decoder(options);\n  },\n  'gb18030'(options) {\n    return new GB18030Decoder(options);\n  },\n  'Big5'(options) {\n    return new Big5Decoder(options);\n  },\n  'EUC-JP'(options) {\n    return new EUCJPDecoder(options);\n  },\n  'EUC-KR'(options) {\n    return new EUCKRDecoder(options);\n  },\n  'ISO-2022-JP'(options) {\n    return new ISO2022JPDecoder(options);\n  },\n  'UTF-16BE'(options) {\n    // 15.3.1 utf-16be decoder\n    return new UTF16Decoder(true, options);\n  },\n  'UTF-16LE'(options) {\n    // 15.4.1 utf-16le decoder\n    return new UTF16Decoder(false, options);\n  },\n  'x-user-defined'() {\n    return new XUserDefinedDecoder();\n  },\n  'Shift_JIS'(options) {\n    return new ShiftJISDecoder(options);\n  }\n};\nEncodings.forEach(_ref2 => {\n  let {\n    heading,\n    encodings\n  } = _ref2;\n  if (heading != 'Legacy single-byte encodings') return;\n  encodings.forEach(encoding => {\n    const name = encoding.name;\n    const idx = index(name.toLowerCase());\n    decoders[name] = options => {\n      return new SingleByteDecoder(idx, options);\n    };\n    encoders[name] = options => {\n      return new SingleByteEncoder(idx, options);\n    };\n  });\n});","map":{"version":3,"names":["Encodings","UTF8Decoder","UTF8Encoder","UTF16Decoder","UTF16Encoder","GB18030Decoder","GB18030Encoder","Big5Decoder","Big5Encoder","EUCJPDecoder","EUCJPEncoder","EUCKRDecoder","EUCKREncoder","ISO2022JPDecoder","ISO2022JPEncoder","XUserDefinedDecoder","XUserDefinedEncoder","ShiftJISDecoder","ShiftJISEncoder","SingleByteDecoder","SingleByteEncoder","index","label_to_encoding","forEach","_ref","encodings","encoding","labels","label","encoders","UTF-8","GBK","options","gb18030","Big5","EUC-JP","EUC-KR","ISO-2022-JP","UTF-16BE","UTF-16LE","x-user-defined","Shift_JIS","decoders","_ref2","heading","name","idx","toLowerCase"],"sources":["D:/Coding/React/taskmybusiness/node_modules/text-decoding/src/table.js"],"sourcesContent":["import Encodings from './encodings'\nimport { UTF8Decoder, UTF8Encoder } from './implementations/utf8'\nimport { UTF16Decoder, UTF16Encoder } from './implementations/utf16'\nimport { GB18030Decoder, GB18030Encoder } from './implementations/gb18030'\nimport { Big5Decoder, Big5Encoder } from './implementations/big5'\nimport { EUCJPDecoder, EUCJPEncoder } from './implementations/euc-jp'\nimport { EUCKRDecoder, EUCKREncoder } from './implementations/euc-kr'\nimport { ISO2022JPDecoder, ISO2022JPEncoder } from './implementations/iso-2022-jp'\nimport { XUserDefinedDecoder, XUserDefinedEncoder } from './implementations/x-user-defined'\nimport { ShiftJISDecoder, ShiftJISEncoder } from './implementations/shift-jis'\nimport { SingleByteDecoder, SingleByteEncoder } from './implementations/single-byte'\nimport index from './indexes';\n\n// 5.2 Names and labels\n\n// TODO: Define @typedef for Encoding: {name:string,labels:Array.<string>}\n// https://github.com/google/closure-compiler/issues/247\n\n\n// Label to encoding registry.\n/** @type {Object.<string,{name:string,labels:Array.<string>}>} */\nexport const label_to_encoding = {}\nEncodings.forEach(({ encodings }) => {\n  encodings.forEach((encoding) => {\n    encoding.labels.forEach((label) => {\n      label_to_encoding[label] = encoding\n    })\n  })\n})\n\n// Registry of of encoder/decoder factories, by encoding name.\nexport const encoders = {\n  'UTF-8'() { // 9.1 utf-8\n    return new UTF8Encoder()\n  },\n  'GBK'(options) { // 11.1.2 gbk encoder;\n    // gbk's encoder is gb18030's encoder with its gbk flag set.\n    return new GB18030Encoder(options, true)\n  },\n  'gb18030'() {\n    return new GB18030Encoder()\n  },\n  'Big5'() {\n    return new Big5Encoder()\n  },\n  'EUC-JP'() {\n    return new EUCJPEncoder()\n  },\n  'EUC-KR'() {\n    return new EUCKREncoder()\n  },\n  'ISO-2022-JP'() {\n    return new ISO2022JPEncoder()\n  },\n  'UTF-16BE'() { // 15.3 utf-16be\n    return new UTF16Encoder(true)\n  },\n  'UTF-16LE'() { // 15.4 utf-16le\n    return new UTF16Encoder()\n  },\n  'x-user-defined'() {\n    return new XUserDefinedEncoder()\n  },\n  'Shift_JIS'() {\n    return new ShiftJISEncoder()\n  },\n}\n\n/** @type {Object.<string, function({fatal:boolean}): Decoder>} */\nexport const decoders = {\n  'UTF-8'(options) { // 9.1.1 utf-8 decoder\n    return new UTF8Decoder(options)\n  },\n  'GBK'(options) { // 11.1.1 gbk decoder;  gbk's decoder is gb18030's decoder.\n    return new GB18030Decoder(options)\n  },\n  'gb18030'(options) {\n    return new GB18030Decoder(options)\n  },\n  'Big5'(options) {\n    return new Big5Decoder(options)\n  },\n  'EUC-JP'(options) {\n    return new EUCJPDecoder(options)\n  },\n  'EUC-KR'(options) {\n    return new EUCKRDecoder(options)\n  },\n  'ISO-2022-JP'(options) {\n    return new ISO2022JPDecoder(options)\n  },\n  'UTF-16BE'(options) { // 15.3.1 utf-16be decoder\n    return new UTF16Decoder(true, options)\n  },\n  'UTF-16LE'(options) { // 15.4.1 utf-16le decoder\n    return new UTF16Decoder(false, options)\n  },\n  'x-user-defined'() {\n    return new XUserDefinedDecoder()\n  },\n  'Shift_JIS'(options) {\n    return new ShiftJISDecoder(options)\n  },\n}\n\nEncodings.forEach(({ heading, encodings }) => {\n  if (heading != 'Legacy single-byte encodings')\n    return\n  encodings.forEach((encoding) => {\n    const name = encoding.name\n    const idx = index(name.toLowerCase())\n    decoders[name] = (options) => {\n      return new SingleByteDecoder(idx, options)\n    }\n    encoders[name] = (options) => {\n      return new SingleByteEncoder(idx, options)\n    }\n  })\n})"],"mappings":"AAAA,OAAOA,SAAS,MAAM,aAAa;AACnC,SAASC,WAAW,EAAEC,WAAW,QAAQ,wBAAwB;AACjE,SAASC,YAAY,EAAEC,YAAY,QAAQ,yBAAyB;AACpE,SAASC,cAAc,EAAEC,cAAc,QAAQ,2BAA2B;AAC1E,SAASC,WAAW,EAAEC,WAAW,QAAQ,wBAAwB;AACjE,SAASC,YAAY,EAAEC,YAAY,QAAQ,0BAA0B;AACrE,SAASC,YAAY,EAAEC,YAAY,QAAQ,0BAA0B;AACrE,SAASC,gBAAgB,EAAEC,gBAAgB,QAAQ,+BAA+B;AAClF,SAASC,mBAAmB,EAAEC,mBAAmB,QAAQ,kCAAkC;AAC3F,SAASC,eAAe,EAAEC,eAAe,QAAQ,6BAA6B;AAC9E,SAASC,iBAAiB,EAAEC,iBAAiB,QAAQ,+BAA+B;AACpF,OAAOC,KAAK,MAAM,WAAW;;AAE7B;;AAEA;AACA;;AAGA;AACA;AACA,OAAO,MAAMC,iBAAiB,GAAG,CAAC,CAAC;AACnCtB,SAAS,CAACuB,OAAO,CAACC,IAAA,IAAmB;EAAA,IAAlB;IAAEC;EAAU,CAAC,GAAAD,IAAA;EAC9BC,SAAS,CAACF,OAAO,CAAEG,QAAQ,IAAK;IAC9BA,QAAQ,CAACC,MAAM,CAACJ,OAAO,CAAEK,KAAK,IAAK;MACjCN,iBAAiB,CAACM,KAAK,CAAC,GAAGF,QAAQ;IACrC,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ,CAAC,CAAC;;AAEF;AACA,OAAO,MAAMG,QAAQ,GAAG;EACtB,OAAOC,CAAA,EAAG;IAAE;IACV,OAAO,IAAI5B,WAAW,CAAC,CAAC;EAC1B,CAAC;EACD,KAAK6B,CAACC,OAAO,EAAE;IAAE;IACf;IACA,OAAO,IAAI1B,cAAc,CAAC0B,OAAO,EAAE,IAAI,CAAC;EAC1C,CAAC;EACD,SAASC,CAAA,EAAG;IACV,OAAO,IAAI3B,cAAc,CAAC,CAAC;EAC7B,CAAC;EACD,MAAM4B,CAAA,EAAG;IACP,OAAO,IAAI1B,WAAW,CAAC,CAAC;EAC1B,CAAC;EACD,QAAQ2B,CAAA,EAAG;IACT,OAAO,IAAIzB,YAAY,CAAC,CAAC;EAC3B,CAAC;EACD,QAAQ0B,CAAA,EAAG;IACT,OAAO,IAAIxB,YAAY,CAAC,CAAC;EAC3B,CAAC;EACD,aAAayB,CAAA,EAAG;IACd,OAAO,IAAIvB,gBAAgB,CAAC,CAAC;EAC/B,CAAC;EACD,UAAUwB,CAAA,EAAG;IAAE;IACb,OAAO,IAAIlC,YAAY,CAAC,IAAI,CAAC;EAC/B,CAAC;EACD,UAAUmC,CAAA,EAAG;IAAE;IACb,OAAO,IAAInC,YAAY,CAAC,CAAC;EAC3B,CAAC;EACD,gBAAgBoC,CAAA,EAAG;IACjB,OAAO,IAAIxB,mBAAmB,CAAC,CAAC;EAClC,CAAC;EACD,WAAWyB,CAAA,EAAG;IACZ,OAAO,IAAIvB,eAAe,CAAC,CAAC;EAC9B;AACF,CAAC;;AAED;AACA,OAAO,MAAMwB,QAAQ,GAAG;EACtB,OAAOZ,CAACE,OAAO,EAAE;IAAE;IACjB,OAAO,IAAI/B,WAAW,CAAC+B,OAAO,CAAC;EACjC,CAAC;EACD,KAAKD,CAACC,OAAO,EAAE;IAAE;IACf,OAAO,IAAI3B,cAAc,CAAC2B,OAAO,CAAC;EACpC,CAAC;EACD,SAASC,CAACD,OAAO,EAAE;IACjB,OAAO,IAAI3B,cAAc,CAAC2B,OAAO,CAAC;EACpC,CAAC;EACD,MAAME,CAACF,OAAO,EAAE;IACd,OAAO,IAAIzB,WAAW,CAACyB,OAAO,CAAC;EACjC,CAAC;EACD,QAAQG,CAACH,OAAO,EAAE;IAChB,OAAO,IAAIvB,YAAY,CAACuB,OAAO,CAAC;EAClC,CAAC;EACD,QAAQI,CAACJ,OAAO,EAAE;IAChB,OAAO,IAAIrB,YAAY,CAACqB,OAAO,CAAC;EAClC,CAAC;EACD,aAAaK,CAACL,OAAO,EAAE;IACrB,OAAO,IAAInB,gBAAgB,CAACmB,OAAO,CAAC;EACtC,CAAC;EACD,UAAUM,CAACN,OAAO,EAAE;IAAE;IACpB,OAAO,IAAI7B,YAAY,CAAC,IAAI,EAAE6B,OAAO,CAAC;EACxC,CAAC;EACD,UAAUO,CAACP,OAAO,EAAE;IAAE;IACpB,OAAO,IAAI7B,YAAY,CAAC,KAAK,EAAE6B,OAAO,CAAC;EACzC,CAAC;EACD,gBAAgBQ,CAAA,EAAG;IACjB,OAAO,IAAIzB,mBAAmB,CAAC,CAAC;EAClC,CAAC;EACD,WAAW0B,CAACT,OAAO,EAAE;IACnB,OAAO,IAAIf,eAAe,CAACe,OAAO,CAAC;EACrC;AACF,CAAC;AAEDhC,SAAS,CAACuB,OAAO,CAACoB,KAAA,IAA4B;EAAA,IAA3B;IAAEC,OAAO;IAAEnB;EAAU,CAAC,GAAAkB,KAAA;EACvC,IAAIC,OAAO,IAAI,8BAA8B,EAC3C;EACFnB,SAAS,CAACF,OAAO,CAAEG,QAAQ,IAAK;IAC9B,MAAMmB,IAAI,GAAGnB,QAAQ,CAACmB,IAAI;IAC1B,MAAMC,GAAG,GAAGzB,KAAK,CAACwB,IAAI,CAACE,WAAW,CAAC,CAAC,CAAC;IACrCL,QAAQ,CAACG,IAAI,CAAC,GAAIb,OAAO,IAAK;MAC5B,OAAO,IAAIb,iBAAiB,CAAC2B,GAAG,EAAEd,OAAO,CAAC;IAC5C,CAAC;IACDH,QAAQ,CAACgB,IAAI,CAAC,GAAIb,OAAO,IAAK;MAC5B,OAAO,IAAIZ,iBAAiB,CAAC0B,GAAG,EAAEd,OAAO,CAAC;IAC5C,CAAC;EACH,CAAC,CAAC;AACJ,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}