{"ast":null,"code":"'use strict';\n\nconst Queue = require('yocto-queue');\nconst pLimit = concurrency => {\n  if (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {\n    throw new TypeError('Expected `concurrency` to be a number from 1 and up');\n  }\n  const queue = new Queue();\n  let activeCount = 0;\n  const next = () => {\n    activeCount--;\n    if (queue.size > 0) {\n      queue.dequeue()();\n    }\n  };\n  const run = async function (fn, resolve) {\n    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {\n      args[_key - 2] = arguments[_key];\n    }\n    activeCount++;\n    const result = (async () => fn(...args))();\n    resolve(result);\n    try {\n      await result;\n    } catch {}\n    next();\n  };\n  const enqueue = function (fn, resolve) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 2 ? _len2 - 2 : 0), _key2 = 2; _key2 < _len2; _key2++) {\n      args[_key2 - 2] = arguments[_key2];\n    }\n    queue.enqueue(run.bind(null, fn, resolve, ...args));\n    (async () => {\n      // This function needs to wait until the next microtask before comparing\n      // `activeCount` to `concurrency`, because `activeCount` is updated asynchronously\n      // when the run function is dequeued and called. The comparison in the if-statement\n      // needs to happen asynchronously as well to get an up-to-date value for `activeCount`.\n      await Promise.resolve();\n      if (activeCount < concurrency && queue.size > 0) {\n        queue.dequeue()();\n      }\n    })();\n  };\n  const generator = function (fn) {\n    for (var _len3 = arguments.length, args = new Array(_len3 > 1 ? _len3 - 1 : 0), _key3 = 1; _key3 < _len3; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n    return new Promise(resolve => {\n      enqueue(fn, resolve, ...args);\n    });\n  };\n  Object.defineProperties(generator, {\n    activeCount: {\n      get: () => activeCount\n    },\n    pendingCount: {\n      get: () => queue.size\n    },\n    clearQueue: {\n      value: () => {\n        queue.clear();\n      }\n    }\n  });\n  return generator;\n};\nmodule.exports = pLimit;","map":{"version":3,"names":["Queue","require","pLimit","concurrency","Number","isInteger","Infinity","TypeError","queue","activeCount","next","size","dequeue","run","fn","resolve","_len","arguments","length","args","Array","_key","result","enqueue","_len2","_key2","bind","Promise","generator","_len3","_key3","Object","defineProperties","get","pendingCount","clearQueue","value","clear","module","exports"],"sources":["D:/Coding/React/taskmybusiness/node_modules/p-limit/index.js"],"sourcesContent":["'use strict';\nconst Queue = require('yocto-queue');\n\nconst pLimit = concurrency => {\n\tif (!((Number.isInteger(concurrency) || concurrency === Infinity) && concurrency > 0)) {\n\t\tthrow new TypeError('Expected `concurrency` to be a number from 1 and up');\n\t}\n\n\tconst queue = new Queue();\n\tlet activeCount = 0;\n\n\tconst next = () => {\n\t\tactiveCount--;\n\n\t\tif (queue.size > 0) {\n\t\t\tqueue.dequeue()();\n\t\t}\n\t};\n\n\tconst run = async (fn, resolve, ...args) => {\n\t\tactiveCount++;\n\n\t\tconst result = (async () => fn(...args))();\n\n\t\tresolve(result);\n\n\t\ttry {\n\t\t\tawait result;\n\t\t} catch {}\n\n\t\tnext();\n\t};\n\n\tconst enqueue = (fn, resolve, ...args) => {\n\t\tqueue.enqueue(run.bind(null, fn, resolve, ...args));\n\n\t\t(async () => {\n\t\t\t// This function needs to wait until the next microtask before comparing\n\t\t\t// `activeCount` to `concurrency`, because `activeCount` is updated asynchronously\n\t\t\t// when the run function is dequeued and called. The comparison in the if-statement\n\t\t\t// needs to happen asynchronously as well to get an up-to-date value for `activeCount`.\n\t\t\tawait Promise.resolve();\n\n\t\t\tif (activeCount < concurrency && queue.size > 0) {\n\t\t\t\tqueue.dequeue()();\n\t\t\t}\n\t\t})();\n\t};\n\n\tconst generator = (fn, ...args) => new Promise(resolve => {\n\t\tenqueue(fn, resolve, ...args);\n\t});\n\n\tObject.defineProperties(generator, {\n\t\tactiveCount: {\n\t\t\tget: () => activeCount\n\t\t},\n\t\tpendingCount: {\n\t\t\tget: () => queue.size\n\t\t},\n\t\tclearQueue: {\n\t\t\tvalue: () => {\n\t\t\t\tqueue.clear();\n\t\t\t}\n\t\t}\n\t});\n\n\treturn generator;\n};\n\nmodule.exports = pLimit;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}