{"ast":null,"code":"/*! firebase-admin v11.9.0 */\n\"use strict\";\n\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ProjectManagementRequestHandler = exports.assertServerResponse = void 0;\nconst api_request_1 = require(\"../utils/api-request\");\nconst error_1 = require(\"../utils/error\");\nconst index_1 = require(\"../utils/index\");\nconst validator = require(\"../utils/validator\");\n/** Project management backend host and port. */\nconst PROJECT_MANAGEMENT_HOST_AND_PORT = 'firebase.googleapis.com:443';\n/** Project management backend path. */\nconst PROJECT_MANAGEMENT_PATH = '/v1/';\n/** Project management beta backend path. */\nconst PROJECT_MANAGEMENT_BETA_PATH = '/v1beta1/';\n/** Project management request header. */\nconst PROJECT_MANAGEMENT_HEADERS = {\n  'X-Client-Version': `Node/Admin/${(0, index_1.getSdkVersion)()}`\n};\n/** Project management request timeout duration in milliseconds. */\nconst PROJECT_MANAGEMENT_TIMEOUT_MILLIS = 10000;\nconst LIST_APPS_MAX_PAGE_SIZE = 100;\nconst CERT_TYPE_API_MAP = {\n  sha1: 'SHA_1',\n  sha256: 'SHA_256'\n};\nfunction assertServerResponse(condition, responseData, message) {\n  if (!condition) {\n    throw new error_1.FirebaseProjectManagementError('invalid-server-response', `${message} Response data: ${JSON.stringify(responseData, null, 2)}`);\n  }\n}\nexports.assertServerResponse = assertServerResponse;\n/**\n * Class that provides mechanism to send requests to the Firebase project management backend\n * endpoints.\n *\n * @internal\n */\nclass ProjectManagementRequestHandler {\n  static wrapAndRethrowHttpError(errStatusCode, errText) {\n    let errorCode;\n    let errorMessage;\n    switch (errStatusCode) {\n      case 400:\n        errorCode = 'invalid-argument';\n        errorMessage = 'Invalid argument provided.';\n        break;\n      case 401:\n      case 403:\n        errorCode = 'authentication-error';\n        errorMessage = 'An error occurred when trying to authenticate. Make sure the credential ' + 'used to authenticate this SDK has the proper permissions. See ' + 'https://firebase.google.com/docs/admin/setup for setup instructions.';\n        break;\n      case 404:\n        errorCode = 'not-found';\n        errorMessage = 'The specified entity could not be found.';\n        break;\n      case 409:\n        errorCode = 'already-exists';\n        errorMessage = 'The specified entity already exists.';\n        break;\n      case 500:\n        errorCode = 'internal-error';\n        errorMessage = 'An internal error has occurred. Please retry the request.';\n        break;\n      case 503:\n        errorCode = 'service-unavailable';\n        errorMessage = 'The server could not process the request in time. See the error ' + 'documentation for more details.';\n        break;\n      default:\n        errorCode = 'unknown-error';\n        errorMessage = 'An unknown server error was returned.';\n    }\n    if (!errText) {\n      errText = '<missing>';\n    }\n    throw new error_1.FirebaseProjectManagementError(errorCode, `${errorMessage} Status code: ${errStatusCode}. Raw server response: \"${errText}\".`);\n  }\n  /**\n   * @param app - The app used to fetch access tokens to sign API requests.\n   * @constructor\n   */\n  constructor(app) {\n    this.baseUrl = `https://${PROJECT_MANAGEMENT_HOST_AND_PORT}${PROJECT_MANAGEMENT_PATH}`;\n    this.baseBetaUrl = `https://${PROJECT_MANAGEMENT_HOST_AND_PORT}${PROJECT_MANAGEMENT_BETA_PATH}`;\n    this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n  }\n  /**\n   * @param parentResourceName - Fully-qualified resource name of the project whose Android\n   *     apps you want to list.\n   */\n  listAndroidApps(parentResourceName) {\n    return this.invokeRequestHandler('GET', `${parentResourceName}/androidApps?page_size=${LIST_APPS_MAX_PAGE_SIZE}`, /* requestData */null, 'v1beta1');\n  }\n  /**\n   * @param parentResourceName - Fully-qualified resource name of the project whose iOS apps\n   *     you want to list.\n   */\n  listIosApps(parentResourceName) {\n    return this.invokeRequestHandler('GET', `${parentResourceName}/iosApps?page_size=${LIST_APPS_MAX_PAGE_SIZE}`, /* requestData */null, 'v1beta1');\n  }\n  /**\n   * @param parentResourceName - Fully-qualified resource name of the project whose iOS apps\n   *     you want to list.\n   */\n  listAppMetadata(parentResourceName) {\n    return this.invokeRequestHandler('GET', `${parentResourceName}:searchApps?page_size=${LIST_APPS_MAX_PAGE_SIZE}`, /* requestData */null, 'v1beta1');\n  }\n  /**\n   * @param parentResourceName - Fully-qualified resource name of the project that you want\n   *     to create the Android app within.\n   */\n  createAndroidApp(parentResourceName, packageName, displayName) {\n    const requestData = {\n      packageName\n    };\n    if (validator.isNonEmptyString(displayName)) {\n      requestData.displayName = displayName;\n    }\n    return this.invokeRequestHandler('POST', `${parentResourceName}/androidApps`, requestData, 'v1beta1').then(responseData => {\n      assertServerResponse(validator.isNonNullObject(responseData), responseData, 'createAndroidApp\\'s responseData must be a non-null object.');\n      assertServerResponse(validator.isNonEmptyString(responseData.name), responseData, 'createAndroidApp\\'s responseData.name must be a non-empty string.');\n      return this.pollRemoteOperationWithExponentialBackoff(responseData.name);\n    });\n  }\n  /**\n   * @param parentResourceName - Fully-qualified resource name of the project that you want\n   *     to create the iOS app within.\n   */\n  createIosApp(parentResourceName, bundleId, displayName) {\n    const requestData = {\n      bundleId\n    };\n    if (validator.isNonEmptyString(displayName)) {\n      requestData.displayName = displayName;\n    }\n    return this.invokeRequestHandler('POST', `${parentResourceName}/iosApps`, requestData, 'v1beta1').then(responseData => {\n      assertServerResponse(validator.isNonNullObject(responseData), responseData, 'createIosApp\\'s responseData must be a non-null object.');\n      assertServerResponse(validator.isNonEmptyString(responseData.name), responseData, 'createIosApp\\'s responseData.name must be a non-empty string.');\n      return this.pollRemoteOperationWithExponentialBackoff(responseData.name);\n    });\n  }\n  /**\n   * @param resourceName - Fully-qualified resource name of the entity whose display name you\n   *     want to set.\n   */\n  setDisplayName(resourceName, newDisplayName) {\n    const requestData = {\n      displayName: newDisplayName\n    };\n    return this.invokeRequestHandler('PATCH', `${resourceName}?update_mask=display_name`, requestData, 'v1beta1').then(() => undefined);\n  }\n  /**\n   * @param parentResourceName - Fully-qualified resource name of the Android app whose SHA\n   *     certificates you want to get.\n   */\n  getAndroidShaCertificates(parentResourceName) {\n    return this.invokeRequestHandler('GET', `${parentResourceName}/sha`, /* requestData */null, 'v1beta1');\n  }\n  /**\n   * @param parentResourceName - Fully-qualified resource name of the Android app that you\n   *     want to add the given SHA certificate to.\n   */\n  addAndroidShaCertificate(parentResourceName, certificate) {\n    const requestData = {\n      shaHash: certificate.shaHash,\n      certType: CERT_TYPE_API_MAP[certificate.certType]\n    };\n    return this.invokeRequestHandler('POST', `${parentResourceName}/sha`, requestData, 'v1beta1').then(() => undefined);\n  }\n  /**\n   * @param parentResourceName - Fully-qualified resource name of the app whose config you\n   *     want to get.\n   */\n  getConfig(parentResourceName) {\n    return this.invokeRequestHandler('GET', `${parentResourceName}/config`, /* requestData */null, 'v1beta1');\n  }\n  /**\n   * @param parentResourceName - Fully-qualified resource name of the entity that you want to\n   *     get.\n   */\n  getResource(parentResourceName) {\n    return this.invokeRequestHandler('GET', parentResourceName, /* requestData */null, 'v1beta1');\n  }\n  /**\n   * @param resourceName - Fully-qualified resource name of the entity that you want to\n   *     delete.\n   */\n  deleteResource(resourceName) {\n    return this.invokeRequestHandler('DELETE', resourceName, /* requestData */null, 'v1beta1').then(() => undefined);\n  }\n  pollRemoteOperationWithExponentialBackoff(operationResourceName) {\n    const poller = new api_request_1.ExponentialBackoffPoller();\n    return poller.poll(() => {\n      return this.invokeRequestHandler('GET', operationResourceName, /* requestData */null).then(responseData => {\n        if (responseData.error) {\n          const errStatusCode = responseData.error.code || 500;\n          const errText = responseData.error.message || JSON.stringify(responseData.error);\n          ProjectManagementRequestHandler.wrapAndRethrowHttpError(errStatusCode, errText);\n        }\n        if (!responseData.done) {\n          // Continue polling.\n          return null;\n        }\n        // Polling complete. Resolve with operation response JSON.\n        return responseData.response;\n      });\n    });\n  }\n  /**\n   * Invokes the request handler with the provided request data.\n   */\n  invokeRequestHandler(method, path, requestData) {\n    let apiVersion = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'v1';\n    const baseUrlToUse = apiVersion === 'v1' ? this.baseUrl : this.baseBetaUrl;\n    const request = {\n      method,\n      url: `${baseUrlToUse}${path}`,\n      headers: PROJECT_MANAGEMENT_HEADERS,\n      data: requestData,\n      timeout: PROJECT_MANAGEMENT_TIMEOUT_MILLIS\n    };\n    return this.httpClient.send(request).then(response => {\n      // Send non-JSON responses to the catch() below, where they will be treated as errors.\n      if (!response.isJson()) {\n        throw new api_request_1.HttpError(response);\n      }\n      return response.data;\n    }).catch(err => {\n      if (err instanceof api_request_1.HttpError) {\n        ProjectManagementRequestHandler.wrapAndRethrowHttpError(err.response.status, err.response.text);\n      }\n      throw err;\n    });\n  }\n}\nexports.ProjectManagementRequestHandler = ProjectManagementRequestHandler;","map":{"version":3,"names":["Object","defineProperty","exports","value","ProjectManagementRequestHandler","assertServerResponse","api_request_1","require","error_1","index_1","validator","PROJECT_MANAGEMENT_HOST_AND_PORT","PROJECT_MANAGEMENT_PATH","PROJECT_MANAGEMENT_BETA_PATH","PROJECT_MANAGEMENT_HEADERS","getSdkVersion","PROJECT_MANAGEMENT_TIMEOUT_MILLIS","LIST_APPS_MAX_PAGE_SIZE","CERT_TYPE_API_MAP","sha1","sha256","condition","responseData","message","FirebaseProjectManagementError","JSON","stringify","wrapAndRethrowHttpError","errStatusCode","errText","errorCode","errorMessage","constructor","app","baseUrl","baseBetaUrl","httpClient","AuthorizedHttpClient","listAndroidApps","parentResourceName","invokeRequestHandler","listIosApps","listAppMetadata","createAndroidApp","packageName","displayName","requestData","isNonEmptyString","then","isNonNullObject","name","pollRemoteOperationWithExponentialBackoff","createIosApp","bundleId","setDisplayName","resourceName","newDisplayName","undefined","getAndroidShaCertificates","addAndroidShaCertificate","certificate","shaHash","certType","getConfig","getResource","deleteResource","operationResourceName","poller","ExponentialBackoffPoller","poll","error","code","done","response","method","path","apiVersion","arguments","length","baseUrlToUse","request","url","headers","data","timeout","send","isJson","HttpError","catch","err","status","text"],"sources":["D:/Coding/React/taskmybusiness/node_modules/firebase-admin/lib/project-management/project-management-api-request-internal.js"],"sourcesContent":["/*! firebase-admin v11.9.0 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ProjectManagementRequestHandler = exports.assertServerResponse = void 0;\nconst api_request_1 = require(\"../utils/api-request\");\nconst error_1 = require(\"../utils/error\");\nconst index_1 = require(\"../utils/index\");\nconst validator = require(\"../utils/validator\");\n/** Project management backend host and port. */\nconst PROJECT_MANAGEMENT_HOST_AND_PORT = 'firebase.googleapis.com:443';\n/** Project management backend path. */\nconst PROJECT_MANAGEMENT_PATH = '/v1/';\n/** Project management beta backend path. */\nconst PROJECT_MANAGEMENT_BETA_PATH = '/v1beta1/';\n/** Project management request header. */\nconst PROJECT_MANAGEMENT_HEADERS = {\n    'X-Client-Version': `Node/Admin/${(0, index_1.getSdkVersion)()}`,\n};\n/** Project management request timeout duration in milliseconds. */\nconst PROJECT_MANAGEMENT_TIMEOUT_MILLIS = 10000;\nconst LIST_APPS_MAX_PAGE_SIZE = 100;\nconst CERT_TYPE_API_MAP = {\n    sha1: 'SHA_1',\n    sha256: 'SHA_256',\n};\nfunction assertServerResponse(condition, responseData, message) {\n    if (!condition) {\n        throw new error_1.FirebaseProjectManagementError('invalid-server-response', `${message} Response data: ${JSON.stringify(responseData, null, 2)}`);\n    }\n}\nexports.assertServerResponse = assertServerResponse;\n/**\n * Class that provides mechanism to send requests to the Firebase project management backend\n * endpoints.\n *\n * @internal\n */\nclass ProjectManagementRequestHandler {\n    static wrapAndRethrowHttpError(errStatusCode, errText) {\n        let errorCode;\n        let errorMessage;\n        switch (errStatusCode) {\n            case 400:\n                errorCode = 'invalid-argument';\n                errorMessage = 'Invalid argument provided.';\n                break;\n            case 401:\n            case 403:\n                errorCode = 'authentication-error';\n                errorMessage = 'An error occurred when trying to authenticate. Make sure the credential '\n                    + 'used to authenticate this SDK has the proper permissions. See '\n                    + 'https://firebase.google.com/docs/admin/setup for setup instructions.';\n                break;\n            case 404:\n                errorCode = 'not-found';\n                errorMessage = 'The specified entity could not be found.';\n                break;\n            case 409:\n                errorCode = 'already-exists';\n                errorMessage = 'The specified entity already exists.';\n                break;\n            case 500:\n                errorCode = 'internal-error';\n                errorMessage = 'An internal error has occurred. Please retry the request.';\n                break;\n            case 503:\n                errorCode = 'service-unavailable';\n                errorMessage = 'The server could not process the request in time. See the error '\n                    + 'documentation for more details.';\n                break;\n            default:\n                errorCode = 'unknown-error';\n                errorMessage = 'An unknown server error was returned.';\n        }\n        if (!errText) {\n            errText = '<missing>';\n        }\n        throw new error_1.FirebaseProjectManagementError(errorCode, `${errorMessage} Status code: ${errStatusCode}. Raw server response: \"${errText}\".`);\n    }\n    /**\n     * @param app - The app used to fetch access tokens to sign API requests.\n     * @constructor\n     */\n    constructor(app) {\n        this.baseUrl = `https://${PROJECT_MANAGEMENT_HOST_AND_PORT}${PROJECT_MANAGEMENT_PATH}`;\n        this.baseBetaUrl = `https://${PROJECT_MANAGEMENT_HOST_AND_PORT}${PROJECT_MANAGEMENT_BETA_PATH}`;\n        this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n    }\n    /**\n     * @param parentResourceName - Fully-qualified resource name of the project whose Android\n     *     apps you want to list.\n     */\n    listAndroidApps(parentResourceName) {\n        return this.invokeRequestHandler('GET', `${parentResourceName}/androidApps?page_size=${LIST_APPS_MAX_PAGE_SIZE}`, \n        /* requestData */ null, 'v1beta1');\n    }\n    /**\n     * @param parentResourceName - Fully-qualified resource name of the project whose iOS apps\n     *     you want to list.\n     */\n    listIosApps(parentResourceName) {\n        return this.invokeRequestHandler('GET', `${parentResourceName}/iosApps?page_size=${LIST_APPS_MAX_PAGE_SIZE}`, \n        /* requestData */ null, 'v1beta1');\n    }\n    /**\n     * @param parentResourceName - Fully-qualified resource name of the project whose iOS apps\n     *     you want to list.\n     */\n    listAppMetadata(parentResourceName) {\n        return this.invokeRequestHandler('GET', `${parentResourceName}:searchApps?page_size=${LIST_APPS_MAX_PAGE_SIZE}`, \n        /* requestData */ null, 'v1beta1');\n    }\n    /**\n     * @param parentResourceName - Fully-qualified resource name of the project that you want\n     *     to create the Android app within.\n     */\n    createAndroidApp(parentResourceName, packageName, displayName) {\n        const requestData = {\n            packageName,\n        };\n        if (validator.isNonEmptyString(displayName)) {\n            requestData.displayName = displayName;\n        }\n        return this\n            .invokeRequestHandler('POST', `${parentResourceName}/androidApps`, requestData, 'v1beta1')\n            .then((responseData) => {\n            assertServerResponse(validator.isNonNullObject(responseData), responseData, 'createAndroidApp\\'s responseData must be a non-null object.');\n            assertServerResponse(validator.isNonEmptyString(responseData.name), responseData, 'createAndroidApp\\'s responseData.name must be a non-empty string.');\n            return this.pollRemoteOperationWithExponentialBackoff(responseData.name);\n        });\n    }\n    /**\n     * @param parentResourceName - Fully-qualified resource name of the project that you want\n     *     to create the iOS app within.\n     */\n    createIosApp(parentResourceName, bundleId, displayName) {\n        const requestData = {\n            bundleId,\n        };\n        if (validator.isNonEmptyString(displayName)) {\n            requestData.displayName = displayName;\n        }\n        return this\n            .invokeRequestHandler('POST', `${parentResourceName}/iosApps`, requestData, 'v1beta1')\n            .then((responseData) => {\n            assertServerResponse(validator.isNonNullObject(responseData), responseData, 'createIosApp\\'s responseData must be a non-null object.');\n            assertServerResponse(validator.isNonEmptyString(responseData.name), responseData, 'createIosApp\\'s responseData.name must be a non-empty string.');\n            return this.pollRemoteOperationWithExponentialBackoff(responseData.name);\n        });\n    }\n    /**\n     * @param resourceName - Fully-qualified resource name of the entity whose display name you\n     *     want to set.\n     */\n    setDisplayName(resourceName, newDisplayName) {\n        const requestData = {\n            displayName: newDisplayName,\n        };\n        return this\n            .invokeRequestHandler('PATCH', `${resourceName}?update_mask=display_name`, requestData, 'v1beta1')\n            .then(() => undefined);\n    }\n    /**\n     * @param parentResourceName - Fully-qualified resource name of the Android app whose SHA\n     *     certificates you want to get.\n     */\n    getAndroidShaCertificates(parentResourceName) {\n        return this.invokeRequestHandler('GET', `${parentResourceName}/sha`, /* requestData */ null, 'v1beta1');\n    }\n    /**\n     * @param parentResourceName - Fully-qualified resource name of the Android app that you\n     *     want to add the given SHA certificate to.\n     */\n    addAndroidShaCertificate(parentResourceName, certificate) {\n        const requestData = {\n            shaHash: certificate.shaHash,\n            certType: CERT_TYPE_API_MAP[certificate.certType],\n        };\n        return this\n            .invokeRequestHandler('POST', `${parentResourceName}/sha`, requestData, 'v1beta1')\n            .then(() => undefined);\n    }\n    /**\n     * @param parentResourceName - Fully-qualified resource name of the app whose config you\n     *     want to get.\n     */\n    getConfig(parentResourceName) {\n        return this.invokeRequestHandler('GET', `${parentResourceName}/config`, /* requestData */ null, 'v1beta1');\n    }\n    /**\n     * @param parentResourceName - Fully-qualified resource name of the entity that you want to\n     *     get.\n     */\n    getResource(parentResourceName) {\n        return this.invokeRequestHandler('GET', parentResourceName, /* requestData */ null, 'v1beta1');\n    }\n    /**\n     * @param resourceName - Fully-qualified resource name of the entity that you want to\n     *     delete.\n     */\n    deleteResource(resourceName) {\n        return this\n            .invokeRequestHandler('DELETE', resourceName, /* requestData */ null, 'v1beta1')\n            .then(() => undefined);\n    }\n    pollRemoteOperationWithExponentialBackoff(operationResourceName) {\n        const poller = new api_request_1.ExponentialBackoffPoller();\n        return poller.poll(() => {\n            return this.invokeRequestHandler('GET', operationResourceName, /* requestData */ null)\n                .then((responseData) => {\n                if (responseData.error) {\n                    const errStatusCode = responseData.error.code || 500;\n                    const errText = responseData.error.message || JSON.stringify(responseData.error);\n                    ProjectManagementRequestHandler.wrapAndRethrowHttpError(errStatusCode, errText);\n                }\n                if (!responseData.done) {\n                    // Continue polling.\n                    return null;\n                }\n                // Polling complete. Resolve with operation response JSON.\n                return responseData.response;\n            });\n        });\n    }\n    /**\n     * Invokes the request handler with the provided request data.\n     */\n    invokeRequestHandler(method, path, requestData, apiVersion = 'v1') {\n        const baseUrlToUse = (apiVersion === 'v1') ? this.baseUrl : this.baseBetaUrl;\n        const request = {\n            method,\n            url: `${baseUrlToUse}${path}`,\n            headers: PROJECT_MANAGEMENT_HEADERS,\n            data: requestData,\n            timeout: PROJECT_MANAGEMENT_TIMEOUT_MILLIS,\n        };\n        return this.httpClient.send(request)\n            .then((response) => {\n            // Send non-JSON responses to the catch() below, where they will be treated as errors.\n            if (!response.isJson()) {\n                throw new api_request_1.HttpError(response);\n            }\n            return response.data;\n        })\n            .catch((err) => {\n            if (err instanceof api_request_1.HttpError) {\n                ProjectManagementRequestHandler.wrapAndRethrowHttpError(err.response.status, err.response.text);\n            }\n            throw err;\n        });\n    }\n}\nexports.ProjectManagementRequestHandler = ProjectManagementRequestHandler;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}