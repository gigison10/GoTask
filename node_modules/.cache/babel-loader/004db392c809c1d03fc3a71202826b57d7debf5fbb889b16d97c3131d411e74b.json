{"ast":null,"code":"\"use strict\";\n\n// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ExternalAccountAuthorizedUserClient = exports.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE = void 0;\nconst authclient_1 = require(\"./authclient\");\nconst oauth2common_1 = require(\"./oauth2common\");\nconst gaxios_1 = require(\"gaxios\");\nconst stream = require(\"stream\");\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\n/**\n * The credentials JSON file type for external account authorized user clients.\n */\nexports.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE = 'external_account_authorized_user';\n/**\n * Handler for token refresh requests sent to the token_url endpoint for external\n * authorized user credentials.\n */\nclass ExternalAccountAuthorizedUserHandler extends oauth2common_1.OAuthClientAuthHandler {\n  /**\n   * Initializes an ExternalAccountAuthorizedUserHandler instance.\n   * @param url The URL of the token refresh endpoint.\n   * @param transporter The transporter to use for the refresh request.\n   * @param clientAuthentication The client authentication credentials to use\n   *   for the refresh request.\n   */\n  constructor(url, transporter, clientAuthentication) {\n    super(clientAuthentication);\n    this.url = url;\n    this.transporter = transporter;\n  }\n  /**\n   * Requests a new access token from the token_url endpoint using the provided\n   *   refresh token.\n   * @param refreshToken The refresh token to use to generate a new access token.\n   * @param additionalHeaders Optional additional headers to pass along the\n   *   request.\n   * @return A promise that resolves with the token refresh response containing\n   *   the requested access token and its expiration time.\n   */\n  async refreshToken(refreshToken, additionalHeaders) {\n    const values = new URLSearchParams({\n      grant_type: 'refresh_token',\n      refresh_token: refreshToken\n    });\n    const headers = {\n      'Content-Type': 'application/x-www-form-urlencoded',\n      ...additionalHeaders\n    };\n    const opts = {\n      url: this.url,\n      method: 'POST',\n      headers,\n      data: values.toString(),\n      responseType: 'json'\n    };\n    // Apply OAuth client authentication.\n    this.applyClientAuthenticationOptions(opts);\n    try {\n      const response = await this.transporter.request(opts);\n      // Successful response.\n      const tokenRefreshResponse = response.data;\n      tokenRefreshResponse.res = response;\n      return tokenRefreshResponse;\n    } catch (error) {\n      // Translate error to OAuthError.\n      if (error instanceof gaxios_1.GaxiosError && error.response) {\n        throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(error.response.data,\n        // Preserve other fields from the original error.\n        error);\n      }\n      // Request could fail before the server responds.\n      throw error;\n    }\n  }\n}\n/**\n * External Account Authorized User Client. This is used for OAuth2 credentials\n * sourced using external identities through Workforce Identity Federation.\n * Obtaining the initial access and refresh token can be done through the\n * Google Cloud CLI.\n */\nclass ExternalAccountAuthorizedUserClient extends authclient_1.AuthClient {\n  /**\n   * Instantiates an ExternalAccountAuthorizedUserClient instances using the\n   * provided JSON object loaded from a credentials files.\n   * An error is throws if the credential is not valid.\n   * @param options The external account authorized user option object typically\n   *   from the external accoutn authorized user JSON credential file.\n   * @param additionalOptions Optional additional behavior customization\n   *   options. These currently customize expiration threshold time and\n   *   whether to retry on 401/403 API request errors.\n   */\n  constructor(options, additionalOptions) {\n    super();\n    this.refreshToken = options.refresh_token;\n    const clientAuth = {\n      confidentialClientType: 'basic',\n      clientId: options.client_id,\n      clientSecret: options.client_secret\n    };\n    this.externalAccountAuthorizedUserHandler = new ExternalAccountAuthorizedUserHandler(options.token_url, this.transporter, clientAuth);\n    this.cachedAccessToken = null;\n    this.quotaProjectId = options.quota_project_id;\n    // As threshold could be zero,\n    // eagerRefreshThresholdMillis || EXPIRATION_TIME_OFFSET will override the\n    // zero value.\n    if (typeof (additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.eagerRefreshThresholdMillis) !== 'number') {\n      this.eagerRefreshThresholdMillis = baseexternalclient_1.EXPIRATION_TIME_OFFSET;\n    } else {\n      this.eagerRefreshThresholdMillis = additionalOptions.eagerRefreshThresholdMillis;\n    }\n    this.forceRefreshOnFailure = !!(additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.forceRefreshOnFailure);\n  }\n  async getAccessToken() {\n    // If cached access token is unavailable or expired, force refresh.\n    if (!this.cachedAccessToken || this.isExpired(this.cachedAccessToken)) {\n      await this.refreshAccessTokenAsync();\n    }\n    // Return GCP access token in GetAccessTokenResponse format.\n    return {\n      token: this.cachedAccessToken.access_token,\n      res: this.cachedAccessToken.res\n    };\n  }\n  async getRequestHeaders() {\n    const accessTokenResponse = await this.getAccessToken();\n    const headers = {\n      Authorization: `Bearer ${accessTokenResponse.token}`\n    };\n    return this.addSharedMetadataHeaders(headers);\n  }\n  request(opts, callback) {\n    if (callback) {\n      this.requestAsync(opts).then(r => callback(null, r), e => {\n        return callback(e, e.response);\n      });\n    } else {\n      return this.requestAsync(opts);\n    }\n  }\n  /**\n   * Authenticates the provided HTTP request, processes it and resolves with the\n   * returned response.\n   * @param opts The HTTP request options.\n   * @param retry Whether the current attempt is a retry after a failed attempt.\n   * @return A promise that resolves with the successful response.\n   */\n  async requestAsync(opts) {\n    let retry = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let response;\n    try {\n      const requestHeaders = await this.getRequestHeaders();\n      opts.headers = opts.headers || {};\n      if (requestHeaders && requestHeaders['x-goog-user-project']) {\n        opts.headers['x-goog-user-project'] = requestHeaders['x-goog-user-project'];\n      }\n      if (requestHeaders && requestHeaders.Authorization) {\n        opts.headers.Authorization = requestHeaders.Authorization;\n      }\n      response = await this.transporter.request(opts);\n    } catch (e) {\n      const res = e.response;\n      if (res) {\n        const statusCode = res.status;\n        // Retry the request for metadata if the following criteria are true:\n        // - We haven't already retried.  It only makes sense to retry once.\n        // - The response was a 401 or a 403\n        // - The request didn't send a readableStream\n        // - forceRefreshOnFailure is true\n        const isReadableStream = res.config.data instanceof stream.Readable;\n        const isAuthErr = statusCode === 401 || statusCode === 403;\n        if (!retry && isAuthErr && !isReadableStream && this.forceRefreshOnFailure) {\n          await this.refreshAccessTokenAsync();\n          return await this.requestAsync(opts, true);\n        }\n      }\n      throw e;\n    }\n    return response;\n  }\n  /**\n   * Forces token refresh, even if unexpired tokens are currently cached.\n   * @return A promise that resolves with the refreshed credential.\n   */\n  async refreshAccessTokenAsync() {\n    // Refresh the access token using the refresh token.\n    const refreshResponse = await this.externalAccountAuthorizedUserHandler.refreshToken(this.refreshToken);\n    this.cachedAccessToken = {\n      access_token: refreshResponse.access_token,\n      expiry_date: new Date().getTime() + refreshResponse.expires_in * 1000,\n      res: refreshResponse.res\n    };\n    if (refreshResponse.refresh_token !== undefined) {\n      this.refreshToken = refreshResponse.refresh_token;\n    }\n    return this.cachedAccessToken;\n  }\n  /**\n   * Returns whether the provided credentials are expired or not.\n   * If there is no expiry time, assumes the token is not expired or expiring.\n   * @param credentials The credentials to check for expiration.\n   * @return Whether the credentials are expired or not.\n   */\n  isExpired(credentials) {\n    const now = new Date().getTime();\n    return credentials.expiry_date ? now >= credentials.expiry_date - this.eagerRefreshThresholdMillis : false;\n  }\n}\nexports.ExternalAccountAuthorizedUserClient = ExternalAccountAuthorizedUserClient;","map":{"version":3,"names":["Object","defineProperty","exports","value","ExternalAccountAuthorizedUserClient","EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE","authclient_1","require","oauth2common_1","gaxios_1","stream","baseexternalclient_1","ExternalAccountAuthorizedUserHandler","OAuthClientAuthHandler","constructor","url","transporter","clientAuthentication","refreshToken","additionalHeaders","values","URLSearchParams","grant_type","refresh_token","headers","opts","method","data","toString","responseType","applyClientAuthenticationOptions","response","request","tokenRefreshResponse","res","error","GaxiosError","getErrorFromOAuthErrorResponse","AuthClient","options","additionalOptions","clientAuth","confidentialClientType","clientId","client_id","clientSecret","client_secret","externalAccountAuthorizedUserHandler","token_url","cachedAccessToken","quotaProjectId","quota_project_id","eagerRefreshThresholdMillis","EXPIRATION_TIME_OFFSET","forceRefreshOnFailure","getAccessToken","isExpired","refreshAccessTokenAsync","token","access_token","getRequestHeaders","accessTokenResponse","Authorization","addSharedMetadataHeaders","callback","requestAsync","then","r","e","retry","arguments","length","undefined","requestHeaders","statusCode","status","isReadableStream","config","Readable","isAuthErr","refreshResponse","expiry_date","Date","getTime","expires_in","credentials","now"],"sources":["D:/Coding/React/taskmybusiness/node_modules/google-auth-library/build/src/auth/externalAccountAuthorizedUserClient.js"],"sourcesContent":["\"use strict\";\n// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ExternalAccountAuthorizedUserClient = exports.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE = void 0;\nconst authclient_1 = require(\"./authclient\");\nconst oauth2common_1 = require(\"./oauth2common\");\nconst gaxios_1 = require(\"gaxios\");\nconst stream = require(\"stream\");\nconst baseexternalclient_1 = require(\"./baseexternalclient\");\n/**\n * The credentials JSON file type for external account authorized user clients.\n */\nexports.EXTERNAL_ACCOUNT_AUTHORIZED_USER_TYPE = 'external_account_authorized_user';\n/**\n * Handler for token refresh requests sent to the token_url endpoint for external\n * authorized user credentials.\n */\nclass ExternalAccountAuthorizedUserHandler extends oauth2common_1.OAuthClientAuthHandler {\n    /**\n     * Initializes an ExternalAccountAuthorizedUserHandler instance.\n     * @param url The URL of the token refresh endpoint.\n     * @param transporter The transporter to use for the refresh request.\n     * @param clientAuthentication The client authentication credentials to use\n     *   for the refresh request.\n     */\n    constructor(url, transporter, clientAuthentication) {\n        super(clientAuthentication);\n        this.url = url;\n        this.transporter = transporter;\n    }\n    /**\n     * Requests a new access token from the token_url endpoint using the provided\n     *   refresh token.\n     * @param refreshToken The refresh token to use to generate a new access token.\n     * @param additionalHeaders Optional additional headers to pass along the\n     *   request.\n     * @return A promise that resolves with the token refresh response containing\n     *   the requested access token and its expiration time.\n     */\n    async refreshToken(refreshToken, additionalHeaders) {\n        const values = new URLSearchParams({\n            grant_type: 'refresh_token',\n            refresh_token: refreshToken,\n        });\n        const headers = {\n            'Content-Type': 'application/x-www-form-urlencoded',\n            ...additionalHeaders,\n        };\n        const opts = {\n            url: this.url,\n            method: 'POST',\n            headers,\n            data: values.toString(),\n            responseType: 'json',\n        };\n        // Apply OAuth client authentication.\n        this.applyClientAuthenticationOptions(opts);\n        try {\n            const response = await this.transporter.request(opts);\n            // Successful response.\n            const tokenRefreshResponse = response.data;\n            tokenRefreshResponse.res = response;\n            return tokenRefreshResponse;\n        }\n        catch (error) {\n            // Translate error to OAuthError.\n            if (error instanceof gaxios_1.GaxiosError && error.response) {\n                throw (0, oauth2common_1.getErrorFromOAuthErrorResponse)(error.response.data, \n                // Preserve other fields from the original error.\n                error);\n            }\n            // Request could fail before the server responds.\n            throw error;\n        }\n    }\n}\n/**\n * External Account Authorized User Client. This is used for OAuth2 credentials\n * sourced using external identities through Workforce Identity Federation.\n * Obtaining the initial access and refresh token can be done through the\n * Google Cloud CLI.\n */\nclass ExternalAccountAuthorizedUserClient extends authclient_1.AuthClient {\n    /**\n     * Instantiates an ExternalAccountAuthorizedUserClient instances using the\n     * provided JSON object loaded from a credentials files.\n     * An error is throws if the credential is not valid.\n     * @param options The external account authorized user option object typically\n     *   from the external accoutn authorized user JSON credential file.\n     * @param additionalOptions Optional additional behavior customization\n     *   options. These currently customize expiration threshold time and\n     *   whether to retry on 401/403 API request errors.\n     */\n    constructor(options, additionalOptions) {\n        super();\n        this.refreshToken = options.refresh_token;\n        const clientAuth = {\n            confidentialClientType: 'basic',\n            clientId: options.client_id,\n            clientSecret: options.client_secret,\n        };\n        this.externalAccountAuthorizedUserHandler =\n            new ExternalAccountAuthorizedUserHandler(options.token_url, this.transporter, clientAuth);\n        this.cachedAccessToken = null;\n        this.quotaProjectId = options.quota_project_id;\n        // As threshold could be zero,\n        // eagerRefreshThresholdMillis || EXPIRATION_TIME_OFFSET will override the\n        // zero value.\n        if (typeof (additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.eagerRefreshThresholdMillis) !== 'number') {\n            this.eagerRefreshThresholdMillis = baseexternalclient_1.EXPIRATION_TIME_OFFSET;\n        }\n        else {\n            this.eagerRefreshThresholdMillis = additionalOptions\n                .eagerRefreshThresholdMillis;\n        }\n        this.forceRefreshOnFailure = !!(additionalOptions === null || additionalOptions === void 0 ? void 0 : additionalOptions.forceRefreshOnFailure);\n    }\n    async getAccessToken() {\n        // If cached access token is unavailable or expired, force refresh.\n        if (!this.cachedAccessToken || this.isExpired(this.cachedAccessToken)) {\n            await this.refreshAccessTokenAsync();\n        }\n        // Return GCP access token in GetAccessTokenResponse format.\n        return {\n            token: this.cachedAccessToken.access_token,\n            res: this.cachedAccessToken.res,\n        };\n    }\n    async getRequestHeaders() {\n        const accessTokenResponse = await this.getAccessToken();\n        const headers = {\n            Authorization: `Bearer ${accessTokenResponse.token}`,\n        };\n        return this.addSharedMetadataHeaders(headers);\n    }\n    request(opts, callback) {\n        if (callback) {\n            this.requestAsync(opts).then(r => callback(null, r), e => {\n                return callback(e, e.response);\n            });\n        }\n        else {\n            return this.requestAsync(opts);\n        }\n    }\n    /**\n     * Authenticates the provided HTTP request, processes it and resolves with the\n     * returned response.\n     * @param opts The HTTP request options.\n     * @param retry Whether the current attempt is a retry after a failed attempt.\n     * @return A promise that resolves with the successful response.\n     */\n    async requestAsync(opts, retry = false) {\n        let response;\n        try {\n            const requestHeaders = await this.getRequestHeaders();\n            opts.headers = opts.headers || {};\n            if (requestHeaders && requestHeaders['x-goog-user-project']) {\n                opts.headers['x-goog-user-project'] =\n                    requestHeaders['x-goog-user-project'];\n            }\n            if (requestHeaders && requestHeaders.Authorization) {\n                opts.headers.Authorization = requestHeaders.Authorization;\n            }\n            response = await this.transporter.request(opts);\n        }\n        catch (e) {\n            const res = e.response;\n            if (res) {\n                const statusCode = res.status;\n                // Retry the request for metadata if the following criteria are true:\n                // - We haven't already retried.  It only makes sense to retry once.\n                // - The response was a 401 or a 403\n                // - The request didn't send a readableStream\n                // - forceRefreshOnFailure is true\n                const isReadableStream = res.config.data instanceof stream.Readable;\n                const isAuthErr = statusCode === 401 || statusCode === 403;\n                if (!retry &&\n                    isAuthErr &&\n                    !isReadableStream &&\n                    this.forceRefreshOnFailure) {\n                    await this.refreshAccessTokenAsync();\n                    return await this.requestAsync(opts, true);\n                }\n            }\n            throw e;\n        }\n        return response;\n    }\n    /**\n     * Forces token refresh, even if unexpired tokens are currently cached.\n     * @return A promise that resolves with the refreshed credential.\n     */\n    async refreshAccessTokenAsync() {\n        // Refresh the access token using the refresh token.\n        const refreshResponse = await this.externalAccountAuthorizedUserHandler.refreshToken(this.refreshToken);\n        this.cachedAccessToken = {\n            access_token: refreshResponse.access_token,\n            expiry_date: new Date().getTime() + refreshResponse.expires_in * 1000,\n            res: refreshResponse.res,\n        };\n        if (refreshResponse.refresh_token !== undefined) {\n            this.refreshToken = refreshResponse.refresh_token;\n        }\n        return this.cachedAccessToken;\n    }\n    /**\n     * Returns whether the provided credentials are expired or not.\n     * If there is no expiry time, assumes the token is not expired or expiring.\n     * @param credentials The credentials to check for expiration.\n     * @return Whether the credentials are expired or not.\n     */\n    isExpired(credentials) {\n        const now = new Date().getTime();\n        return credentials.expiry_date\n            ? now >= credentials.expiry_date - this.eagerRefreshThresholdMillis\n            : false;\n    }\n}\nexports.ExternalAccountAuthorizedUserClient = ExternalAccountAuthorizedUserClient;\n//# sourceMappingURL=externalAccountAuthorizedUserClient.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}