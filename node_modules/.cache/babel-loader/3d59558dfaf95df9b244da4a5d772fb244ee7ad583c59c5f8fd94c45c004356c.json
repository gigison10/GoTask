{"ast":null,"code":"import Stream, { DEFAULT_ENCODING, getEncoding } from './';\nimport { end_of_stream, finished, stringToCodePoints } from '../utils';\nimport { encoders } from '../table';\n\n// 8.2 Interface TextEncoder\n\nexport default class TextEncoder {\n  /**\n   * @param {string=} label The label of the encoding. NONSTANDARD.\n   * @param {Object=} [options] NONSTANDARD.\n   */\n  constructor(label) {\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // A TextEncoder object has an associated encoding and encoder.\n\n    /** @private */\n    this._encoding = null;\n    /** @private @type {?Encoder} */\n    this._encoder = null;\n\n    // Non-standard\n    /** @private @type {boolean} */\n    this._do_not_flush = false;\n    /** @private @type {string} */\n    this._fatal = options['fatal'] ? 'fatal' : 'replacement';\n\n    // 2. Set enc's encoding to UTF-8's encoder.\n    if (options['NONSTANDARD_allowLegacyEncoding']) {\n      // NONSTANDARD behavior.\n      label = label !== undefined ? String(label) : DEFAULT_ENCODING;\n      var encoding = getEncoding(label);\n      if (encoding === null || encoding.name === 'replacement') throw RangeError('Unknown encoding: ' + label);\n      if (!encoders[encoding.name]) {\n        throw Error('Encoder not present.' + ' Did you forget to include encoding-indexes.js first?');\n      }\n      this._encoding = encoding;\n    } else {\n      // Standard behavior.\n      this._encoding = getEncoding('utf-8');\n      if (label !== undefined && 'console' in global) {\n        console.warn('TextEncoder constructor called with encoding label, ' + 'which is ignored.');\n      }\n    }\n  }\n  get encoding() {\n    return this._encoding.name.toLowerCase();\n  }\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   */\n  encode() {\n    let opt_string = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful when\n    // the input is a USVString so streaming is not necessary.\n    if (!this._do_not_flush) this._encoder = encoders[this._encoding.name]({\n      fatal: this._fatal === 'fatal'\n    });\n    this._do_not_flush = Boolean(options['stream']);\n\n    // 1. Convert input to a stream.\n    const input = new Stream(stringToCodePoints(opt_string));\n\n    // 2. Let output be a new stream\n    const output = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    // 3. While true, run these substeps:\n    while (true) {\n      // 1. Let token be the result of reading from input.\n      var token = input.read();\n      if (token === end_of_stream) break;\n      // 2. Let result be the result of processing token for encoder,\n      // input, output.\n      result = this._encoder.handler(input, token);\n      if (result === finished) break;\n      if (Array.isArray(result)) output.push.apply(output, /**@type {!Array.<number>}*/result);else output.push(result);\n    }\n    // TODO: Align with spec algorithm.\n    if (!this._do_not_flush) {\n      while (true) {\n        result = this._encoder.handler(input, input.read());\n        if (result === finished) break;\n        if (Array.isArray(result)) output.push.apply(output, /**@type {!Array.<number>}*/result);else output.push(result);\n      }\n      this._encoder = null;\n    }\n    // 3. If result is finished, convert output into a byte sequence,\n    // and then return a Uint8Array object wrapping an ArrayBuffer\n    // containing output.\n    return new Uint8Array(output);\n  }\n}","map":{"version":3,"names":["Stream","DEFAULT_ENCODING","getEncoding","end_of_stream","finished","stringToCodePoints","encoders","TextEncoder","constructor","label","options","arguments","length","undefined","_encoding","_encoder","_do_not_flush","_fatal","String","encoding","name","RangeError","Error","global","console","warn","toLowerCase","encode","opt_string","fatal","Boolean","input","output","result","token","read","handler","Array","isArray","push","apply","Uint8Array"],"sources":["D:/Coding/React/taskmybusiness/node_modules/text-decoding/src/lib/TextEncoder.js"],"sourcesContent":["import Stream, { DEFAULT_ENCODING, getEncoding } from './'\nimport { end_of_stream, finished, stringToCodePoints } from '../utils'\nimport { encoders } from '../table'\n\n// 8.2 Interface TextEncoder\n\nexport default class TextEncoder {\n  /**\n   * @param {string=} label The label of the encoding. NONSTANDARD.\n   * @param {Object=} [options] NONSTANDARD.\n   */\n  constructor(label, options = {}) {\n    // A TextEncoder object has an associated encoding and encoder.\n\n    /** @private */\n    this._encoding = null\n    /** @private @type {?Encoder} */\n    this._encoder = null\n\n    // Non-standard\n    /** @private @type {boolean} */\n    this._do_not_flush = false\n    /** @private @type {string} */\n    this._fatal = options['fatal'] ? 'fatal' : 'replacement'\n\n    // 2. Set enc's encoding to UTF-8's encoder.\n    if (options['NONSTANDARD_allowLegacyEncoding']) {\n      // NONSTANDARD behavior.\n      label = label !== undefined ? String(label) : DEFAULT_ENCODING\n      var encoding = getEncoding(label)\n      if (encoding === null || encoding.name === 'replacement')\n        throw RangeError('Unknown encoding: ' + label)\n      if (!encoders[encoding.name]) {\n        throw Error('Encoder not present.' +\n                    ' Did you forget to include encoding-indexes.js first?')\n      }\n      this._encoding = encoding\n    } else {\n      // Standard behavior.\n      this._encoding = getEncoding('utf-8')\n\n      if (label !== undefined && 'console' in global) {\n        console.warn('TextEncoder constructor called with encoding label, '\n                      + 'which is ignored.')\n      }\n    }\n  }\n  get encoding() {\n    return this._encoding.name.toLowerCase()\n  }\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   */\n  encode(opt_string = '', options = {}) {\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful when\n    // the input is a USVString so streaming is not necessary.\n    if (!this._do_not_flush)\n      this._encoder = encoders[this._encoding.name]({\n        fatal: this._fatal === 'fatal' })\n    this._do_not_flush = Boolean(options['stream'])\n\n    // 1. Convert input to a stream.\n    const input = new Stream(stringToCodePoints(opt_string))\n\n    // 2. Let output be a new stream\n    const output = []\n\n    /** @type {?(number|!Array.<number>)} */\n    var result\n    // 3. While true, run these substeps:\n    while (true) {\n      // 1. Let token be the result of reading from input.\n      var token = input.read()\n      if (token === end_of_stream)\n        break\n      // 2. Let result be the result of processing token for encoder,\n      // input, output.\n      result = this._encoder.handler(input, token)\n      if (result === finished)\n        break\n      if (Array.isArray(result))\n        output.push.apply(output, /**@type {!Array.<number>}*/(result))\n      else\n        output.push(result)\n    }\n    // TODO: Align with spec algorithm.\n    if (!this._do_not_flush) {\n      while (true) {\n        result = this._encoder.handler(input, input.read())\n        if (result === finished)\n          break\n        if (Array.isArray(result))\n          output.push.apply(output, /**@type {!Array.<number>}*/(result))\n        else\n          output.push(result)\n      }\n      this._encoder = null\n    }\n    // 3. If result is finished, convert output into a byte sequence,\n    // and then return a Uint8Array object wrapping an ArrayBuffer\n    // containing output.\n    return new Uint8Array(output)\n  }\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}