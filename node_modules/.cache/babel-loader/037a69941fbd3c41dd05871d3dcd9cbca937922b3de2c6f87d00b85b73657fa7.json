{"ast":null,"code":"const {\n  ArgumentError\n} = require('../errors');\nconst {\n  JwksClient\n} = require('../JwksClient');\nconst supportedAlg = require('./config');\nconst handleSigningKeyError = (err, cb) => {\n  // If we didn't find a match, can't provide a key.\n  if (err && err.name === 'SigningKeyNotFoundError') {\n    return cb(null);\n  }\n\n  // If an error occured like rate limiting or HTTP issue, we'll bubble up the error.\n  if (err) {\n    return cb(err);\n  }\n};\nmodule.exports.expressJwtSecret = function (options) {\n  if (options === null || options === undefined) {\n    throw new ArgumentError('An options object must be provided when initializing expressJwtSecret');\n  }\n  const client = new JwksClient(options);\n  const onError = options.handleSigningKeyError || handleSigningKeyError;\n  const expressJwt7Provider = async (req, token) => {\n    if (!token) {\n      return;\n    }\n    const header = token.header;\n    if (!header || !supportedAlg.includes(header.alg)) {\n      return;\n    }\n    try {\n      const key = await client.getSigningKey(header.kid);\n      return key.publicKey || key.rsaPublicKey;\n    } catch (err) {\n      return new Promise((resolve, reject) => {\n        onError(err, newError => {\n          if (!newError) {\n            return resolve();\n          }\n          reject(newError);\n        });\n      });\n    }\n  };\n  return function secretProvider(req, header, payload, cb) {\n    //This function has 4 parameters to make it work with express-jwt@6\n    //but it also supports express-jwt@7 which only has 2.\n    if (arguments.length === 4) {\n      expressJwt7Provider(req, {\n        header\n      }).then(key => {\n        setImmediate(cb, null, key);\n      }).catch(err => {\n        setImmediate(cb, err);\n      });\n      return;\n    }\n    return expressJwt7Provider(req, arguments[1]);\n  };\n};","map":{"version":3,"names":["ArgumentError","require","JwksClient","supportedAlg","handleSigningKeyError","err","cb","name","module","exports","expressJwtSecret","options","undefined","client","onError","expressJwt7Provider","req","token","header","includes","alg","key","getSigningKey","kid","publicKey","rsaPublicKey","Promise","resolve","reject","newError","secretProvider","payload","arguments","length","then","setImmediate","catch"],"sources":["D:/Coding/React/taskmybusiness/node_modules/jwks-rsa/src/integrations/express.js"],"sourcesContent":["const { ArgumentError } = require('../errors');\nconst { JwksClient } = require('../JwksClient');\nconst supportedAlg = require('./config');\n\nconst handleSigningKeyError = (err, cb) => {\n  // If we didn't find a match, can't provide a key.\n  if (err && err.name === 'SigningKeyNotFoundError') {\n    return cb(null);\n  }\n\n  // If an error occured like rate limiting or HTTP issue, we'll bubble up the error.\n  if (err) {\n    return cb(err);\n  }\n};\n\nmodule.exports.expressJwtSecret = function (options) {\n  if (options === null || options === undefined) {\n    throw new ArgumentError('An options object must be provided when initializing expressJwtSecret');\n  }\n\n  const client = new JwksClient(options);\n  const onError = options.handleSigningKeyError || handleSigningKeyError;\n\n  const expressJwt7Provider = async (req, token) => {\n    if (!token) { return; }\n    const header = token.header;\n    if (!header || !supportedAlg.includes(header.alg)) {\n      return;\n    }\n    try {\n      const key = await client.getSigningKey(header.kid);\n      return key.publicKey || key.rsaPublicKey;\n    } catch (err) {\n      return new Promise((resolve, reject) => {\n        onError(err, (newError) => {\n          if (!newError) { return resolve(); }\n          reject(newError);\n        });\n      });\n    }\n  };\n\n  return function secretProvider(req, header, payload, cb) {\n    //This function has 4 parameters to make it work with express-jwt@6\n    //but it also supports express-jwt@7 which only has 2.\n    if (arguments.length === 4) {\n      expressJwt7Provider(req, { header })\n        .then(key => {\n          setImmediate(cb, null, key);\n        }).catch(err => {\n          setImmediate(cb, err);\n        });\n\n      return;\n    }\n\n    return expressJwt7Provider(req, arguments[1]);\n  };\n};\n"],"mappings":"AAAA,MAAM;EAAEA;AAAc,CAAC,GAAGC,OAAO,CAAC,WAAW,CAAC;AAC9C,MAAM;EAAEC;AAAW,CAAC,GAAGD,OAAO,CAAC,eAAe,CAAC;AAC/C,MAAME,YAAY,GAAGF,OAAO,CAAC,UAAU,CAAC;AAExC,MAAMG,qBAAqB,GAAGA,CAACC,GAAG,EAAEC,EAAE,KAAK;EACzC;EACA,IAAID,GAAG,IAAIA,GAAG,CAACE,IAAI,KAAK,yBAAyB,EAAE;IACjD,OAAOD,EAAE,CAAC,IAAI,CAAC;EACjB;;EAEA;EACA,IAAID,GAAG,EAAE;IACP,OAAOC,EAAE,CAACD,GAAG,CAAC;EAChB;AACF,CAAC;AAEDG,MAAM,CAACC,OAAO,CAACC,gBAAgB,GAAG,UAAUC,OAAO,EAAE;EACnD,IAAIA,OAAO,KAAK,IAAI,IAAIA,OAAO,KAAKC,SAAS,EAAE;IAC7C,MAAM,IAAIZ,aAAa,CAAC,uEAAuE,CAAC;EAClG;EAEA,MAAMa,MAAM,GAAG,IAAIX,UAAU,CAACS,OAAO,CAAC;EACtC,MAAMG,OAAO,GAAGH,OAAO,CAACP,qBAAqB,IAAIA,qBAAqB;EAEtE,MAAMW,mBAAmB,GAAG,MAAAA,CAAOC,GAAG,EAAEC,KAAK,KAAK;IAChD,IAAI,CAACA,KAAK,EAAE;MAAE;IAAQ;IACtB,MAAMC,MAAM,GAAGD,KAAK,CAACC,MAAM;IAC3B,IAAI,CAACA,MAAM,IAAI,CAACf,YAAY,CAACgB,QAAQ,CAACD,MAAM,CAACE,GAAG,CAAC,EAAE;MACjD;IACF;IACA,IAAI;MACF,MAAMC,GAAG,GAAG,MAAMR,MAAM,CAACS,aAAa,CAACJ,MAAM,CAACK,GAAG,CAAC;MAClD,OAAOF,GAAG,CAACG,SAAS,IAAIH,GAAG,CAACI,YAAY;IAC1C,CAAC,CAAC,OAAOpB,GAAG,EAAE;MACZ,OAAO,IAAIqB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;QACtCd,OAAO,CAACT,GAAG,EAAGwB,QAAQ,IAAK;UACzB,IAAI,CAACA,QAAQ,EAAE;YAAE,OAAOF,OAAO,CAAC,CAAC;UAAE;UACnCC,MAAM,CAACC,QAAQ,CAAC;QAClB,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ;EACF,CAAC;EAED,OAAO,SAASC,cAAcA,CAACd,GAAG,EAAEE,MAAM,EAAEa,OAAO,EAAEzB,EAAE,EAAE;IACvD;IACA;IACA,IAAI0B,SAAS,CAACC,MAAM,KAAK,CAAC,EAAE;MAC1BlB,mBAAmB,CAACC,GAAG,EAAE;QAAEE;MAAO,CAAC,CAAC,CACjCgB,IAAI,CAACb,GAAG,IAAI;QACXc,YAAY,CAAC7B,EAAE,EAAE,IAAI,EAAEe,GAAG,CAAC;MAC7B,CAAC,CAAC,CAACe,KAAK,CAAC/B,GAAG,IAAI;QACd8B,YAAY,CAAC7B,EAAE,EAAED,GAAG,CAAC;MACvB,CAAC,CAAC;MAEJ;IACF;IAEA,OAAOU,mBAAmB,CAACC,GAAG,EAAEgB,SAAS,CAAC,CAAC,CAAC,CAAC;EAC/C,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}