{"ast":null,"code":"import { initializeApp, firebase } from \"firebase/app\";\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\nimport { getAuth, signInWithPopup, GoogleAuthProvider, createUserWithEmailAndPassword, signInWithEmailAndPassword, signOut, onAuthStateChanged } from \"firebase/auth\";\nimport { getFirestore, doc, getDoc, getDocs, setDoc, collection, addDoc, query, orderBy, limit, FieldValue } from \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyDg0a3RsAo0iIaAJzwTjd7vHvGLWXqzZ00\",\n  authDomain: \"gotask-973a8.firebaseapp.com\",\n  projectId: \"gotask-973a8\",\n  storageBucket: \"gotask-973a8.appspot.com\",\n  messagingSenderId: \"589835338400\",\n  appId: \"1:589835338400:web:515ae6fc1315354658ffc5\",\n  measurementId: \"G-CS2ZWLEKDP\"\n};\n// Initialize Firebase\nconst firebaseApp = initializeApp(firebaseConfig);\nexport const firestore = getFirestore();\n//////////////////\nconst now = new Date();\nconst year = now.getFullYear();\nconst month = String(now.getMonth() + 1).padStart(2, \"0\");\nconst day = String(now.getDate()).padStart(2, \"0\");\nconst hours = String(now.getHours()).padStart(2, \"0\");\nconst minutes = String(now.getMinutes()).padStart(2, \"0\");\nconst seconds = String(now.getSeconds()).padStart(2, \"0\");\nconst formattedDate = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n\n///////////////////////////////////////////////\n\n/////////////////////////////////////////////////\nexport const auth = getAuth();\nexport const db = getFirestore();\nlet userId = \"\";\n\n/////////////////////\nconst googleProvider = new GoogleAuthProvider();\ngoogleProvider.setCustomParameters({\n  prompt: \"select_account\"\n});\n\n// console.log(auth);\nexport const signInWithGooglePopup = () => signInWithPopup(auth, googleProvider);\n// console.log(auth);\n\n//////////////////////////////////////////////////\n\nexport const createUserDocumentFromAuth = async function (userAuth) {\n  let additionalInformation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  if (!userAuth) return;\n  const userDocRef = doc(db, \"users\", userAuth.uid);\n  const userSnapshot = await getDoc(userDocRef);\n  // console.log(userSnapshot);\n  // console.log(userSnapshot.exists());\n\n  // user data does not exists\n  if (!userSnapshot.exists()) {\n    const {\n      displayName,\n      email\n    } = userAuth;\n    const createdAt = new Date();\n    try {\n      await setDoc(userDocRef, {\n        displayName,\n        email,\n        createdAt,\n        ...additionalInformation\n      });\n    } catch (error) {\n      console.log(error);\n    }\n    return userDocRef;\n  }\n};\n\n///////////////////////////////////////////////\n\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await createUserWithEmailAndPassword(auth, email, password);\n};\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\n  if (!email || !password) return;\n  return await signInWithEmailAndPassword(auth, email, password);\n};\nexport const signOutUser = async () => await signOut(auth);\nexport const onAuthStateChangedListener = callback => onAuthStateChanged(auth, callback);\n\n// const currentUserId = users.auth().currentUser.uid;\n// console.log(currentUserId);\n\n///////////// projects import export  ///////////////////\nexport let projects = [];\nonAuthStateChanged(auth, async user => {\n  if (user) {\n    userId = user.uid;\n    try {\n      // console.log(userId);\n    } catch (err) {\n      console.log(err.message);\n    }\n  } else {\n    projects = [];\n    // console.log(\"no user logged in\");\n  }\n});\n\nexport const updateProjects = async e => {\n  onAuthStateChanged(auth, async user => {\n    if (user) {\n      userId = user.uid;\n      const userDocRef = doc(db, \"users\", userId);\n      const projectsRef = collection(userDocRef, \"projects\");\n      const projectDocRef = doc(projectsRef, e);\n      try {\n        const snapshot = await getDoc(projectDocRef); // Use getDoc instead of getDocs for a single document\n        if (snapshot.exists()) {\n          projects.push(snapshot.data());\n        }\n      } catch (err) {\n        console.log(err.message);\n      }\n    } else {\n      projects = [];\n    }\n  });\n};\n\n//////////////////////////////////\n// console.log(\"before endpoint\", userId);\n\n// const todooo = {\n//   projectId: \"fDyUNv1-XbYbwP1ALFrpF\",\n//   projectName: \"Sample Title\",\n//   deadLine: \"Sample Description\",\n//   startingDate: \"Sample Status\",\n// };\n\n// let onAddProjectId = \"\";\nlet onAddProjectId = \"\";\nconst apiEndpoint = \"https://firestore.googleapis.com/v1/projects/gotask-973a8/databases/(default)/documents/users/\";\nexport const apiSlice = createApi({\n  reducerPath: \"api\",\n  baseQuery: fetchBaseQuery({\n    baseUrl: apiEndpoint\n  }),\n  tagTypes: [\"Todos\"],\n  endpoints: builder => ({\n    // getTodos: builder.query({\n    //   query: () => console.log(userId),\n    // }),\n\n    getTodos: builder.query({\n      query: () => `/${userId}/projects?key=AIzaSyDg0a3RsAo0iIaAJzwTjd7vHvGLWXqzZ00`,\n      providesTags: [\"Todos\"]\n    }),\n    ////////////////////////////////////////////////////////\n    addTodo: builder.mutation({\n      query: async todo => {\n        console.log({\n          ...todo\n        }, \"querry\");\n        setTimeout(() => {\n          console.log(\"second call\", onAddProjectId);\n          return {\n            url: `/${userId}/projects/${onAddProjectId}`,\n            method: \"PATCH\",\n            params: {\n              key: \"AIzaSyDg0a3RsAo0iIaAJzwTjd7vHvGLWXqzZ00\"\n            },\n            body: {\n              fields: {\n                // projectName: { stringValue: todo.projectName },\n                projectId: {\n                  stringValue: onAddProjectId\n                }\n                // deadLine: { stringValue: todo.deadLine },\n                // startingDate: { stringValue: todo.startingDate },\n                // createdAt: { stringValue: formattedDate },\n                // Add more fields as needed\n              }\n            }\n          };\n        }, 500);\n      },\n      onQueryStarted: async () => {\n        console.log(\"onQueryStarted1\");\n        const docRef = await addDoc(collection(db, `users/${userId}/projects`), {});\n        onAddProjectId = docRef.id;\n        // const projectData = {};\n        // const docRef = await addDoc(\n        //   collection(db, `users/${userId}/projects`),\n        //   projectData\n        // );\n        // onAddProjectId = docRef.id;\n        console.log(\"onQueryStarted2\");\n      }\n    }),\n    /////////////////////////////////////////////\n    updateTodo: builder.mutation({\n      query: todo => ({\n        url: `/todos/${todo.id}`,\n        method: \"PATCH\",\n        body: todo\n      }),\n      invalidatesTags: [\"Todos\"]\n    }),\n    deleteTodo: builder.mutation({\n      query: id => ({\n        url: `/${userId}/projects/${id}?key=AIzaSyDg0a3RsAo0iIaAJzwTjd7vHvGLWXqzZ00`,\n        method: \"DELETE\"\n        // body: id,\n      }),\n\n      invalidatesTags: [\"Todos\"]\n    })\n  })\n});\nexport const {\n  useGetTodosQuery,\n  useAddTodoMutation,\n  useUpdateTodoMutation,\n  useDeleteTodoMutation\n} = apiSlice;","map":{"version":3,"names":["initializeApp","firebase","createApi","fetchBaseQuery","getAuth","signInWithPopup","GoogleAuthProvider","createUserWithEmailAndPassword","signInWithEmailAndPassword","signOut","onAuthStateChanged","getFirestore","doc","getDoc","getDocs","setDoc","collection","addDoc","query","orderBy","limit","FieldValue","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","measurementId","firebaseApp","firestore","now","Date","year","getFullYear","month","String","getMonth","padStart","day","getDate","hours","getHours","minutes","getMinutes","seconds","getSeconds","formattedDate","auth","db","userId","googleProvider","setCustomParameters","prompt","signInWithGooglePopup","createUserDocumentFromAuth","userAuth","additionalInformation","arguments","length","undefined","userDocRef","uid","userSnapshot","exists","displayName","email","createdAt","error","console","log","createAuthUserWithEmailAndPassword","password","signInAuthUserWithEmailAndPassword","signOutUser","onAuthStateChangedListener","callback","projects","user","err","message","updateProjects","e","projectsRef","projectDocRef","snapshot","push","data","onAddProjectId","apiEndpoint","apiSlice","reducerPath","baseQuery","baseUrl","tagTypes","endpoints","builder","getTodos","providesTags","addTodo","mutation","todo","setTimeout","url","method","params","key","body","fields","stringValue","onQueryStarted","docRef","id","updateTodo","invalidatesTags","deleteTodo","useGetTodosQuery","useAddTodoMutation","useUpdateTodoMutation","useDeleteTodoMutation"],"sources":["D:/Coding/React/taskmybusiness/src/utils/firebase/firebase-utils.js"],"sourcesContent":["import { initializeApp, firebase } from \"firebase/app\";\r\nimport { createApi, fetchBaseQuery } from \"@reduxjs/toolkit/query/react\";\r\n\r\nimport {\r\n  getAuth,\r\n  signInWithPopup,\r\n  GoogleAuthProvider,\r\n  createUserWithEmailAndPassword,\r\n  signInWithEmailAndPassword,\r\n  signOut,\r\n  onAuthStateChanged,\r\n} from \"firebase/auth\";\r\n\r\nimport {\r\n  getFirestore,\r\n  doc,\r\n  getDoc,\r\n  getDocs,\r\n  setDoc,\r\n  collection,\r\n  addDoc,\r\n  query,\r\n  orderBy,\r\n  limit,\r\n  FieldValue,\r\n} from \"firebase/firestore\";\r\n\r\nconst firebaseConfig = {\r\n  apiKey: \"AIzaSyDg0a3RsAo0iIaAJzwTjd7vHvGLWXqzZ00\",\r\n  authDomain: \"gotask-973a8.firebaseapp.com\",\r\n  projectId: \"gotask-973a8\",\r\n  storageBucket: \"gotask-973a8.appspot.com\",\r\n  messagingSenderId: \"589835338400\",\r\n  appId: \"1:589835338400:web:515ae6fc1315354658ffc5\",\r\n  measurementId: \"G-CS2ZWLEKDP\",\r\n};\r\n// Initialize Firebase\r\nconst firebaseApp = initializeApp(firebaseConfig);\r\n\r\nexport const firestore = getFirestore();\r\n//////////////////\r\nconst now = new Date();\r\nconst year = now.getFullYear();\r\nconst month = String(now.getMonth() + 1).padStart(2, \"0\");\r\nconst day = String(now.getDate()).padStart(2, \"0\");\r\nconst hours = String(now.getHours()).padStart(2, \"0\");\r\nconst minutes = String(now.getMinutes()).padStart(2, \"0\");\r\nconst seconds = String(now.getSeconds()).padStart(2, \"0\");\r\nconst formattedDate = `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\r\n\r\n///////////////////////////////////////////////\r\n\r\n/////////////////////////////////////////////////\r\nexport const auth = getAuth();\r\nexport const db = getFirestore();\r\nlet userId = \"\";\r\n\r\n/////////////////////\r\nconst googleProvider = new GoogleAuthProvider();\r\ngoogleProvider.setCustomParameters({\r\n  prompt: \"select_account\",\r\n});\r\n\r\n// console.log(auth);\r\nexport const signInWithGooglePopup = () =>\r\n  signInWithPopup(auth, googleProvider);\r\n// console.log(auth);\r\n\r\n//////////////////////////////////////////////////\r\n\r\nexport const createUserDocumentFromAuth = async (\r\n  userAuth,\r\n  additionalInformation = {}\r\n) => {\r\n  if (!userAuth) return;\r\n  const userDocRef = doc(db, \"users\", userAuth.uid);\r\n  const userSnapshot = await getDoc(userDocRef);\r\n  // console.log(userSnapshot);\r\n  // console.log(userSnapshot.exists());\r\n\r\n  // user data does not exists\r\n  if (!userSnapshot.exists()) {\r\n    const { displayName, email } = userAuth;\r\n    const createdAt = new Date();\r\n\r\n    try {\r\n      await setDoc(userDocRef, {\r\n        displayName,\r\n        email,\r\n        createdAt,\r\n        ...additionalInformation,\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    return userDocRef;\r\n  }\r\n};\r\n\r\n///////////////////////////////////////////////\r\n\r\nexport const createAuthUserWithEmailAndPassword = async (email, password) => {\r\n  if (!email || !password) return;\r\n  return await createUserWithEmailAndPassword(auth, email, password);\r\n};\r\n\r\nexport const signInAuthUserWithEmailAndPassword = async (email, password) => {\r\n  if (!email || !password) return;\r\n  return await signInWithEmailAndPassword(auth, email, password);\r\n};\r\n\r\nexport const signOutUser = async () => await signOut(auth);\r\n\r\nexport const onAuthStateChangedListener = (callback) =>\r\n  onAuthStateChanged(auth, callback);\r\n\r\n// const currentUserId = users.auth().currentUser.uid;\r\n// console.log(currentUserId);\r\n\r\n///////////// projects import export  ///////////////////\r\nexport let projects = [];\r\n\r\nonAuthStateChanged(auth, async (user) => {\r\n  if (user) {\r\n    userId = user.uid;\r\n\r\n    try {\r\n      // console.log(userId);\r\n    } catch (err) {\r\n      console.log(err.message);\r\n    }\r\n  } else {\r\n    projects = [];\r\n    // console.log(\"no user logged in\");\r\n  }\r\n});\r\n\r\nexport const updateProjects = async (e) => {\r\n  onAuthStateChanged(auth, async (user) => {\r\n    if (user) {\r\n      userId = user.uid;\r\n      const userDocRef = doc(db, \"users\", userId);\r\n      const projectsRef = collection(userDocRef, \"projects\");\r\n      const projectDocRef = doc(projectsRef, e);\r\n      try {\r\n        const snapshot = await getDoc(projectDocRef); // Use getDoc instead of getDocs for a single document\r\n        if (snapshot.exists()) {\r\n          projects.push(snapshot.data());\r\n        }\r\n      } catch (err) {\r\n        console.log(err.message);\r\n      }\r\n    } else {\r\n      projects = [];\r\n    }\r\n  });\r\n};\r\n\r\n//////////////////////////////////\r\n// console.log(\"before endpoint\", userId);\r\n\r\n// const todooo = {\r\n//   projectId: \"fDyUNv1-XbYbwP1ALFrpF\",\r\n//   projectName: \"Sample Title\",\r\n//   deadLine: \"Sample Description\",\r\n//   startingDate: \"Sample Status\",\r\n// };\r\n\r\n// let onAddProjectId = \"\";\r\nlet onAddProjectId = \"\";\r\nconst apiEndpoint =\r\n  \"https://firestore.googleapis.com/v1/projects/gotask-973a8/databases/(default)/documents/users/\";\r\n\r\nexport const apiSlice = createApi({\r\n  reducerPath: \"api\",\r\n  baseQuery: fetchBaseQuery({ baseUrl: apiEndpoint }),\r\n  tagTypes: [\"Todos\"],\r\n  endpoints: (builder) => ({\r\n    // getTodos: builder.query({\r\n    //   query: () => console.log(userId),\r\n    // }),\r\n\r\n    getTodos: builder.query({\r\n      query: () =>\r\n        `/${userId}/projects?key=AIzaSyDg0a3RsAo0iIaAJzwTjd7vHvGLWXqzZ00`,\r\n      providesTags: [\"Todos\"],\r\n    }),\r\n    ////////////////////////////////////////////////////////\r\n    addTodo: builder.mutation({\r\n      query: async (todo) => {\r\n        console.log({ ...todo }, \"querry\");\r\n\r\n        setTimeout(() => {\r\n          console.log(\"second call\", onAddProjectId);\r\n          return {\r\n            url: `/${userId}/projects/${onAddProjectId}`,\r\n            method: \"PATCH\",\r\n            params: { key: \"AIzaSyDg0a3RsAo0iIaAJzwTjd7vHvGLWXqzZ00\" },\r\n            body: {\r\n              fields: {\r\n                // projectName: { stringValue: todo.projectName },\r\n                projectId: { stringValue: onAddProjectId },\r\n                // deadLine: { stringValue: todo.deadLine },\r\n                // startingDate: { stringValue: todo.startingDate },\r\n                // createdAt: { stringValue: formattedDate },\r\n                // Add more fields as needed\r\n              },\r\n            },\r\n          };\r\n        }, 500);\r\n      },\r\n\r\n      onQueryStarted: async () => {\r\n        console.log(\"onQueryStarted1\");\r\n\r\n        const docRef = await addDoc(\r\n          collection(db, `users/${userId}/projects`),\r\n          {}\r\n        );\r\n        onAddProjectId = docRef.id;\r\n        // const projectData = {};\r\n        // const docRef = await addDoc(\r\n        //   collection(db, `users/${userId}/projects`),\r\n        //   projectData\r\n        // );\r\n        // onAddProjectId = docRef.id;\r\n        console.log(\"onQueryStarted2\");\r\n      },\r\n    }),\r\n\r\n    /////////////////////////////////////////////\r\n    updateTodo: builder.mutation({\r\n      query: (todo) => ({\r\n        url: `/todos/${todo.id}`,\r\n        method: \"PATCH\",\r\n        body: todo,\r\n      }),\r\n      invalidatesTags: [\"Todos\"],\r\n    }),\r\n\r\n    deleteTodo: builder.mutation({\r\n      query: (id) => ({\r\n        url: `/${userId}/projects/${id}?key=AIzaSyDg0a3RsAo0iIaAJzwTjd7vHvGLWXqzZ00`,\r\n        method: \"DELETE\",\r\n        // body: id,\r\n      }),\r\n      invalidatesTags: [\"Todos\"],\r\n    }),\r\n  }),\r\n});\r\n\r\nexport const {\r\n  useGetTodosQuery,\r\n  useAddTodoMutation,\r\n  useUpdateTodoMutation,\r\n  useDeleteTodoMutation,\r\n} = apiSlice;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}