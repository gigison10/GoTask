{"ast":null,"code":"/*! firebase-admin v11.9.0 */\n\"use strict\";\n\n/*!\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.AppCheckTokenVerifier = void 0;\nconst validator = require(\"../utils/validator\");\nconst util = require(\"../utils/index\");\nconst app_check_api_client_internal_1 = require(\"./app-check-api-client-internal\");\nconst jwt_1 = require(\"../utils/jwt\");\nconst APP_CHECK_ISSUER = 'https://firebaseappcheck.googleapis.com/';\nconst JWKS_URL = 'https://firebaseappcheck.googleapis.com/v1/jwks';\n/**\n * Class for verifying Firebase App Check tokens.\n *\n * @internal\n */\nclass AppCheckTokenVerifier {\n  constructor(app) {\n    this.app = app;\n    this.signatureVerifier = jwt_1.PublicKeySignatureVerifier.withJwksUrl(JWKS_URL);\n  }\n  /**\n   * Verifies the format and signature of a Firebase App Check token.\n   *\n   * @param token - The Firebase Auth JWT token to verify.\n   * @returns A promise fulfilled with the decoded claims of the Firebase App Check token.\n   */\n  verifyToken(token) {\n    if (!validator.isString(token)) {\n      throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', 'App check token must be a non-null string.');\n    }\n    return this.ensureProjectId().then(projectId => {\n      return this.decodeAndVerify(token, projectId);\n    }).then(decoded => {\n      const decodedAppCheckToken = decoded.payload;\n      decodedAppCheckToken.app_id = decodedAppCheckToken.sub;\n      return decodedAppCheckToken;\n    });\n  }\n  ensureProjectId() {\n    return util.findProjectId(this.app).then(projectId => {\n      if (!validator.isNonEmptyString(projectId)) {\n        throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-credential', 'Must initialize app with a cert credential or set your Firebase project ID as the ' + 'GOOGLE_CLOUD_PROJECT environment variable to verify an App Check token.');\n      }\n      return projectId;\n    });\n  }\n  decodeAndVerify(token, projectId) {\n    return this.safeDecode(token).then(decodedToken => {\n      this.verifyContent(decodedToken, projectId);\n      return this.verifySignature(token).then(() => decodedToken);\n    });\n  }\n  safeDecode(jwtToken) {\n    return (0, jwt_1.decodeJwt)(jwtToken).catch(() => {\n      const errorMessage = 'Decoding App Check token failed. Make sure you passed ' + 'the entire string JWT which represents the Firebase App Check token.';\n      throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', errorMessage);\n    });\n  }\n  /**\n   * Verifies the content of a Firebase App Check JWT.\n   *\n   * @param fullDecodedToken - The decoded JWT.\n   * @param projectId - The Firebase Project Id.\n   */\n  verifyContent(fullDecodedToken, projectId) {\n    const header = fullDecodedToken.header;\n    const payload = fullDecodedToken.payload;\n    const projectIdMatchMessage = ' Make sure the App Check token comes from the same ' + 'Firebase project as the service account used to authenticate this SDK.';\n    const scopedProjectId = `projects/${projectId}`;\n    let errorMessage;\n    if (header.alg !== jwt_1.ALGORITHM_RS256) {\n      errorMessage = 'The provided App Check token has incorrect algorithm. Expected \"' + jwt_1.ALGORITHM_RS256 + '\" but got ' + '\"' + header.alg + '\".';\n    } else if (!validator.isNonEmptyArray(payload.aud) || !payload.aud.includes(scopedProjectId)) {\n      errorMessage = 'The provided App Check token has incorrect \"aud\" (audience) claim. Expected \"' + scopedProjectId + '\" but got \"' + payload.aud + '\".' + projectIdMatchMessage;\n    } else if (typeof payload.iss !== 'string' || !payload.iss.startsWith(APP_CHECK_ISSUER)) {\n      errorMessage = 'The provided App Check token has incorrect \"iss\" (issuer) claim.';\n    } else if (typeof payload.sub !== 'string') {\n      errorMessage = 'The provided App Check token has no \"sub\" (subject) claim.';\n    } else if (payload.sub === '') {\n      errorMessage = 'The provided App Check token has an empty string \"sub\" (subject) claim.';\n    }\n    if (errorMessage) {\n      throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', errorMessage);\n    }\n  }\n  verifySignature(jwtToken) {\n    return this.signatureVerifier.verify(jwtToken).catch(error => {\n      throw this.mapJwtErrorToAppCheckError(error);\n    });\n  }\n  /**\n   * Maps JwtError to FirebaseAppCheckError\n   *\n   * @param error - JwtError to be mapped.\n   * @returns FirebaseAppCheckError instance.\n   */\n  mapJwtErrorToAppCheckError(error) {\n    if (error.code === jwt_1.JwtErrorCode.TOKEN_EXPIRED) {\n      const errorMessage = 'The provided App Check token has expired. Get a fresh App Check token' + ' from your client app and try again.';\n      return new app_check_api_client_internal_1.FirebaseAppCheckError('app-check-token-expired', errorMessage);\n    } else if (error.code === jwt_1.JwtErrorCode.INVALID_SIGNATURE) {\n      const errorMessage = 'The provided App Check token has invalid signature.';\n      return new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', errorMessage);\n    } else if (error.code === jwt_1.JwtErrorCode.NO_MATCHING_KID) {\n      const errorMessage = 'The provided App Check token has \"kid\" claim which does not ' + 'correspond to a known public key. Most likely the provided App Check token ' + 'is expired, so get a fresh token from your client app and try again.';\n      return new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', errorMessage);\n    }\n    return new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', error.message);\n  }\n}\nexports.AppCheckTokenVerifier = AppCheckTokenVerifier;","map":{"version":3,"names":["Object","defineProperty","exports","value","AppCheckTokenVerifier","validator","require","util","app_check_api_client_internal_1","jwt_1","APP_CHECK_ISSUER","JWKS_URL","constructor","app","signatureVerifier","PublicKeySignatureVerifier","withJwksUrl","verifyToken","token","isString","FirebaseAppCheckError","ensureProjectId","then","projectId","decodeAndVerify","decoded","decodedAppCheckToken","payload","app_id","sub","findProjectId","isNonEmptyString","safeDecode","decodedToken","verifyContent","verifySignature","jwtToken","decodeJwt","catch","errorMessage","fullDecodedToken","header","projectIdMatchMessage","scopedProjectId","alg","ALGORITHM_RS256","isNonEmptyArray","aud","includes","iss","startsWith","verify","error","mapJwtErrorToAppCheckError","code","JwtErrorCode","TOKEN_EXPIRED","INVALID_SIGNATURE","NO_MATCHING_KID","message"],"sources":["D:/Coding/React/taskmybusiness/node_modules/firebase-admin/lib/app-check/token-verifier.js"],"sourcesContent":["/*! firebase-admin v11.9.0 */\n\"use strict\";\n/*!\n * Copyright 2021 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.AppCheckTokenVerifier = void 0;\nconst validator = require(\"../utils/validator\");\nconst util = require(\"../utils/index\");\nconst app_check_api_client_internal_1 = require(\"./app-check-api-client-internal\");\nconst jwt_1 = require(\"../utils/jwt\");\nconst APP_CHECK_ISSUER = 'https://firebaseappcheck.googleapis.com/';\nconst JWKS_URL = 'https://firebaseappcheck.googleapis.com/v1/jwks';\n/**\n * Class for verifying Firebase App Check tokens.\n *\n * @internal\n */\nclass AppCheckTokenVerifier {\n    constructor(app) {\n        this.app = app;\n        this.signatureVerifier = jwt_1.PublicKeySignatureVerifier.withJwksUrl(JWKS_URL);\n    }\n    /**\n     * Verifies the format and signature of a Firebase App Check token.\n     *\n     * @param token - The Firebase Auth JWT token to verify.\n     * @returns A promise fulfilled with the decoded claims of the Firebase App Check token.\n     */\n    verifyToken(token) {\n        if (!validator.isString(token)) {\n            throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', 'App check token must be a non-null string.');\n        }\n        return this.ensureProjectId()\n            .then((projectId) => {\n            return this.decodeAndVerify(token, projectId);\n        })\n            .then((decoded) => {\n            const decodedAppCheckToken = decoded.payload;\n            decodedAppCheckToken.app_id = decodedAppCheckToken.sub;\n            return decodedAppCheckToken;\n        });\n    }\n    ensureProjectId() {\n        return util.findProjectId(this.app)\n            .then((projectId) => {\n            if (!validator.isNonEmptyString(projectId)) {\n                throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-credential', 'Must initialize app with a cert credential or set your Firebase project ID as the ' +\n                    'GOOGLE_CLOUD_PROJECT environment variable to verify an App Check token.');\n            }\n            return projectId;\n        });\n    }\n    decodeAndVerify(token, projectId) {\n        return this.safeDecode(token)\n            .then((decodedToken) => {\n            this.verifyContent(decodedToken, projectId);\n            return this.verifySignature(token)\n                .then(() => decodedToken);\n        });\n    }\n    safeDecode(jwtToken) {\n        return (0, jwt_1.decodeJwt)(jwtToken)\n            .catch(() => {\n            const errorMessage = 'Decoding App Check token failed. Make sure you passed ' +\n                'the entire string JWT which represents the Firebase App Check token.';\n            throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', errorMessage);\n        });\n    }\n    /**\n     * Verifies the content of a Firebase App Check JWT.\n     *\n     * @param fullDecodedToken - The decoded JWT.\n     * @param projectId - The Firebase Project Id.\n     */\n    verifyContent(fullDecodedToken, projectId) {\n        const header = fullDecodedToken.header;\n        const payload = fullDecodedToken.payload;\n        const projectIdMatchMessage = ' Make sure the App Check token comes from the same ' +\n            'Firebase project as the service account used to authenticate this SDK.';\n        const scopedProjectId = `projects/${projectId}`;\n        let errorMessage;\n        if (header.alg !== jwt_1.ALGORITHM_RS256) {\n            errorMessage = 'The provided App Check token has incorrect algorithm. Expected \"' +\n                jwt_1.ALGORITHM_RS256 + '\" but got ' + '\"' + header.alg + '\".';\n        }\n        else if (!validator.isNonEmptyArray(payload.aud) || !payload.aud.includes(scopedProjectId)) {\n            errorMessage = 'The provided App Check token has incorrect \"aud\" (audience) claim. Expected \"' +\n                scopedProjectId + '\" but got \"' + payload.aud + '\".' + projectIdMatchMessage;\n        }\n        else if (typeof payload.iss !== 'string' || !payload.iss.startsWith(APP_CHECK_ISSUER)) {\n            errorMessage = 'The provided App Check token has incorrect \"iss\" (issuer) claim.';\n        }\n        else if (typeof payload.sub !== 'string') {\n            errorMessage = 'The provided App Check token has no \"sub\" (subject) claim.';\n        }\n        else if (payload.sub === '') {\n            errorMessage = 'The provided App Check token has an empty string \"sub\" (subject) claim.';\n        }\n        if (errorMessage) {\n            throw new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', errorMessage);\n        }\n    }\n    verifySignature(jwtToken) {\n        return this.signatureVerifier.verify(jwtToken)\n            .catch((error) => {\n            throw this.mapJwtErrorToAppCheckError(error);\n        });\n    }\n    /**\n     * Maps JwtError to FirebaseAppCheckError\n     *\n     * @param error - JwtError to be mapped.\n     * @returns FirebaseAppCheckError instance.\n     */\n    mapJwtErrorToAppCheckError(error) {\n        if (error.code === jwt_1.JwtErrorCode.TOKEN_EXPIRED) {\n            const errorMessage = 'The provided App Check token has expired. Get a fresh App Check token' +\n                ' from your client app and try again.';\n            return new app_check_api_client_internal_1.FirebaseAppCheckError('app-check-token-expired', errorMessage);\n        }\n        else if (error.code === jwt_1.JwtErrorCode.INVALID_SIGNATURE) {\n            const errorMessage = 'The provided App Check token has invalid signature.';\n            return new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', errorMessage);\n        }\n        else if (error.code === jwt_1.JwtErrorCode.NO_MATCHING_KID) {\n            const errorMessage = 'The provided App Check token has \"kid\" claim which does not ' +\n                'correspond to a known public key. Most likely the provided App Check token ' +\n                'is expired, so get a fresh token from your client app and try again.';\n            return new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', errorMessage);\n        }\n        return new app_check_api_client_internal_1.FirebaseAppCheckError('invalid-argument', error.message);\n    }\n}\nexports.AppCheckTokenVerifier = AppCheckTokenVerifier;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}