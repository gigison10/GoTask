{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __exportStar = this && this.__exportStar || function (m, exports) {\n  for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.requestTimeout = exports.setGCPResidency = exports.gcpResidencyCache = exports.resetIsAvailableCache = exports.isAvailable = exports.project = exports.instance = exports.HEADERS = exports.HEADER_VALUE = exports.HEADER_NAME = exports.SECONDARY_HOST_ADDRESS = exports.HOST_ADDRESS = exports.BASE_PATH = void 0;\nconst gaxios_1 = require(\"gaxios\");\nconst jsonBigint = require(\"json-bigint\");\nconst gcp_residency_1 = require(\"./gcp-residency\");\nexports.BASE_PATH = '/computeMetadata/v1';\nexports.HOST_ADDRESS = 'http://169.254.169.254';\nexports.SECONDARY_HOST_ADDRESS = 'http://metadata.google.internal.';\nexports.HEADER_NAME = 'Metadata-Flavor';\nexports.HEADER_VALUE = 'Google';\nexports.HEADERS = Object.freeze({\n  [exports.HEADER_NAME]: exports.HEADER_VALUE\n});\n/**\n * Returns the base URL while taking into account the GCE_METADATA_HOST\n * environment variable if it exists.\n *\n * @returns The base URL, e.g., http://169.254.169.254/computeMetadata/v1.\n */\nfunction getBaseUrl(baseUrl) {\n  if (!baseUrl) {\n    baseUrl = process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST || exports.HOST_ADDRESS;\n  }\n  // If no scheme is provided default to HTTP:\n  if (!/^https?:\\/\\//.test(baseUrl)) {\n    baseUrl = `http://${baseUrl}`;\n  }\n  return new URL(exports.BASE_PATH, baseUrl).href;\n}\n// Accepts an options object passed from the user to the API. In previous\n// versions of the API, it referred to a `Request` or an `Axios` request\n// options object.  Now it refers to an object with very limited property\n// names. This is here to help ensure users don't pass invalid options when\n// they  upgrade from 0.4 to 0.5 to 0.8.\nfunction validate(options) {\n  Object.keys(options).forEach(key => {\n    switch (key) {\n      case 'params':\n      case 'property':\n      case 'headers':\n        break;\n      case 'qs':\n        throw new Error(\"'qs' is not a valid configuration option. Please use 'params' instead.\");\n      default:\n        throw new Error(`'${key}' is not a valid configuration option.`);\n    }\n  });\n}\nasync function metadataAccessor(type, options) {\n  let noResponseRetries = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 3;\n  let fastFail = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  options = options || {};\n  if (typeof options === 'string') {\n    options = {\n      property: options\n    };\n  }\n  let property = '';\n  if (typeof options === 'object' && options.property) {\n    property = '/' + options.property;\n  }\n  validate(options);\n  try {\n    const requestMethod = fastFail ? fastFailMetadataRequest : gaxios_1.request;\n    const res = await requestMethod({\n      url: `${getBaseUrl()}/${type}${property}`,\n      headers: Object.assign({}, exports.HEADERS, options.headers),\n      retryConfig: {\n        noResponseRetries\n      },\n      params: options.params,\n      responseType: 'text',\n      timeout: requestTimeout()\n    });\n    // NOTE: node.js converts all incoming headers to lower case.\n    if (res.headers[exports.HEADER_NAME.toLowerCase()] !== exports.HEADER_VALUE) {\n      throw new Error(`Invalid response from metadata service: incorrect ${exports.HEADER_NAME} header.`);\n    } else if (!res.data) {\n      throw new Error('Invalid response from the metadata service');\n    }\n    if (typeof res.data === 'string') {\n      try {\n        return jsonBigint.parse(res.data);\n      } catch (_a) {\n        /* ignore */\n      }\n    }\n    return res.data;\n  } catch (e) {\n    const err = e;\n    if (err.response && err.response.status !== 200) {\n      err.message = `Unsuccessful response status code. ${err.message}`;\n    }\n    throw e;\n  }\n}\nasync function fastFailMetadataRequest(options) {\n  const secondaryOptions = {\n    ...options,\n    url: options.url.replace(getBaseUrl(), getBaseUrl(exports.SECONDARY_HOST_ADDRESS))\n  };\n  // We race a connection between DNS/IP to metadata server. There are a couple\n  // reasons for this:\n  //\n  // 1. the DNS is slow in some GCP environments; by checking both, we might\n  //    detect the runtime environment signficantly faster.\n  // 2. we can't just check the IP, which is tarpitted and slow to respond\n  //    on a user's local machine.\n  //\n  // Additional logic has been added to make sure that we don't create an\n  // unhandled rejection in scenarios where a failure happens sometime\n  // after a success.\n  //\n  // Note, however, if a failure happens prior to a success, a rejection should\n  // occur, this is for folks running locally.\n  //\n  let responded = false;\n  const r1 = (0, gaxios_1.request)(options).then(res => {\n    responded = true;\n    return res;\n  }).catch(err => {\n    if (responded) {\n      return r2;\n    } else {\n      responded = true;\n      throw err;\n    }\n  });\n  const r2 = (0, gaxios_1.request)(secondaryOptions).then(res => {\n    responded = true;\n    return res;\n  }).catch(err => {\n    if (responded) {\n      return r1;\n    } else {\n      responded = true;\n      throw err;\n    }\n  });\n  return Promise.race([r1, r2]);\n}\n/**\n * Obtain metadata for the current GCE instance\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction instance(options) {\n  return metadataAccessor('instance', options);\n}\nexports.instance = instance;\n/**\n * Obtain metadata for the current GCP Project.\n */\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction project(options) {\n  return metadataAccessor('project', options);\n}\nexports.project = project;\n/*\n * How many times should we retry detecting GCP environment.\n */\nfunction detectGCPAvailableRetries() {\n  return process.env.DETECT_GCP_RETRIES ? Number(process.env.DETECT_GCP_RETRIES) : 0;\n}\nlet cachedIsAvailableResponse;\n/**\n * Determine if the metadata server is currently available.\n */\nasync function isAvailable() {\n  try {\n    // If a user is instantiating several GCP libraries at the same time,\n    // this may result in multiple calls to isAvailable(), to detect the\n    // runtime environment. We use the same promise for each of these calls\n    // to reduce the network load.\n    if (cachedIsAvailableResponse === undefined) {\n      cachedIsAvailableResponse = metadataAccessor('instance', undefined, detectGCPAvailableRetries(),\n      // If the default HOST_ADDRESS has been overridden, we should not\n      // make an effort to try SECONDARY_HOST_ADDRESS (as we are likely in\n      // a non-GCP environment):\n      !(process.env.GCE_METADATA_IP || process.env.GCE_METADATA_HOST));\n    }\n    await cachedIsAvailableResponse;\n    return true;\n  } catch (e) {\n    const err = e;\n    if (process.env.DEBUG_AUTH) {\n      console.info(err);\n    }\n    if (err.type === 'request-timeout') {\n      // If running in a GCP environment, metadata endpoint should return\n      // within ms.\n      return false;\n    }\n    if (err.response && err.response.status === 404) {\n      return false;\n    } else {\n      if (!(err.response && err.response.status === 404) && (\n      // A warning is emitted if we see an unexpected err.code, or err.code\n      // is not populated:\n      !err.code || !['EHOSTDOWN', 'EHOSTUNREACH', 'ENETUNREACH', 'ENOENT', 'ENOTFOUND', 'ECONNREFUSED'].includes(err.code))) {\n        let code = 'UNKNOWN';\n        if (err.code) code = err.code;\n        process.emitWarning(`received unexpected error = ${err.message} code = ${code}`, 'MetadataLookupWarning');\n      }\n      // Failure to resolve the metadata service means that it is not available.\n      return false;\n    }\n  }\n}\nexports.isAvailable = isAvailable;\n/**\n * reset the memoized isAvailable() lookup.\n */\nfunction resetIsAvailableCache() {\n  cachedIsAvailableResponse = undefined;\n}\nexports.resetIsAvailableCache = resetIsAvailableCache;\n/**\n * A cache for the detected GCP Residency.\n */\nexports.gcpResidencyCache = null;\n/**\n * Sets the detected GCP Residency.\n * Useful for forcing metadata server detection behavior.\n *\n * Set `null` to autodetect the environment (default behavior).\n */\nfunction setGCPResidency() {\n  let value = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n  exports.gcpResidencyCache = value !== null ? value : (0, gcp_residency_1.detectGCPResidency)();\n}\nexports.setGCPResidency = setGCPResidency;\n/**\n * Obtain the timeout for requests to the metadata server.\n *\n * In certain environments and conditions requests can take longer than\n * the default timeout to complete. This function will determine the\n * appropriate timeout based on the environment.\n *\n * @returns {number} a request timeout duration in milliseconds.\n */\nfunction requestTimeout() {\n  // Detecting the residency can be resource-intensive. Let's cache the result.\n  if (exports.gcpResidencyCache === null) {\n    exports.gcpResidencyCache = (0, gcp_residency_1.detectGCPResidency)();\n  }\n  return exports.gcpResidencyCache ? 0 : 3000;\n}\nexports.requestTimeout = requestTimeout;\n__exportStar(require(\"./gcp-residency\"), exports);","map":{"version":3,"names":["gaxios_1","require","jsonBigint","gcp_residency_1","exports","BASE_PATH","HOST_ADDRESS","SECONDARY_HOST_ADDRESS","HEADER_NAME","HEADER_VALUE","HEADERS","Object","freeze","getBaseUrl","baseUrl","process","env","GCE_METADATA_IP","GCE_METADATA_HOST","test","URL","href","validate","options","keys","forEach","key","Error","metadataAccessor","type","noResponseRetries","arguments","length","undefined","fastFail","property","requestMethod","fastFailMetadataRequest","request","res","url","headers","assign","retryConfig","params","responseType","timeout","requestTimeout","toLowerCase","data","parse","_a","e","err","response","status","message","secondaryOptions","replace","responded","r1","then","catch","r2","Promise","race","instance","project","detectGCPAvailableRetries","DETECT_GCP_RETRIES","Number","cachedIsAvailableResponse","isAvailable","DEBUG_AUTH","console","info","code","includes","emitWarning","resetIsAvailableCache","gcpResidencyCache","setGCPResidency","value","detectGCPResidency","__exportStar"],"sources":["../../src/index.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}