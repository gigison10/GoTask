{"ast":null,"code":"/*! firebase-admin v11.9.0 */\n\"use strict\";\n\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IosApp = void 0;\nconst error_1 = require(\"../utils/error\");\nconst validator = require(\"../utils/validator\");\nconst project_management_api_request_internal_1 = require(\"./project-management-api-request-internal\");\nconst app_metadata_1 = require(\"./app-metadata\");\n/**\n * A reference to a Firebase iOS app.\n *\n * Do not call this constructor directly. Instead, use {@link ProjectManagement.iosApp}.\n */\nclass IosApp {\n  /**\n   * @internal\n   */\n  constructor(appId, requestHandler) {\n    this.appId = appId;\n    this.requestHandler = requestHandler;\n    if (!validator.isNonEmptyString(appId)) {\n      throw new error_1.FirebaseProjectManagementError('invalid-argument', 'appId must be a non-empty string.');\n    }\n    this.resourceName = `projects/-/iosApps/${appId}`;\n  }\n  /**\n   * Retrieves metadata about this iOS app.\n   *\n   * @returns A promise that\n   *     resolves to the retrieved metadata about this iOS app.\n   */\n  getMetadata() {\n    return this.requestHandler.getResource(this.resourceName).then(responseData => {\n      (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonNullObject(responseData), responseData, 'getMetadata()\\'s responseData must be a non-null object.');\n      const requiredFieldsList = ['name', 'appId', 'projectId', 'bundleId'];\n      requiredFieldsList.forEach(requiredField => {\n        (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonEmptyString(responseData[requiredField]), responseData, `getMetadata()'s responseData.${requiredField} must be a non-empty string.`);\n      });\n      const metadata = {\n        platform: app_metadata_1.AppPlatform.IOS,\n        resourceName: responseData.name,\n        appId: responseData.appId,\n        displayName: responseData.displayName || null,\n        projectId: responseData.projectId,\n        bundleId: responseData.bundleId\n      };\n      return metadata;\n    });\n  }\n  /**\n   * Sets the optional user-assigned display name of the app.\n   *\n   * @param newDisplayName - The new display name to set.\n   *\n   * @returns A promise that resolves when the display name has\n   *     been set.\n   */\n  setDisplayName(newDisplayName) {\n    return this.requestHandler.setDisplayName(this.resourceName, newDisplayName);\n  }\n  /**\n   * Gets the configuration artifact associated with this app.\n   *\n   * @returns A promise that resolves to the iOS app's Firebase\n   *     config file, in UTF-8 string format. This string is typically intended to\n   *     be written to a plist file that gets shipped with your iOS app.\n   */\n  getConfig() {\n    return this.requestHandler.getConfig(this.resourceName).then(responseData => {\n      (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonNullObject(responseData), responseData, 'getConfig()\\'s responseData must be a non-null object.');\n      const base64ConfigFileContents = responseData.configFileContents;\n      (0, project_management_api_request_internal_1.assertServerResponse)(validator.isBase64String(base64ConfigFileContents), responseData, 'getConfig()\\'s responseData.configFileContents must be a base64 string.');\n      return Buffer.from(base64ConfigFileContents, 'base64').toString('utf8');\n    });\n  }\n}\nexports.IosApp = IosApp;","map":{"version":3,"names":["Object","defineProperty","exports","value","IosApp","error_1","require","validator","project_management_api_request_internal_1","app_metadata_1","constructor","appId","requestHandler","isNonEmptyString","FirebaseProjectManagementError","resourceName","getMetadata","getResource","then","responseData","assertServerResponse","isNonNullObject","requiredFieldsList","forEach","requiredField","metadata","platform","AppPlatform","IOS","name","displayName","projectId","bundleId","setDisplayName","newDisplayName","getConfig","base64ConfigFileContents","configFileContents","isBase64String","Buffer","from","toString"],"sources":["D:/Coding/React/taskmybusiness/node_modules/firebase-admin/lib/project-management/ios-app.js"],"sourcesContent":["/*! firebase-admin v11.9.0 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.IosApp = void 0;\nconst error_1 = require(\"../utils/error\");\nconst validator = require(\"../utils/validator\");\nconst project_management_api_request_internal_1 = require(\"./project-management-api-request-internal\");\nconst app_metadata_1 = require(\"./app-metadata\");\n/**\n * A reference to a Firebase iOS app.\n *\n * Do not call this constructor directly. Instead, use {@link ProjectManagement.iosApp}.\n */\nclass IosApp {\n    /**\n     * @internal\n     */\n    constructor(appId, requestHandler) {\n        this.appId = appId;\n        this.requestHandler = requestHandler;\n        if (!validator.isNonEmptyString(appId)) {\n            throw new error_1.FirebaseProjectManagementError('invalid-argument', 'appId must be a non-empty string.');\n        }\n        this.resourceName = `projects/-/iosApps/${appId}`;\n    }\n    /**\n     * Retrieves metadata about this iOS app.\n     *\n     * @returns A promise that\n     *     resolves to the retrieved metadata about this iOS app.\n     */\n    getMetadata() {\n        return this.requestHandler.getResource(this.resourceName)\n            .then((responseData) => {\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonNullObject(responseData), responseData, 'getMetadata()\\'s responseData must be a non-null object.');\n            const requiredFieldsList = ['name', 'appId', 'projectId', 'bundleId'];\n            requiredFieldsList.forEach((requiredField) => {\n                (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonEmptyString(responseData[requiredField]), responseData, `getMetadata()'s responseData.${requiredField} must be a non-empty string.`);\n            });\n            const metadata = {\n                platform: app_metadata_1.AppPlatform.IOS,\n                resourceName: responseData.name,\n                appId: responseData.appId,\n                displayName: responseData.displayName || null,\n                projectId: responseData.projectId,\n                bundleId: responseData.bundleId,\n            };\n            return metadata;\n        });\n    }\n    /**\n     * Sets the optional user-assigned display name of the app.\n     *\n     * @param newDisplayName - The new display name to set.\n     *\n     * @returns A promise that resolves when the display name has\n     *     been set.\n     */\n    setDisplayName(newDisplayName) {\n        return this.requestHandler.setDisplayName(this.resourceName, newDisplayName);\n    }\n    /**\n     * Gets the configuration artifact associated with this app.\n     *\n     * @returns A promise that resolves to the iOS app's Firebase\n     *     config file, in UTF-8 string format. This string is typically intended to\n     *     be written to a plist file that gets shipped with your iOS app.\n     */\n    getConfig() {\n        return this.requestHandler.getConfig(this.resourceName)\n            .then((responseData) => {\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isNonNullObject(responseData), responseData, 'getConfig()\\'s responseData must be a non-null object.');\n            const base64ConfigFileContents = responseData.configFileContents;\n            (0, project_management_api_request_internal_1.assertServerResponse)(validator.isBase64String(base64ConfigFileContents), responseData, 'getConfig()\\'s responseData.configFileContents must be a base64 string.');\n            return Buffer.from(base64ConfigFileContents, 'base64').toString('utf8');\n        });\n    }\n}\nexports.IosApp = IosApp;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}