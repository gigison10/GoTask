{"ast":null,"code":"const logger = require('debug')('jwks');\nconst {\n  RateLimiter\n} = require('limiter');\nconst JwksRateLimitError = require('../errors/JwksRateLimitError');\nfunction rateLimitWrapper(client, _ref) {\n  let {\n    jwksRequestsPerMinute = 10\n  } = _ref;\n  const getSigningKey = client.getSigningKey.bind(client);\n  const limiter = new RateLimiter(jwksRequestsPerMinute, 'minute', true);\n  logger(`Configured rate limiting to JWKS endpoint at ${jwksRequestsPerMinute}/minute`);\n  return async kid => await new Promise((resolve, reject) => {\n    limiter.removeTokens(1, async (err, remaining) => {\n      if (err) {\n        reject(err);\n      }\n      logger('Requests to the JWKS endpoint available for the next minute:', remaining);\n      if (remaining < 0) {\n        logger('Too many requests to the JWKS endpoint');\n        reject(new JwksRateLimitError('Too many requests to the JWKS endpoint'));\n      } else {\n        try {\n          const key = await getSigningKey(kid);\n          resolve(key);\n        } catch (error) {\n          reject(error);\n        }\n      }\n    });\n  });\n}\nmodule.exports.default = rateLimitWrapper;","map":{"version":3,"names":["logger","require","RateLimiter","JwksRateLimitError","rateLimitWrapper","client","_ref","jwksRequestsPerMinute","getSigningKey","bind","limiter","kid","Promise","resolve","reject","removeTokens","err","remaining","key","error","module","exports","default"],"sources":["D:/Coding/React/taskmybusiness/node_modules/jwks-rsa/src/wrappers/rateLimit.js"],"sourcesContent":["const logger = require('debug')('jwks');\nconst { RateLimiter } = require('limiter');\n\nconst JwksRateLimitError = require('../errors/JwksRateLimitError');\n\nfunction rateLimitWrapper(client, { jwksRequestsPerMinute = 10 }) {\n  const getSigningKey = client.getSigningKey.bind(client);\n\n  const limiter = new RateLimiter(jwksRequestsPerMinute, 'minute', true);\n  logger(`Configured rate limiting to JWKS endpoint at ${jwksRequestsPerMinute}/minute`);\n\n  return async (kid) => await new Promise((resolve, reject) => {\n    limiter.removeTokens(1, async (err, remaining) => {\n      if (err) {\n        reject(err);\n      }\n\n      logger('Requests to the JWKS endpoint available for the next minute:', remaining);\n      if (remaining < 0) {\n        logger('Too many requests to the JWKS endpoint');\n        reject(new JwksRateLimitError('Too many requests to the JWKS endpoint'));\n      } else {\n        try {\n          const key = await getSigningKey(kid);\n          resolve(key);\n        } catch (error) {\n          reject(error);\n        }\n      }\n    });\n  });\n}\n\nmodule.exports.default = rateLimitWrapper;\n"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC;AACvC,MAAM;EAAEC;AAAY,CAAC,GAAGD,OAAO,CAAC,SAAS,CAAC;AAE1C,MAAME,kBAAkB,GAAGF,OAAO,CAAC,8BAA8B,CAAC;AAElE,SAASG,gBAAgBA,CAACC,MAAM,EAAAC,IAAA,EAAkC;EAAA,IAAhC;IAAEC,qBAAqB,GAAG;EAAG,CAAC,GAAAD,IAAA;EAC9D,MAAME,aAAa,GAAGH,MAAM,CAACG,aAAa,CAACC,IAAI,CAACJ,MAAM,CAAC;EAEvD,MAAMK,OAAO,GAAG,IAAIR,WAAW,CAACK,qBAAqB,EAAE,QAAQ,EAAE,IAAI,CAAC;EACtEP,MAAM,CAAE,gDAA+CO,qBAAsB,SAAQ,CAAC;EAEtF,OAAO,MAAOI,GAAG,IAAK,MAAM,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IAC3DJ,OAAO,CAACK,YAAY,CAAC,CAAC,EAAE,OAAOC,GAAG,EAAEC,SAAS,KAAK;MAChD,IAAID,GAAG,EAAE;QACPF,MAAM,CAACE,GAAG,CAAC;MACb;MAEAhB,MAAM,CAAC,8DAA8D,EAAEiB,SAAS,CAAC;MACjF,IAAIA,SAAS,GAAG,CAAC,EAAE;QACjBjB,MAAM,CAAC,wCAAwC,CAAC;QAChDc,MAAM,CAAC,IAAIX,kBAAkB,CAAC,wCAAwC,CAAC,CAAC;MAC1E,CAAC,MAAM;QACL,IAAI;UACF,MAAMe,GAAG,GAAG,MAAMV,aAAa,CAACG,GAAG,CAAC;UACpCE,OAAO,CAACK,GAAG,CAAC;QACd,CAAC,CAAC,OAAOC,KAAK,EAAE;UACdL,MAAM,CAACK,KAAK,CAAC;QACf;MACF;IACF,CAAC,CAAC;EACJ,CAAC,CAAC;AACJ;AAEAC,MAAM,CAACC,OAAO,CAACC,OAAO,GAAGlB,gBAAgB"},"metadata":{},"sourceType":"script","externalDependencies":[]}