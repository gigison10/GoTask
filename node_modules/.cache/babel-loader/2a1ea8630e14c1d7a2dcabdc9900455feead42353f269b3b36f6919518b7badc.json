{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.toLowerCamelCase = exports.toCamelCase = exports.camelToSnakeCase = void 0;\nfunction words(str) {\n  let normalize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  if (normalize) {\n    // strings like somethingABCSomething are special case for protobuf.js,\n    // they should be split as \"something\", \"abc\", \"something\".\n    // Deal with sequences of capital letters first.\n    str = str.replace(/([A-Z])([A-Z]+)([A-Z])/g, str => {\n      return str[0] + str.slice(1, str.length - 1).toLowerCase() + str[str.length - 1];\n    });\n  }\n  // split on spaces, non-alphanumeric, or capital letters\n  // note: we keep the capitalization of the first word (special case: IPProtocol)\n  return str.split(/(?=[A-Z])|[^A-Za-z0-9.]+/).filter(w => w.length > 0).map((w, index) => index === 0 ? w : w.toLowerCase());\n}\n/**\n * Converts the first character of the given string to lower case.\n */\nfunction lowercase(str) {\n  if (str.length === 0) {\n    return str;\n  }\n  return str[0].toLowerCase() + str.slice(1);\n}\n/**\n * Converts a given string from camelCase (used by protobuf.js and in JSON)\n * to snake_case (normally used in proto definitions).\n */\nfunction camelToSnakeCase(str) {\n  // Keep the first position capitalization, otherwise decapitalize with underscore.\n  const wordsList = words(str);\n  if (wordsList.length === 0) {\n    return str;\n  }\n  const result = [wordsList[0]];\n  result.push(...wordsList.slice(1).map(lowercase));\n  return result.join('_');\n}\nexports.camelToSnakeCase = camelToSnakeCase;\n/**\n * Capitalizes the first character of the given string.\n */\nfunction capitalize(str) {\n  if (str.length === 0) {\n    return str;\n  }\n  return str[0].toUpperCase() + str.slice(1);\n}\n/**\n * Converts a given string from snake_case (normally used in proto definitions) or\n * PascalCase (also used in proto definitions) to camelCase (used by protobuf.js).\n * Preserves capitalization of the first character.\n */\nfunction toCamelCase(str) {\n  const wordsList = words(str, /*normalize:*/true);\n  if (wordsList.length === 0) {\n    return str;\n  }\n  const result = [wordsList[0]];\n  result.push(...wordsList.slice(1).map(w => {\n    if (w.match(/^\\d+$/)) {\n      return '_' + w;\n    }\n    return capitalize(w);\n  }));\n  return result.join('');\n}\nexports.toCamelCase = toCamelCase;\n/**\n * Converts a given string to lower camel case (forcing the first character to be\n * in lower case).\n */\nfunction toLowerCamelCase(str) {\n  const camelCase = toCamelCase(str);\n  if (camelCase.length === 0) {\n    return camelCase;\n  }\n  return camelCase[0].toLowerCase() + camelCase.slice(1);\n}\nexports.toLowerCamelCase = toLowerCamelCase;","map":{"version":3,"names":["words","str","normalize","arguments","length","undefined","replace","slice","toLowerCase","split","filter","w","map","index","lowercase","camelToSnakeCase","wordsList","result","push","join","exports","capitalize","toUpperCase","toCamelCase","match","toLowerCamelCase","camelCase"],"sources":["../../src/util.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}