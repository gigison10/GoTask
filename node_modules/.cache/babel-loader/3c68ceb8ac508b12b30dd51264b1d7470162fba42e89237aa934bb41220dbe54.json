{"ast":null,"code":"/*! firebase-admin v11.9.0 */\n\"use strict\";\n\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MachineLearningApiClient = exports.isGcsTfliteModelOptions = void 0;\nconst api_request_1 = require(\"../utils/api-request\");\nconst error_1 = require(\"../utils/error\");\nconst utils = require(\"../utils/index\");\nconst validator = require(\"../utils/validator\");\nconst machine_learning_utils_1 = require(\"./machine-learning-utils\");\nconst ML_V1BETA2_API = 'https://firebaseml.googleapis.com/v1beta2';\nconst FIREBASE_VERSION_HEADER = {\n  'X-Firebase-Client': `fire-admin-node/${utils.getSdkVersion()}`\n};\n// Operation polling defaults\nconst POLL_DEFAULT_MAX_TIME_MILLISECONDS = 120000; // Maximum overall 2 minutes\nconst POLL_BASE_WAIT_TIME_MILLISECONDS = 3000; // Start with 3 second delay\nconst POLL_MAX_WAIT_TIME_MILLISECONDS = 30000; // Maximum 30 second delay\nfunction isGcsTfliteModelOptions(options) {\n  const gcsUri = options?.tfliteModel?.gcsTfliteUri;\n  return typeof gcsUri !== 'undefined';\n}\nexports.isGcsTfliteModelOptions = isGcsTfliteModelOptions;\n/**\n * Class that facilitates sending requests to the Firebase ML backend API.\n *\n * @internal\n */\nclass MachineLearningApiClient {\n  constructor(app) {\n    this.app = app;\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'First argument passed to admin.machineLearning() must be a valid ' + 'Firebase app instance.');\n    }\n    this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n  }\n  createModel(model) {\n    if (!validator.isNonNullObject(model) || !validator.isNonEmptyString(model.displayName)) {\n      const err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid model content.');\n      return Promise.reject(err);\n    }\n    return this.getProjectUrl().then(url => {\n      const request = {\n        method: 'POST',\n        url: `${url}/models`,\n        data: model\n      };\n      return this.sendRequest(request);\n    });\n  }\n  updateModel(modelId, model, updateMask) {\n    if (!validator.isNonEmptyString(modelId) || !validator.isNonNullObject(model) || !validator.isNonEmptyArray(updateMask)) {\n      const err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid model or mask content.');\n      return Promise.reject(err);\n    }\n    return this.getProjectUrl().then(url => {\n      const request = {\n        method: 'PATCH',\n        url: `${url}/models/${modelId}?updateMask=${updateMask.join()}`,\n        data: model\n      };\n      return this.sendRequest(request);\n    });\n  }\n  getModel(modelId) {\n    return Promise.resolve().then(() => {\n      return this.getModelName(modelId);\n    }).then(modelName => {\n      return this.getResourceWithShortName(modelName);\n    });\n  }\n  getOperation(operationName) {\n    return Promise.resolve().then(() => {\n      return this.getResourceWithFullName(operationName);\n    });\n  }\n  listModels() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (!validator.isNonNullObject(options)) {\n      const err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid ListModelsOptions');\n      return Promise.reject(err);\n    }\n    if (typeof options.filter !== 'undefined' && !validator.isNonEmptyString(options.filter)) {\n      const err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid list filter.');\n      return Promise.reject(err);\n    }\n    if (typeof options.pageSize !== 'undefined') {\n      if (!validator.isNumber(options.pageSize)) {\n        const err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid page size.');\n        return Promise.reject(err);\n      }\n      if (options.pageSize < 1 || options.pageSize > 100) {\n        const err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Page size must be between 1 and 100.');\n        return Promise.reject(err);\n      }\n    }\n    if (typeof options.pageToken !== 'undefined' && !validator.isNonEmptyString(options.pageToken)) {\n      const err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Next page token must be a non-empty string.');\n      return Promise.reject(err);\n    }\n    return this.getProjectUrl().then(url => {\n      const request = {\n        method: 'GET',\n        url: `${url}/models`,\n        data: options\n      };\n      return this.sendRequest(request);\n    });\n  }\n  deleteModel(modelId) {\n    return this.getProjectUrl().then(url => {\n      const modelName = this.getModelName(modelId);\n      const request = {\n        method: 'DELETE',\n        url: `${url}/${modelName}`\n      };\n      return this.sendRequest(request);\n    });\n  }\n  /**\n   * Handles a Long Running Operation coming back from the server.\n   *\n   * @param op - The operation to handle\n   * @param options - The options for polling\n   */\n  handleOperation(op, options) {\n    if (op.done) {\n      if (op.response) {\n        return Promise.resolve(op.response);\n      } else if (op.error) {\n        const err = machine_learning_utils_1.FirebaseMachineLearningError.fromOperationError(op.error.code, op.error.message);\n        return Promise.reject(err);\n      }\n      // Done operations must have either a response or an error.\n      throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-server-response', 'Invalid operation response.');\n    }\n    // Operation is not done\n    if (options?.wait) {\n      return this.pollOperationWithExponentialBackoff(op.name, options);\n    }\n    const metadata = op.metadata || {};\n    const metadataType = metadata['@type'] || '';\n    if (!metadataType.includes('ModelOperationMetadata')) {\n      throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-server-response', `Unknown Metadata type: ${JSON.stringify(metadata)}`);\n    }\n    return this.getModel(extractModelId(metadata.name));\n  }\n  // baseWaitMillis and maxWaitMillis should only ever be modified by unit tests to run faster.\n  pollOperationWithExponentialBackoff(opName, options) {\n    const maxTimeMilliseconds = options?.maxTimeMillis ?? POLL_DEFAULT_MAX_TIME_MILLISECONDS;\n    const baseWaitMillis = options?.baseWaitMillis ?? POLL_BASE_WAIT_TIME_MILLISECONDS;\n    const maxWaitMillis = options?.maxWaitMillis ?? POLL_MAX_WAIT_TIME_MILLISECONDS;\n    const poller = new api_request_1.ExponentialBackoffPoller(baseWaitMillis, maxWaitMillis, maxTimeMilliseconds);\n    return poller.poll(() => {\n      return this.getOperation(opName).then(responseData => {\n        if (!responseData.done) {\n          return null;\n        }\n        if (responseData.error) {\n          const err = machine_learning_utils_1.FirebaseMachineLearningError.fromOperationError(responseData.error.code, responseData.error.message);\n          throw err;\n        }\n        return responseData.response;\n      });\n    });\n  }\n  /**\n   * Gets the specified resource from the ML API. Resource names must be the short names without project\n   * ID prefix (e.g. `models/123456789`).\n   *\n   * @param {string} name Short name of the resource to get. e.g. 'models/12345'\n   * @returns {Promise<T>} A promise that fulfills with the resource.\n   */\n  getResourceWithShortName(name) {\n    return this.getProjectUrl().then(url => {\n      const request = {\n        method: 'GET',\n        url: `${url}/${name}`\n      };\n      return this.sendRequest(request);\n    });\n  }\n  /**\n   * Gets the specified resource from the ML API. Resource names must be the full names including project\n   * number prefix.\n   * @param fullName - Full resource name of the resource to get. e.g. projects/123465/operations/987654\n   * @returns {Promise<T>} A promise that fulfulls with the resource.\n   */\n  getResourceWithFullName(fullName) {\n    const request = {\n      method: 'GET',\n      url: `${ML_V1BETA2_API}/${fullName}`\n    };\n    return this.sendRequest(request);\n  }\n  sendRequest(request) {\n    request.headers = FIREBASE_VERSION_HEADER;\n    return this.httpClient.send(request).then(resp => {\n      return resp.data;\n    }).catch(err => {\n      throw this.toFirebaseError(err);\n    });\n  }\n  toFirebaseError(err) {\n    if (err instanceof error_1.PrefixedFirebaseError) {\n      return err;\n    }\n    const response = err.response;\n    if (!response.isJson()) {\n      return new machine_learning_utils_1.FirebaseMachineLearningError('unknown-error', `Unexpected response with status: ${response.status} and body: ${response.text}`);\n    }\n    const error = response.data.error || {};\n    let code = 'unknown-error';\n    if (error.status && error.status in ERROR_CODE_MAPPING) {\n      code = ERROR_CODE_MAPPING[error.status];\n    }\n    const message = error.message || `Unknown server error: ${response.text}`;\n    return new machine_learning_utils_1.FirebaseMachineLearningError(code, message);\n  }\n  getProjectUrl() {\n    return this.getProjectIdPrefix().then(projectIdPrefix => {\n      return `${ML_V1BETA2_API}/${projectIdPrefix}`;\n    });\n  }\n  getProjectIdPrefix() {\n    if (this.projectIdPrefix) {\n      return Promise.resolve(this.projectIdPrefix);\n    }\n    return utils.findProjectId(this.app).then(projectId => {\n      if (!validator.isNonEmptyString(projectId)) {\n        throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Failed to determine project ID. Initialize the SDK with service account credentials, or ' + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT ' + 'environment variable.');\n      }\n      this.projectIdPrefix = `projects/${projectId}`;\n      return this.projectIdPrefix;\n    });\n  }\n  getModelName(modelId) {\n    if (!validator.isNonEmptyString(modelId)) {\n      throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Model ID must be a non-empty string.');\n    }\n    if (modelId.indexOf('/') !== -1) {\n      throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Model ID must not contain any \"/\" characters.');\n    }\n    return `models/${modelId}`;\n  }\n}\nexports.MachineLearningApiClient = MachineLearningApiClient;\nconst ERROR_CODE_MAPPING = {\n  INVALID_ARGUMENT: 'invalid-argument',\n  NOT_FOUND: 'not-found',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  UNAUTHENTICATED: 'authentication-error',\n  UNKNOWN: 'unknown-error'\n};\nfunction extractModelId(resourceName) {\n  return resourceName.split('/').pop();\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","MachineLearningApiClient","isGcsTfliteModelOptions","api_request_1","require","error_1","utils","validator","machine_learning_utils_1","ML_V1BETA2_API","FIREBASE_VERSION_HEADER","getSdkVersion","POLL_DEFAULT_MAX_TIME_MILLISECONDS","POLL_BASE_WAIT_TIME_MILLISECONDS","POLL_MAX_WAIT_TIME_MILLISECONDS","options","gcsUri","tfliteModel","gcsTfliteUri","constructor","app","isNonNullObject","FirebaseMachineLearningError","httpClient","AuthorizedHttpClient","createModel","model","isNonEmptyString","displayName","err","Promise","reject","getProjectUrl","then","url","request","method","data","sendRequest","updateModel","modelId","updateMask","isNonEmptyArray","join","getModel","resolve","getModelName","modelName","getResourceWithShortName","getOperation","operationName","getResourceWithFullName","listModels","arguments","length","undefined","filter","pageSize","isNumber","pageToken","deleteModel","handleOperation","op","done","response","error","fromOperationError","code","message","wait","pollOperationWithExponentialBackoff","name","metadata","metadataType","includes","JSON","stringify","extractModelId","opName","maxTimeMilliseconds","maxTimeMillis","baseWaitMillis","maxWaitMillis","poller","ExponentialBackoffPoller","poll","responseData","fullName","headers","send","resp","catch","toFirebaseError","PrefixedFirebaseError","isJson","status","text","ERROR_CODE_MAPPING","getProjectIdPrefix","projectIdPrefix","findProjectId","projectId","indexOf","INVALID_ARGUMENT","NOT_FOUND","RESOURCE_EXHAUSTED","UNAUTHENTICATED","UNKNOWN","resourceName","split","pop"],"sources":["D:/Coding/React/taskmybusiness/node_modules/firebase-admin/lib/machine-learning/machine-learning-api-client.js"],"sourcesContent":["/*! firebase-admin v11.9.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.MachineLearningApiClient = exports.isGcsTfliteModelOptions = void 0;\nconst api_request_1 = require(\"../utils/api-request\");\nconst error_1 = require(\"../utils/error\");\nconst utils = require(\"../utils/index\");\nconst validator = require(\"../utils/validator\");\nconst machine_learning_utils_1 = require(\"./machine-learning-utils\");\nconst ML_V1BETA2_API = 'https://firebaseml.googleapis.com/v1beta2';\nconst FIREBASE_VERSION_HEADER = {\n    'X-Firebase-Client': `fire-admin-node/${utils.getSdkVersion()}`,\n};\n// Operation polling defaults\nconst POLL_DEFAULT_MAX_TIME_MILLISECONDS = 120000; // Maximum overall 2 minutes\nconst POLL_BASE_WAIT_TIME_MILLISECONDS = 3000; // Start with 3 second delay\nconst POLL_MAX_WAIT_TIME_MILLISECONDS = 30000; // Maximum 30 second delay\nfunction isGcsTfliteModelOptions(options) {\n    const gcsUri = options?.tfliteModel?.gcsTfliteUri;\n    return typeof gcsUri !== 'undefined';\n}\nexports.isGcsTfliteModelOptions = isGcsTfliteModelOptions;\n/**\n * Class that facilitates sending requests to the Firebase ML backend API.\n *\n * @internal\n */\nclass MachineLearningApiClient {\n    constructor(app) {\n        this.app = app;\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'First argument passed to admin.machineLearning() must be a valid '\n                + 'Firebase app instance.');\n        }\n        this.httpClient = new api_request_1.AuthorizedHttpClient(app);\n    }\n    createModel(model) {\n        if (!validator.isNonNullObject(model) ||\n            !validator.isNonEmptyString(model.displayName)) {\n            const err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid model content.');\n            return Promise.reject(err);\n        }\n        return this.getProjectUrl()\n            .then((url) => {\n            const request = {\n                method: 'POST',\n                url: `${url}/models`,\n                data: model,\n            };\n            return this.sendRequest(request);\n        });\n    }\n    updateModel(modelId, model, updateMask) {\n        if (!validator.isNonEmptyString(modelId) ||\n            !validator.isNonNullObject(model) ||\n            !validator.isNonEmptyArray(updateMask)) {\n            const err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid model or mask content.');\n            return Promise.reject(err);\n        }\n        return this.getProjectUrl()\n            .then((url) => {\n            const request = {\n                method: 'PATCH',\n                url: `${url}/models/${modelId}?updateMask=${updateMask.join()}`,\n                data: model,\n            };\n            return this.sendRequest(request);\n        });\n    }\n    getModel(modelId) {\n        return Promise.resolve()\n            .then(() => {\n            return this.getModelName(modelId);\n        })\n            .then((modelName) => {\n            return this.getResourceWithShortName(modelName);\n        });\n    }\n    getOperation(operationName) {\n        return Promise.resolve()\n            .then(() => {\n            return this.getResourceWithFullName(operationName);\n        });\n    }\n    listModels(options = {}) {\n        if (!validator.isNonNullObject(options)) {\n            const err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid ListModelsOptions');\n            return Promise.reject(err);\n        }\n        if (typeof options.filter !== 'undefined' && !validator.isNonEmptyString(options.filter)) {\n            const err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid list filter.');\n            return Promise.reject(err);\n        }\n        if (typeof options.pageSize !== 'undefined') {\n            if (!validator.isNumber(options.pageSize)) {\n                const err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Invalid page size.');\n                return Promise.reject(err);\n            }\n            if (options.pageSize < 1 || options.pageSize > 100) {\n                const err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Page size must be between 1 and 100.');\n                return Promise.reject(err);\n            }\n        }\n        if (typeof options.pageToken !== 'undefined' && !validator.isNonEmptyString(options.pageToken)) {\n            const err = new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Next page token must be a non-empty string.');\n            return Promise.reject(err);\n        }\n        return this.getProjectUrl()\n            .then((url) => {\n            const request = {\n                method: 'GET',\n                url: `${url}/models`,\n                data: options,\n            };\n            return this.sendRequest(request);\n        });\n    }\n    deleteModel(modelId) {\n        return this.getProjectUrl()\n            .then((url) => {\n            const modelName = this.getModelName(modelId);\n            const request = {\n                method: 'DELETE',\n                url: `${url}/${modelName}`,\n            };\n            return this.sendRequest(request);\n        });\n    }\n    /**\n     * Handles a Long Running Operation coming back from the server.\n     *\n     * @param op - The operation to handle\n     * @param options - The options for polling\n     */\n    handleOperation(op, options) {\n        if (op.done) {\n            if (op.response) {\n                return Promise.resolve(op.response);\n            }\n            else if (op.error) {\n                const err = machine_learning_utils_1.FirebaseMachineLearningError.fromOperationError(op.error.code, op.error.message);\n                return Promise.reject(err);\n            }\n            // Done operations must have either a response or an error.\n            throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-server-response', 'Invalid operation response.');\n        }\n        // Operation is not done\n        if (options?.wait) {\n            return this.pollOperationWithExponentialBackoff(op.name, options);\n        }\n        const metadata = op.metadata || {};\n        const metadataType = metadata['@type'] || '';\n        if (!metadataType.includes('ModelOperationMetadata')) {\n            throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-server-response', `Unknown Metadata type: ${JSON.stringify(metadata)}`);\n        }\n        return this.getModel(extractModelId(metadata.name));\n    }\n    // baseWaitMillis and maxWaitMillis should only ever be modified by unit tests to run faster.\n    pollOperationWithExponentialBackoff(opName, options) {\n        const maxTimeMilliseconds = options?.maxTimeMillis ?? POLL_DEFAULT_MAX_TIME_MILLISECONDS;\n        const baseWaitMillis = options?.baseWaitMillis ?? POLL_BASE_WAIT_TIME_MILLISECONDS;\n        const maxWaitMillis = options?.maxWaitMillis ?? POLL_MAX_WAIT_TIME_MILLISECONDS;\n        const poller = new api_request_1.ExponentialBackoffPoller(baseWaitMillis, maxWaitMillis, maxTimeMilliseconds);\n        return poller.poll(() => {\n            return this.getOperation(opName)\n                .then((responseData) => {\n                if (!responseData.done) {\n                    return null;\n                }\n                if (responseData.error) {\n                    const err = machine_learning_utils_1.FirebaseMachineLearningError.fromOperationError(responseData.error.code, responseData.error.message);\n                    throw err;\n                }\n                return responseData.response;\n            });\n        });\n    }\n    /**\n     * Gets the specified resource from the ML API. Resource names must be the short names without project\n     * ID prefix (e.g. `models/123456789`).\n     *\n     * @param {string} name Short name of the resource to get. e.g. 'models/12345'\n     * @returns {Promise<T>} A promise that fulfills with the resource.\n     */\n    getResourceWithShortName(name) {\n        return this.getProjectUrl()\n            .then((url) => {\n            const request = {\n                method: 'GET',\n                url: `${url}/${name}`,\n            };\n            return this.sendRequest(request);\n        });\n    }\n    /**\n     * Gets the specified resource from the ML API. Resource names must be the full names including project\n     * number prefix.\n     * @param fullName - Full resource name of the resource to get. e.g. projects/123465/operations/987654\n     * @returns {Promise<T>} A promise that fulfulls with the resource.\n     */\n    getResourceWithFullName(fullName) {\n        const request = {\n            method: 'GET',\n            url: `${ML_V1BETA2_API}/${fullName}`\n        };\n        return this.sendRequest(request);\n    }\n    sendRequest(request) {\n        request.headers = FIREBASE_VERSION_HEADER;\n        return this.httpClient.send(request)\n            .then((resp) => {\n            return resp.data;\n        })\n            .catch((err) => {\n            throw this.toFirebaseError(err);\n        });\n    }\n    toFirebaseError(err) {\n        if (err instanceof error_1.PrefixedFirebaseError) {\n            return err;\n        }\n        const response = err.response;\n        if (!response.isJson()) {\n            return new machine_learning_utils_1.FirebaseMachineLearningError('unknown-error', `Unexpected response with status: ${response.status} and body: ${response.text}`);\n        }\n        const error = response.data.error || {};\n        let code = 'unknown-error';\n        if (error.status && error.status in ERROR_CODE_MAPPING) {\n            code = ERROR_CODE_MAPPING[error.status];\n        }\n        const message = error.message || `Unknown server error: ${response.text}`;\n        return new machine_learning_utils_1.FirebaseMachineLearningError(code, message);\n    }\n    getProjectUrl() {\n        return this.getProjectIdPrefix()\n            .then((projectIdPrefix) => {\n            return `${ML_V1BETA2_API}/${projectIdPrefix}`;\n        });\n    }\n    getProjectIdPrefix() {\n        if (this.projectIdPrefix) {\n            return Promise.resolve(this.projectIdPrefix);\n        }\n        return utils.findProjectId(this.app)\n            .then((projectId) => {\n            if (!validator.isNonEmptyString(projectId)) {\n                throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Failed to determine project ID. Initialize the SDK with service account credentials, or '\n                    + 'set project ID as an app option. Alternatively, set the GOOGLE_CLOUD_PROJECT '\n                    + 'environment variable.');\n            }\n            this.projectIdPrefix = `projects/${projectId}`;\n            return this.projectIdPrefix;\n        });\n    }\n    getModelName(modelId) {\n        if (!validator.isNonEmptyString(modelId)) {\n            throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Model ID must be a non-empty string.');\n        }\n        if (modelId.indexOf('/') !== -1) {\n            throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', 'Model ID must not contain any \"/\" characters.');\n        }\n        return `models/${modelId}`;\n    }\n}\nexports.MachineLearningApiClient = MachineLearningApiClient;\nconst ERROR_CODE_MAPPING = {\n    INVALID_ARGUMENT: 'invalid-argument',\n    NOT_FOUND: 'not-found',\n    RESOURCE_EXHAUSTED: 'resource-exhausted',\n    UNAUTHENTICATED: 'authentication-error',\n    UNKNOWN: 'unknown-error',\n};\nfunction extractModelId(resourceName) {\n    return resourceName.split('/').pop();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}