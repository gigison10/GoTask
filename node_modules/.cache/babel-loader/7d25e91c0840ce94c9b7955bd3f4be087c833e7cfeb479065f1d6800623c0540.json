{"ast":null,"code":"/*! firebase-admin v11.9.0 */\n\"use strict\";\n\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createSessionCookieVerifier = exports.createAuthBlockingTokenVerifier = exports.createIdTokenVerifier = exports.FirebaseTokenVerifier = exports.SESSION_COOKIE_INFO = exports.AUTH_BLOCKING_TOKEN_INFO = exports.ID_TOKEN_INFO = void 0;\nconst error_1 = require(\"../utils/error\");\nconst util = require(\"../utils/index\");\nconst validator = require(\"../utils/validator\");\nconst jwt_1 = require(\"../utils/jwt\");\n// Audience to use for Firebase Auth Custom tokens\nconst FIREBASE_AUDIENCE = 'https://identitytoolkit.googleapis.com/google.identity.identitytoolkit.v1.IdentityToolkit';\n// URL containing the public keys for the Google certs (whose private keys are used to sign Firebase\n// Auth ID tokens)\nconst CLIENT_CERT_URL = 'https://www.googleapis.com/robot/v1/metadata/x509/securetoken@system.gserviceaccount.com';\n// URL containing the public keys for Firebase session cookies. This will be updated to a different URL soon.\nconst SESSION_COOKIE_CERT_URL = 'https://www.googleapis.com/identitytoolkit/v3/relyingparty/publicKeys';\nconst EMULATOR_VERIFIER = new jwt_1.EmulatorSignatureVerifier();\n/**\n * User facing token information related to the Firebase ID token.\n *\n * @internal\n */\nexports.ID_TOKEN_INFO = {\n  url: 'https://firebase.google.com/docs/auth/admin/verify-id-tokens',\n  verifyApiName: 'verifyIdToken()',\n  jwtName: 'Firebase ID token',\n  shortName: 'ID token',\n  expiredErrorCode: error_1.AuthClientErrorCode.ID_TOKEN_EXPIRED\n};\n/**\n * User facing token information related to the Firebase Auth Blocking token.\n *\n * @internal\n */\nexports.AUTH_BLOCKING_TOKEN_INFO = {\n  url: 'https://cloud.google.com/identity-platform/docs/blocking-functions',\n  verifyApiName: '_verifyAuthBlockingToken()',\n  jwtName: 'Firebase Auth Blocking token',\n  shortName: 'Auth Blocking token',\n  expiredErrorCode: error_1.AuthClientErrorCode.AUTH_BLOCKING_TOKEN_EXPIRED\n};\n/**\n * User facing token information related to the Firebase session cookie.\n *\n * @internal\n */\nexports.SESSION_COOKIE_INFO = {\n  url: 'https://firebase.google.com/docs/auth/admin/manage-cookies',\n  verifyApiName: 'verifySessionCookie()',\n  jwtName: 'Firebase session cookie',\n  shortName: 'session cookie',\n  expiredErrorCode: error_1.AuthClientErrorCode.SESSION_COOKIE_EXPIRED\n};\n/**\n * Class for verifying general purpose Firebase JWTs. This verifies ID tokens and session cookies.\n *\n * @internal\n */\nclass FirebaseTokenVerifier {\n  constructor(clientCertUrl, issuer, tokenInfo, app) {\n    this.issuer = issuer;\n    this.tokenInfo = tokenInfo;\n    this.app = app;\n    if (!validator.isURL(clientCertUrl)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The provided public client certificate URL is an invalid URL.');\n    } else if (!validator.isURL(issuer)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The provided JWT issuer is an invalid URL.');\n    } else if (!validator.isNonNullObject(tokenInfo)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The provided JWT information is not an object or null.');\n    } else if (!validator.isURL(tokenInfo.url)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The provided JWT verification documentation URL is invalid.');\n    } else if (!validator.isNonEmptyString(tokenInfo.verifyApiName)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The JWT verify API name must be a non-empty string.');\n    } else if (!validator.isNonEmptyString(tokenInfo.jwtName)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The JWT public full name must be a non-empty string.');\n    } else if (!validator.isNonEmptyString(tokenInfo.shortName)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The JWT public short name must be a non-empty string.');\n    } else if (!validator.isNonNullObject(tokenInfo.expiredErrorCode) || !('code' in tokenInfo.expiredErrorCode)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The JWT expiration error code must be a non-null ErrorInfo object.');\n    }\n    this.shortNameArticle = tokenInfo.shortName.charAt(0).match(/[aeiou]/i) ? 'an' : 'a';\n    this.signatureVerifier = jwt_1.PublicKeySignatureVerifier.withCertificateUrl(clientCertUrl, app.options.httpAgent);\n    // For backward compatibility, the project ID is validated in the verification call.\n  }\n  /**\n   * Verifies the format and signature of a Firebase Auth JWT token.\n   *\n   * @param jwtToken - The Firebase Auth JWT token to verify.\n   * @param isEmulator - Whether to accept Auth Emulator tokens.\n   * @returns A promise fulfilled with the decoded claims of the Firebase Auth ID token.\n   */\n  verifyJWT(jwtToken) {\n    let isEmulator = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    if (!validator.isString(jwtToken)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `First argument to ${this.tokenInfo.verifyApiName} must be a ${this.tokenInfo.jwtName} string.`);\n    }\n    return this.ensureProjectId().then(projectId => {\n      return this.decodeAndVerify(jwtToken, projectId, isEmulator);\n    }).then(decoded => {\n      const decodedIdToken = decoded.payload;\n      decodedIdToken.uid = decodedIdToken.sub;\n      return decodedIdToken;\n    });\n  }\n  /** @alpha */\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  _verifyAuthBlockingToken(jwtToken, isEmulator, audience) {\n    if (!validator.isString(jwtToken)) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `First argument to ${this.tokenInfo.verifyApiName} must be a ${this.tokenInfo.jwtName} string.`);\n    }\n    return this.ensureProjectId().then(projectId => {\n      if (typeof audience === 'undefined') {\n        audience = `${projectId}.cloudfunctions.net/`;\n      }\n      return this.decodeAndVerify(jwtToken, projectId, isEmulator, audience);\n    }).then(decoded => {\n      const decodedAuthBlockingToken = decoded.payload;\n      decodedAuthBlockingToken.uid = decodedAuthBlockingToken.sub;\n      return decodedAuthBlockingToken;\n    });\n  }\n  ensureProjectId() {\n    return util.findProjectId(this.app).then(projectId => {\n      if (!validator.isNonEmptyString(projectId)) {\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'Must initialize app with a cert credential or set your Firebase project ID as the ' + `GOOGLE_CLOUD_PROJECT environment variable to call ${this.tokenInfo.verifyApiName}.`);\n      }\n      return Promise.resolve(projectId);\n    });\n  }\n  decodeAndVerify(token, projectId, isEmulator, audience) {\n    return this.safeDecode(token).then(decodedToken => {\n      this.verifyContent(decodedToken, projectId, isEmulator, audience);\n      return this.verifySignature(token, isEmulator).then(() => decodedToken);\n    });\n  }\n  safeDecode(jwtToken) {\n    return (0, jwt_1.decodeJwt)(jwtToken).catch(err => {\n      if (err.code === jwt_1.JwtErrorCode.INVALID_ARGUMENT) {\n        const verifyJwtTokenDocsMessage = ` See ${this.tokenInfo.url} ` + `for details on how to retrieve ${this.shortNameArticle} ${this.tokenInfo.shortName}.`;\n        const errorMessage = `Decoding ${this.tokenInfo.jwtName} failed. Make sure you passed ` + `the entire string JWT which represents ${this.shortNameArticle} ` + `${this.tokenInfo.shortName}.` + verifyJwtTokenDocsMessage;\n        throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\n      }\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, err.message);\n    });\n  }\n  /**\n   * Verifies the content of a Firebase Auth JWT.\n   *\n   * @param fullDecodedToken - The decoded JWT.\n   * @param projectId - The Firebase Project Id.\n   * @param isEmulator - Whether the token is an Emulator token.\n   */\n  verifyContent(fullDecodedToken, projectId, isEmulator, audience) {\n    const header = fullDecodedToken && fullDecodedToken.header;\n    const payload = fullDecodedToken && fullDecodedToken.payload;\n    const projectIdMatchMessage = ` Make sure the ${this.tokenInfo.shortName} comes from the same ` + 'Firebase project as the service account used to authenticate this SDK.';\n    const verifyJwtTokenDocsMessage = ` See ${this.tokenInfo.url} ` + `for details on how to retrieve ${this.shortNameArticle} ${this.tokenInfo.shortName}.`;\n    let errorMessage;\n    if (!isEmulator && typeof header.kid === 'undefined') {\n      const isCustomToken = payload.aud === FIREBASE_AUDIENCE;\n      const isLegacyCustomToken = header.alg === 'HS256' && payload.v === 0 && 'd' in payload && 'uid' in payload.d;\n      if (isCustomToken) {\n        errorMessage = `${this.tokenInfo.verifyApiName} expects ${this.shortNameArticle} ` + `${this.tokenInfo.shortName}, but was given a custom token.`;\n      } else if (isLegacyCustomToken) {\n        errorMessage = `${this.tokenInfo.verifyApiName} expects ${this.shortNameArticle} ` + `${this.tokenInfo.shortName}, but was given a legacy custom token.`;\n      } else {\n        errorMessage = `${this.tokenInfo.jwtName} has no \"kid\" claim.`;\n      }\n      errorMessage += verifyJwtTokenDocsMessage;\n    } else if (!isEmulator && header.alg !== jwt_1.ALGORITHM_RS256) {\n      errorMessage = `${this.tokenInfo.jwtName} has incorrect algorithm. Expected \"` + jwt_1.ALGORITHM_RS256 + '\" but got ' + '\"' + header.alg + '\".' + verifyJwtTokenDocsMessage;\n    } else if (typeof audience !== 'undefined' && !payload.aud.includes(audience)) {\n      errorMessage = `${this.tokenInfo.jwtName} has incorrect \"aud\" (audience) claim. Expected \"` + audience + '\" but got \"' + payload.aud + '\".' + verifyJwtTokenDocsMessage;\n    } else if (typeof audience === 'undefined' && payload.aud !== projectId) {\n      errorMessage = `${this.tokenInfo.jwtName} has incorrect \"aud\" (audience) claim. Expected \"` + projectId + '\" but got \"' + payload.aud + '\".' + projectIdMatchMessage + verifyJwtTokenDocsMessage;\n    } else if (payload.iss !== this.issuer + projectId) {\n      errorMessage = `${this.tokenInfo.jwtName} has incorrect \"iss\" (issuer) claim. Expected ` + `\"${this.issuer}` + projectId + '\" but got \"' + payload.iss + '\".' + projectIdMatchMessage + verifyJwtTokenDocsMessage;\n    } else if (typeof payload.sub !== 'string') {\n      errorMessage = `${this.tokenInfo.jwtName} has no \"sub\" (subject) claim.` + verifyJwtTokenDocsMessage;\n    } else if (payload.sub === '') {\n      errorMessage = `${this.tokenInfo.jwtName} has an empty string \"sub\" (subject) claim.` + verifyJwtTokenDocsMessage;\n    } else if (payload.sub.length > 128) {\n      errorMessage = `${this.tokenInfo.jwtName} has \"sub\" (subject) claim longer than 128 characters.` + verifyJwtTokenDocsMessage;\n    }\n    if (errorMessage) {\n      throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\n    }\n  }\n  verifySignature(jwtToken, isEmulator) {\n    const verifier = isEmulator ? EMULATOR_VERIFIER : this.signatureVerifier;\n    return verifier.verify(jwtToken).catch(error => {\n      throw this.mapJwtErrorToAuthError(error);\n    });\n  }\n  /**\n   * Maps JwtError to FirebaseAuthError\n   *\n   * @param error - JwtError to be mapped.\n   * @returns FirebaseAuthError or Error instance.\n   */\n  mapJwtErrorToAuthError(error) {\n    const verifyJwtTokenDocsMessage = ` See ${this.tokenInfo.url} ` + `for details on how to retrieve ${this.shortNameArticle} ${this.tokenInfo.shortName}.`;\n    if (error.code === jwt_1.JwtErrorCode.TOKEN_EXPIRED) {\n      const errorMessage = `${this.tokenInfo.jwtName} has expired. Get a fresh ${this.tokenInfo.shortName}` + ` from your client app and try again (auth/${this.tokenInfo.expiredErrorCode.code}).` + verifyJwtTokenDocsMessage;\n      return new error_1.FirebaseAuthError(this.tokenInfo.expiredErrorCode, errorMessage);\n    } else if (error.code === jwt_1.JwtErrorCode.INVALID_SIGNATURE) {\n      const errorMessage = `${this.tokenInfo.jwtName} has invalid signature.` + verifyJwtTokenDocsMessage;\n      return new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\n    } else if (error.code === jwt_1.JwtErrorCode.NO_MATCHING_KID) {\n      const errorMessage = `${this.tokenInfo.jwtName} has \"kid\" claim which does not ` + `correspond to a known public key. Most likely the ${this.tokenInfo.shortName} ` + 'is expired, so get a fresh token from your client app and try again.';\n      return new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\n    }\n    return new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, error.message);\n  }\n}\nexports.FirebaseTokenVerifier = FirebaseTokenVerifier;\n/**\n * Creates a new FirebaseTokenVerifier to verify Firebase ID tokens.\n *\n * @internal\n * @param app - Firebase app instance.\n * @returns FirebaseTokenVerifier\n */\nfunction createIdTokenVerifier(app) {\n  return new FirebaseTokenVerifier(CLIENT_CERT_URL, 'https://securetoken.google.com/', exports.ID_TOKEN_INFO, app);\n}\nexports.createIdTokenVerifier = createIdTokenVerifier;\n/**\n * Creates a new FirebaseTokenVerifier to verify Firebase Auth Blocking tokens.\n *\n * @internal\n * @param app - Firebase app instance.\n * @returns FirebaseTokenVerifier\n */\nfunction createAuthBlockingTokenVerifier(app) {\n  return new FirebaseTokenVerifier(CLIENT_CERT_URL, 'https://securetoken.google.com/', exports.AUTH_BLOCKING_TOKEN_INFO, app);\n}\nexports.createAuthBlockingTokenVerifier = createAuthBlockingTokenVerifier;\n/**\n * Creates a new FirebaseTokenVerifier to verify Firebase session cookies.\n *\n * @internal\n * @param app - Firebase app instance.\n * @returns FirebaseTokenVerifier\n */\nfunction createSessionCookieVerifier(app) {\n  return new FirebaseTokenVerifier(SESSION_COOKIE_CERT_URL, 'https://session.firebase.google.com/', exports.SESSION_COOKIE_INFO, app);\n}\nexports.createSessionCookieVerifier = createSessionCookieVerifier;","map":{"version":3,"names":["Object","defineProperty","exports","value","createSessionCookieVerifier","createAuthBlockingTokenVerifier","createIdTokenVerifier","FirebaseTokenVerifier","SESSION_COOKIE_INFO","AUTH_BLOCKING_TOKEN_INFO","ID_TOKEN_INFO","error_1","require","util","validator","jwt_1","FIREBASE_AUDIENCE","CLIENT_CERT_URL","SESSION_COOKIE_CERT_URL","EMULATOR_VERIFIER","EmulatorSignatureVerifier","url","verifyApiName","jwtName","shortName","expiredErrorCode","AuthClientErrorCode","ID_TOKEN_EXPIRED","AUTH_BLOCKING_TOKEN_EXPIRED","SESSION_COOKIE_EXPIRED","constructor","clientCertUrl","issuer","tokenInfo","app","isURL","FirebaseAuthError","INVALID_ARGUMENT","isNonNullObject","isNonEmptyString","shortNameArticle","charAt","match","signatureVerifier","PublicKeySignatureVerifier","withCertificateUrl","options","httpAgent","verifyJWT","jwtToken","isEmulator","arguments","length","undefined","isString","ensureProjectId","then","projectId","decodeAndVerify","decoded","decodedIdToken","payload","uid","sub","_verifyAuthBlockingToken","audience","decodedAuthBlockingToken","findProjectId","INVALID_CREDENTIAL","Promise","resolve","token","safeDecode","decodedToken","verifyContent","verifySignature","decodeJwt","catch","err","code","JwtErrorCode","verifyJwtTokenDocsMessage","errorMessage","INTERNAL_ERROR","message","fullDecodedToken","header","projectIdMatchMessage","kid","isCustomToken","aud","isLegacyCustomToken","alg","v","d","ALGORITHM_RS256","includes","iss","verifier","verify","error","mapJwtErrorToAuthError","TOKEN_EXPIRED","INVALID_SIGNATURE","NO_MATCHING_KID"],"sources":["D:/Coding/React/taskmybusiness/node_modules/firebase-admin/lib/auth/token-verifier.js"],"sourcesContent":["/*! firebase-admin v11.9.0 */\n\"use strict\";\n/*!\n * Copyright 2018 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createSessionCookieVerifier = exports.createAuthBlockingTokenVerifier = exports.createIdTokenVerifier = exports.FirebaseTokenVerifier = exports.SESSION_COOKIE_INFO = exports.AUTH_BLOCKING_TOKEN_INFO = exports.ID_TOKEN_INFO = void 0;\nconst error_1 = require(\"../utils/error\");\nconst util = require(\"../utils/index\");\nconst validator = require(\"../utils/validator\");\nconst jwt_1 = require(\"../utils/jwt\");\n// Audience to use for Firebase Auth Custom tokens\nconst FIREBASE_AUDIENCE = 'https://identitytoolkit.googleapis.com/google.identity.identitytoolkit.v1.IdentityToolkit';\n// URL containing the public keys for the Google certs (whose private keys are used to sign Firebase\n// Auth ID tokens)\nconst CLIENT_CERT_URL = 'https://www.googleapis.com/robot/v1/metadata/x509/securetoken@system.gserviceaccount.com';\n// URL containing the public keys for Firebase session cookies. This will be updated to a different URL soon.\nconst SESSION_COOKIE_CERT_URL = 'https://www.googleapis.com/identitytoolkit/v3/relyingparty/publicKeys';\nconst EMULATOR_VERIFIER = new jwt_1.EmulatorSignatureVerifier();\n/**\n * User facing token information related to the Firebase ID token.\n *\n * @internal\n */\nexports.ID_TOKEN_INFO = {\n    url: 'https://firebase.google.com/docs/auth/admin/verify-id-tokens',\n    verifyApiName: 'verifyIdToken()',\n    jwtName: 'Firebase ID token',\n    shortName: 'ID token',\n    expiredErrorCode: error_1.AuthClientErrorCode.ID_TOKEN_EXPIRED,\n};\n/**\n * User facing token information related to the Firebase Auth Blocking token.\n *\n * @internal\n */\nexports.AUTH_BLOCKING_TOKEN_INFO = {\n    url: 'https://cloud.google.com/identity-platform/docs/blocking-functions',\n    verifyApiName: '_verifyAuthBlockingToken()',\n    jwtName: 'Firebase Auth Blocking token',\n    shortName: 'Auth Blocking token',\n    expiredErrorCode: error_1.AuthClientErrorCode.AUTH_BLOCKING_TOKEN_EXPIRED,\n};\n/**\n * User facing token information related to the Firebase session cookie.\n *\n * @internal\n */\nexports.SESSION_COOKIE_INFO = {\n    url: 'https://firebase.google.com/docs/auth/admin/manage-cookies',\n    verifyApiName: 'verifySessionCookie()',\n    jwtName: 'Firebase session cookie',\n    shortName: 'session cookie',\n    expiredErrorCode: error_1.AuthClientErrorCode.SESSION_COOKIE_EXPIRED,\n};\n/**\n * Class for verifying general purpose Firebase JWTs. This verifies ID tokens and session cookies.\n *\n * @internal\n */\nclass FirebaseTokenVerifier {\n    constructor(clientCertUrl, issuer, tokenInfo, app) {\n        this.issuer = issuer;\n        this.tokenInfo = tokenInfo;\n        this.app = app;\n        if (!validator.isURL(clientCertUrl)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The provided public client certificate URL is an invalid URL.');\n        }\n        else if (!validator.isURL(issuer)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The provided JWT issuer is an invalid URL.');\n        }\n        else if (!validator.isNonNullObject(tokenInfo)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The provided JWT information is not an object or null.');\n        }\n        else if (!validator.isURL(tokenInfo.url)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The provided JWT verification documentation URL is invalid.');\n        }\n        else if (!validator.isNonEmptyString(tokenInfo.verifyApiName)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The JWT verify API name must be a non-empty string.');\n        }\n        else if (!validator.isNonEmptyString(tokenInfo.jwtName)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The JWT public full name must be a non-empty string.');\n        }\n        else if (!validator.isNonEmptyString(tokenInfo.shortName)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The JWT public short name must be a non-empty string.');\n        }\n        else if (!validator.isNonNullObject(tokenInfo.expiredErrorCode) || !('code' in tokenInfo.expiredErrorCode)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, 'The JWT expiration error code must be a non-null ErrorInfo object.');\n        }\n        this.shortNameArticle = tokenInfo.shortName.charAt(0).match(/[aeiou]/i) ? 'an' : 'a';\n        this.signatureVerifier =\n            jwt_1.PublicKeySignatureVerifier.withCertificateUrl(clientCertUrl, app.options.httpAgent);\n        // For backward compatibility, the project ID is validated in the verification call.\n    }\n    /**\n     * Verifies the format and signature of a Firebase Auth JWT token.\n     *\n     * @param jwtToken - The Firebase Auth JWT token to verify.\n     * @param isEmulator - Whether to accept Auth Emulator tokens.\n     * @returns A promise fulfilled with the decoded claims of the Firebase Auth ID token.\n     */\n    verifyJWT(jwtToken, isEmulator = false) {\n        if (!validator.isString(jwtToken)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `First argument to ${this.tokenInfo.verifyApiName} must be a ${this.tokenInfo.jwtName} string.`);\n        }\n        return this.ensureProjectId()\n            .then((projectId) => {\n            return this.decodeAndVerify(jwtToken, projectId, isEmulator);\n        })\n            .then((decoded) => {\n            const decodedIdToken = decoded.payload;\n            decodedIdToken.uid = decodedIdToken.sub;\n            return decodedIdToken;\n        });\n    }\n    /** @alpha */\n    // eslint-disable-next-line @typescript-eslint/naming-convention\n    _verifyAuthBlockingToken(jwtToken, isEmulator, audience) {\n        if (!validator.isString(jwtToken)) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, `First argument to ${this.tokenInfo.verifyApiName} must be a ${this.tokenInfo.jwtName} string.`);\n        }\n        return this.ensureProjectId()\n            .then((projectId) => {\n            if (typeof audience === 'undefined') {\n                audience = `${projectId}.cloudfunctions.net/`;\n            }\n            return this.decodeAndVerify(jwtToken, projectId, isEmulator, audience);\n        })\n            .then((decoded) => {\n            const decodedAuthBlockingToken = decoded.payload;\n            decodedAuthBlockingToken.uid = decodedAuthBlockingToken.sub;\n            return decodedAuthBlockingToken;\n        });\n    }\n    ensureProjectId() {\n        return util.findProjectId(this.app)\n            .then((projectId) => {\n            if (!validator.isNonEmptyString(projectId)) {\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_CREDENTIAL, 'Must initialize app with a cert credential or set your Firebase project ID as the ' +\n                    `GOOGLE_CLOUD_PROJECT environment variable to call ${this.tokenInfo.verifyApiName}.`);\n            }\n            return Promise.resolve(projectId);\n        });\n    }\n    decodeAndVerify(token, projectId, isEmulator, audience) {\n        return this.safeDecode(token)\n            .then((decodedToken) => {\n            this.verifyContent(decodedToken, projectId, isEmulator, audience);\n            return this.verifySignature(token, isEmulator)\n                .then(() => decodedToken);\n        });\n    }\n    safeDecode(jwtToken) {\n        return (0, jwt_1.decodeJwt)(jwtToken)\n            .catch((err) => {\n            if (err.code === jwt_1.JwtErrorCode.INVALID_ARGUMENT) {\n                const verifyJwtTokenDocsMessage = ` See ${this.tokenInfo.url} ` +\n                    `for details on how to retrieve ${this.shortNameArticle} ${this.tokenInfo.shortName}.`;\n                const errorMessage = `Decoding ${this.tokenInfo.jwtName} failed. Make sure you passed ` +\n                    `the entire string JWT which represents ${this.shortNameArticle} ` +\n                    `${this.tokenInfo.shortName}.` + verifyJwtTokenDocsMessage;\n                throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\n            }\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INTERNAL_ERROR, err.message);\n        });\n    }\n    /**\n     * Verifies the content of a Firebase Auth JWT.\n     *\n     * @param fullDecodedToken - The decoded JWT.\n     * @param projectId - The Firebase Project Id.\n     * @param isEmulator - Whether the token is an Emulator token.\n     */\n    verifyContent(fullDecodedToken, projectId, isEmulator, audience) {\n        const header = fullDecodedToken && fullDecodedToken.header;\n        const payload = fullDecodedToken && fullDecodedToken.payload;\n        const projectIdMatchMessage = ` Make sure the ${this.tokenInfo.shortName} comes from the same ` +\n            'Firebase project as the service account used to authenticate this SDK.';\n        const verifyJwtTokenDocsMessage = ` See ${this.tokenInfo.url} ` +\n            `for details on how to retrieve ${this.shortNameArticle} ${this.tokenInfo.shortName}.`;\n        let errorMessage;\n        if (!isEmulator && typeof header.kid === 'undefined') {\n            const isCustomToken = (payload.aud === FIREBASE_AUDIENCE);\n            const isLegacyCustomToken = (header.alg === 'HS256' && payload.v === 0 && 'd' in payload && 'uid' in payload.d);\n            if (isCustomToken) {\n                errorMessage = `${this.tokenInfo.verifyApiName} expects ${this.shortNameArticle} ` +\n                    `${this.tokenInfo.shortName}, but was given a custom token.`;\n            }\n            else if (isLegacyCustomToken) {\n                errorMessage = `${this.tokenInfo.verifyApiName} expects ${this.shortNameArticle} ` +\n                    `${this.tokenInfo.shortName}, but was given a legacy custom token.`;\n            }\n            else {\n                errorMessage = `${this.tokenInfo.jwtName} has no \"kid\" claim.`;\n            }\n            errorMessage += verifyJwtTokenDocsMessage;\n        }\n        else if (!isEmulator && header.alg !== jwt_1.ALGORITHM_RS256) {\n            errorMessage = `${this.tokenInfo.jwtName} has incorrect algorithm. Expected \"` + jwt_1.ALGORITHM_RS256 + '\" but got ' +\n                '\"' + header.alg + '\".' + verifyJwtTokenDocsMessage;\n        }\n        else if (typeof audience !== 'undefined' && !payload.aud.includes(audience)) {\n            errorMessage = `${this.tokenInfo.jwtName} has incorrect \"aud\" (audience) claim. Expected \"` +\n                audience + '\" but got \"' + payload.aud + '\".' + verifyJwtTokenDocsMessage;\n        }\n        else if (typeof audience === 'undefined' && payload.aud !== projectId) {\n            errorMessage = `${this.tokenInfo.jwtName} has incorrect \"aud\" (audience) claim. Expected \"` +\n                projectId + '\" but got \"' + payload.aud + '\".' + projectIdMatchMessage +\n                verifyJwtTokenDocsMessage;\n        }\n        else if (payload.iss !== this.issuer + projectId) {\n            errorMessage = `${this.tokenInfo.jwtName} has incorrect \"iss\" (issuer) claim. Expected ` +\n                `\"${this.issuer}` + projectId + '\" but got \"' +\n                payload.iss + '\".' + projectIdMatchMessage + verifyJwtTokenDocsMessage;\n        }\n        else if (typeof payload.sub !== 'string') {\n            errorMessage = `${this.tokenInfo.jwtName} has no \"sub\" (subject) claim.` + verifyJwtTokenDocsMessage;\n        }\n        else if (payload.sub === '') {\n            errorMessage = `${this.tokenInfo.jwtName} has an empty string \"sub\" (subject) claim.` + verifyJwtTokenDocsMessage;\n        }\n        else if (payload.sub.length > 128) {\n            errorMessage = `${this.tokenInfo.jwtName} has \"sub\" (subject) claim longer than 128 characters.` +\n                verifyJwtTokenDocsMessage;\n        }\n        if (errorMessage) {\n            throw new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\n        }\n    }\n    verifySignature(jwtToken, isEmulator) {\n        const verifier = isEmulator ? EMULATOR_VERIFIER : this.signatureVerifier;\n        return verifier.verify(jwtToken)\n            .catch((error) => {\n            throw this.mapJwtErrorToAuthError(error);\n        });\n    }\n    /**\n     * Maps JwtError to FirebaseAuthError\n     *\n     * @param error - JwtError to be mapped.\n     * @returns FirebaseAuthError or Error instance.\n     */\n    mapJwtErrorToAuthError(error) {\n        const verifyJwtTokenDocsMessage = ` See ${this.tokenInfo.url} ` +\n            `for details on how to retrieve ${this.shortNameArticle} ${this.tokenInfo.shortName}.`;\n        if (error.code === jwt_1.JwtErrorCode.TOKEN_EXPIRED) {\n            const errorMessage = `${this.tokenInfo.jwtName} has expired. Get a fresh ${this.tokenInfo.shortName}` +\n                ` from your client app and try again (auth/${this.tokenInfo.expiredErrorCode.code}).` +\n                verifyJwtTokenDocsMessage;\n            return new error_1.FirebaseAuthError(this.tokenInfo.expiredErrorCode, errorMessage);\n        }\n        else if (error.code === jwt_1.JwtErrorCode.INVALID_SIGNATURE) {\n            const errorMessage = `${this.tokenInfo.jwtName} has invalid signature.` + verifyJwtTokenDocsMessage;\n            return new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\n        }\n        else if (error.code === jwt_1.JwtErrorCode.NO_MATCHING_KID) {\n            const errorMessage = `${this.tokenInfo.jwtName} has \"kid\" claim which does not ` +\n                `correspond to a known public key. Most likely the ${this.tokenInfo.shortName} ` +\n                'is expired, so get a fresh token from your client app and try again.';\n            return new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, errorMessage);\n        }\n        return new error_1.FirebaseAuthError(error_1.AuthClientErrorCode.INVALID_ARGUMENT, error.message);\n    }\n}\nexports.FirebaseTokenVerifier = FirebaseTokenVerifier;\n/**\n * Creates a new FirebaseTokenVerifier to verify Firebase ID tokens.\n *\n * @internal\n * @param app - Firebase app instance.\n * @returns FirebaseTokenVerifier\n */\nfunction createIdTokenVerifier(app) {\n    return new FirebaseTokenVerifier(CLIENT_CERT_URL, 'https://securetoken.google.com/', exports.ID_TOKEN_INFO, app);\n}\nexports.createIdTokenVerifier = createIdTokenVerifier;\n/**\n * Creates a new FirebaseTokenVerifier to verify Firebase Auth Blocking tokens.\n *\n * @internal\n * @param app - Firebase app instance.\n * @returns FirebaseTokenVerifier\n */\nfunction createAuthBlockingTokenVerifier(app) {\n    return new FirebaseTokenVerifier(CLIENT_CERT_URL, 'https://securetoken.google.com/', exports.AUTH_BLOCKING_TOKEN_INFO, app);\n}\nexports.createAuthBlockingTokenVerifier = createAuthBlockingTokenVerifier;\n/**\n * Creates a new FirebaseTokenVerifier to verify Firebase session cookies.\n *\n * @internal\n * @param app - Firebase app instance.\n * @returns FirebaseTokenVerifier\n */\nfunction createSessionCookieVerifier(app) {\n    return new FirebaseTokenVerifier(SESSION_COOKIE_CERT_URL, 'https://session.firebase.google.com/', exports.SESSION_COOKIE_INFO, app);\n}\nexports.createSessionCookieVerifier = createSessionCookieVerifier;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}