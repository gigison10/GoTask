{"ast":null,"code":"var TokenBucket = require('./tokenBucket');\nvar getMilliseconds = require('./clock');\n\n/**\r\n * A generic rate limiter. Underneath the hood, this uses a token bucket plus\r\n * an additional check to limit how many tokens we can remove each interval.\r\n * @author John Hurliman <jhurliman@jhurliman.org>\r\n *\r\n * @param {Number} tokensPerInterval Maximum number of tokens that can be\r\n *  removed at any given moment and over the course of one interval.\r\n * @param {String|Number} interval The interval length in milliseconds, or as\r\n *  one of the following strings: 'second', 'minute', 'hour', day'.\r\n * @param {Boolean} fireImmediately Optional. Whether or not the callback\r\n *  will fire immediately when rate limiting is in effect (default is false).\r\n */\nvar RateLimiter = function (tokensPerInterval, interval, fireImmediately) {\n  this.tokenBucket = new TokenBucket(tokensPerInterval, tokensPerInterval, interval, null);\n\n  // Fill the token bucket to start\n  this.tokenBucket.content = tokensPerInterval;\n  this.curIntervalStart = getMilliseconds();\n  this.tokensThisInterval = 0;\n  this.fireImmediately = fireImmediately;\n};\nRateLimiter.prototype = {\n  tokenBucket: null,\n  curIntervalStart: 0,\n  tokensThisInterval: 0,\n  fireImmediately: false,\n  /**\r\n   * Remove the requested number of tokens and fire the given callback. If the\r\n   * rate limiter contains enough tokens and we haven't spent too many tokens\r\n   * in this interval already, this will happen immediately. Otherwise, the\r\n   * removal and callback will happen when enough tokens become available.\r\n   * @param {Number} count The number of tokens to remove.\r\n   * @param {Function} callback(err, remainingTokens)\r\n   * @returns {Boolean} True if the callback was fired immediately, otherwise\r\n   *  false.\r\n   */\n  removeTokens: function (count, callback) {\n    // Make sure the request isn't for more than we can handle\n    if (count > this.tokenBucket.bucketSize) {\n      process.nextTick(callback.bind(null, 'Requested tokens ' + count + ' exceeds maximum tokens per interval ' + this.tokenBucket.bucketSize, null));\n      return false;\n    }\n    var self = this;\n    var now = getMilliseconds();\n\n    // Advance the current interval and reset the current interval token count\n    // if needed\n    if (now < this.curIntervalStart || now - this.curIntervalStart >= this.tokenBucket.interval) {\n      this.curIntervalStart = now;\n      this.tokensThisInterval = 0;\n    }\n\n    // If we don't have enough tokens left in this interval, wait until the\n    // next interval\n    if (count > this.tokenBucket.tokensPerInterval - this.tokensThisInterval) {\n      if (this.fireImmediately) {\n        process.nextTick(callback.bind(null, null, -1));\n      } else {\n        var waitInterval = Math.ceil(this.curIntervalStart + this.tokenBucket.interval - now);\n        setTimeout(function () {\n          self.tokenBucket.removeTokens(count, afterTokensRemoved);\n        }, waitInterval);\n      }\n      return false;\n    }\n\n    // Remove the requested number of tokens from the token bucket\n    return this.tokenBucket.removeTokens(count, afterTokensRemoved);\n    function afterTokensRemoved(err, tokensRemaining) {\n      if (err) return callback(err, null);\n      self.tokensThisInterval += count;\n      callback(null, tokensRemaining);\n    }\n  },\n  /**\r\n   * Attempt to remove the requested number of tokens and return immediately.\r\n   * If the bucket (and any parent buckets) contains enough tokens and we\r\n   * haven't spent too many tokens in this interval already, this will return\r\n   * true. Otherwise, false is returned.\r\n   * @param {Number} count The number of tokens to remove.\r\n   * @param {Boolean} True if the tokens were successfully removed, otherwise\r\n   *  false.\r\n   */\n  tryRemoveTokens: function (count) {\n    // Make sure the request isn't for more than we can handle\n    if (count > this.tokenBucket.bucketSize) return false;\n    var now = getMilliseconds();\n\n    // Advance the current interval and reset the current interval token count\n    // if needed\n    if (now < this.curIntervalStart || now - this.curIntervalStart >= this.tokenBucket.interval) {\n      this.curIntervalStart = now;\n      this.tokensThisInterval = 0;\n    }\n\n    // If we don't have enough tokens left in this interval, return false\n    if (count > this.tokenBucket.tokensPerInterval - this.tokensThisInterval) return false;\n\n    // Try to remove the requested number of tokens from the token bucket\n    var removed = this.tokenBucket.tryRemoveTokens(count);\n    if (removed) {\n      this.tokensThisInterval += count;\n    }\n    return removed;\n  },\n  /**\r\n   * Returns the number of tokens remaining in the TokenBucket.\r\n   * @returns {Number} The number of tokens remaining.\r\n   */\n  getTokensRemaining: function () {\n    this.tokenBucket.drip();\n    return this.tokenBucket.content;\n  }\n};\nmodule.exports = RateLimiter;","map":{"version":3,"names":["TokenBucket","require","getMilliseconds","RateLimiter","tokensPerInterval","interval","fireImmediately","tokenBucket","content","curIntervalStart","tokensThisInterval","prototype","removeTokens","count","callback","bucketSize","process","nextTick","bind","self","now","waitInterval","Math","ceil","setTimeout","afterTokensRemoved","err","tokensRemaining","tryRemoveTokens","removed","getTokensRemaining","drip","module","exports"],"sources":["D:/Coding/React/taskmybusiness/node_modules/limiter/lib/rateLimiter.js"],"sourcesContent":["var TokenBucket = require('./tokenBucket');\r\nvar getMilliseconds = require('./clock');\r\n\r\n/**\r\n * A generic rate limiter. Underneath the hood, this uses a token bucket plus\r\n * an additional check to limit how many tokens we can remove each interval.\r\n * @author John Hurliman <jhurliman@jhurliman.org>\r\n *\r\n * @param {Number} tokensPerInterval Maximum number of tokens that can be\r\n *  removed at any given moment and over the course of one interval.\r\n * @param {String|Number} interval The interval length in milliseconds, or as\r\n *  one of the following strings: 'second', 'minute', 'hour', day'.\r\n * @param {Boolean} fireImmediately Optional. Whether or not the callback\r\n *  will fire immediately when rate limiting is in effect (default is false).\r\n */\r\nvar RateLimiter = function(tokensPerInterval, interval, fireImmediately) {\r\n  this.tokenBucket = new TokenBucket(tokensPerInterval, tokensPerInterval,\r\n    interval, null);\r\n\r\n  // Fill the token bucket to start\r\n  this.tokenBucket.content = tokensPerInterval;\r\n\r\n  this.curIntervalStart = getMilliseconds();\r\n  this.tokensThisInterval = 0;\r\n  this.fireImmediately = fireImmediately;\r\n};\r\n\r\nRateLimiter.prototype = {\r\n  tokenBucket: null,\r\n  curIntervalStart: 0,\r\n  tokensThisInterval: 0,\r\n  fireImmediately: false,\r\n\r\n  /**\r\n   * Remove the requested number of tokens and fire the given callback. If the\r\n   * rate limiter contains enough tokens and we haven't spent too many tokens\r\n   * in this interval already, this will happen immediately. Otherwise, the\r\n   * removal and callback will happen when enough tokens become available.\r\n   * @param {Number} count The number of tokens to remove.\r\n   * @param {Function} callback(err, remainingTokens)\r\n   * @returns {Boolean} True if the callback was fired immediately, otherwise\r\n   *  false.\r\n   */\r\n  removeTokens: function(count, callback) {\r\n    // Make sure the request isn't for more than we can handle\r\n    if (count > this.tokenBucket.bucketSize) {\r\n      process.nextTick(callback.bind(null, 'Requested tokens ' + count +\r\n        ' exceeds maximum tokens per interval ' + this.tokenBucket.bucketSize,\r\n        null));\r\n      return false;\r\n    }\r\n\r\n    var self = this;\r\n    var now = getMilliseconds();\r\n\r\n    // Advance the current interval and reset the current interval token count\r\n    // if needed\r\n    if (now < this.curIntervalStart\r\n      || now - this.curIntervalStart >= this.tokenBucket.interval) {\r\n      this.curIntervalStart = now;\r\n      this.tokensThisInterval = 0;\r\n    }\r\n\r\n    // If we don't have enough tokens left in this interval, wait until the\r\n    // next interval\r\n    if (count > this.tokenBucket.tokensPerInterval - this.tokensThisInterval) {\r\n      if (this.fireImmediately) {\r\n        process.nextTick(callback.bind(null, null, -1));\r\n      } else {\r\n        var waitInterval = Math.ceil(\r\n          this.curIntervalStart + this.tokenBucket.interval - now);\r\n\r\n        setTimeout(function() {\r\n          self.tokenBucket.removeTokens(count, afterTokensRemoved);\r\n        }, waitInterval);\r\n      }\r\n      return false;\r\n    }\r\n\r\n    // Remove the requested number of tokens from the token bucket\r\n    return this.tokenBucket.removeTokens(count, afterTokensRemoved);\r\n\r\n    function afterTokensRemoved(err, tokensRemaining) {\r\n      if (err) return callback(err, null);\r\n\r\n      self.tokensThisInterval += count;\r\n      callback(null, tokensRemaining);\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Attempt to remove the requested number of tokens and return immediately.\r\n   * If the bucket (and any parent buckets) contains enough tokens and we\r\n   * haven't spent too many tokens in this interval already, this will return\r\n   * true. Otherwise, false is returned.\r\n   * @param {Number} count The number of tokens to remove.\r\n   * @param {Boolean} True if the tokens were successfully removed, otherwise\r\n   *  false.\r\n   */\r\n  tryRemoveTokens: function(count) {\r\n    // Make sure the request isn't for more than we can handle\r\n    if (count > this.tokenBucket.bucketSize)\r\n      return false;\r\n\r\n    var now = getMilliseconds();\r\n\r\n    // Advance the current interval and reset the current interval token count\r\n    // if needed\r\n    if (now < this.curIntervalStart\r\n      || now - this.curIntervalStart >= this.tokenBucket.interval) {\r\n      this.curIntervalStart = now;\r\n      this.tokensThisInterval = 0;\r\n    }\r\n\r\n    // If we don't have enough tokens left in this interval, return false\r\n    if (count > this.tokenBucket.tokensPerInterval - this.tokensThisInterval)\r\n      return false;\r\n\r\n    // Try to remove the requested number of tokens from the token bucket\r\n    var removed = this.tokenBucket.tryRemoveTokens(count);\r\n    if (removed) {\r\n      this.tokensThisInterval += count;\r\n    }\r\n    return removed;\r\n  },\r\n\r\n  /**\r\n   * Returns the number of tokens remaining in the TokenBucket.\r\n   * @returns {Number} The number of tokens remaining.\r\n   */\r\n  getTokensRemaining: function () {\r\n    this.tokenBucket.drip();\r\n    return this.tokenBucket.content;\r\n  }\r\n};\r\n\r\nmodule.exports = RateLimiter;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}