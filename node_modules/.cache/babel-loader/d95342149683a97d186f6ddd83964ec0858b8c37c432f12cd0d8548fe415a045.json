{"ast":null,"code":"var _jsxFileName = \"D:\\\\Coding\\\\React\\\\taskmybusiness\\\\src\\\\components\\\\projectList\\\\projectList.jsx\",\n  _s = $RefreshSig$();\nimport \"./projectList.scss\";\nimport { Fragment, useState, useEffect, useRef } from \"react\";\nimport { useGetTodosQuery, useDeleteTodoMutation, useUpdateTodoMutation } from \"../../utils/firebase/firebase-utils\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ProjectList(props) {\n  _s();\n  const {\n    projectDetails\n  } = props;\n  const [edit, setEdit] = useState(false);\n  const [editProjectId, setEditProjectId] = useState(null);\n  const [editAndSave, setEditAndSave] = useState(\"Edit\");\n  const projectNameRef = useRef(\"\");\n  const [deleteTodo] = useDeleteTodoMutation();\n  const [updateTodo] = useUpdateTodoMutation();\n  ///////////////////////////////////////////\n  const {\n    data: projects,\n    isLoading,\n    isSuccess,\n    isError,\n    error,\n    refetch\n    // refetch,\n  } = useGetTodosQuery(currentUserId, {\n    skip: !currentUserId // Enable the query when userId is truthy\n  });\n  ///////////////////////////////\n  const editField = data => {\n    if (data.projectId === editProjectId) {\n      return /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"inputProjectField\",\n        type: \"text\",\n        defaultValue: data.projectName,\n        id: data.projectId\n        // ref={projectNameRef}\n        ,\n        onChange: () => updateTodo({\n          ...projectDetails,\n          completed: !projectDetails.completed\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: data.projectName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 14\n      }, this);\n    }\n  };\n\n  // const handleEditProject = async (projectId) => {\n  //   if (editProjectId === projectId) {\n  //     // Update the project in Firebase\n  //     await updateTodo({\n  //       id: projectId, // Use the project ID for updating\n  //       projectName: projectNameRef.current.value,\n  //     }).unwrap();\n\n  //     // setEditAndSave(\"Edit\");\n  //     // setEditProjectId(\"\");\n  //   } else {\n  //     // Start editing\n  //     // setEditAndSave(\"Save\");\n  //     // setEditProjectId(projectId);\n  //   }\n  // };\n\n  const isEditing = projectId => projectId === editProjectId;\n  const handleEditClick = projectId => {\n    if (isEditing(projectId)) {\n      // Save the changes\n      setEditProjectId(null);\n    } else {\n      // Enable editing for the clicked project\n      setEditProjectId(projectId);\n    }\n  };\n  useEffect(() => {\n    if (editProjectId === null) {\n      setEditAndSave(\"Edit\");\n    } else {\n      setEditAndSave(\"Save\");\n    }\n  }, [editProjectId]);\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: projectDetails === null || projectDetails === void 0 ? void 0 : projectDetails.map(data => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"project-field\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        type: \"submit\",\n        onClick: () => deleteTodo(data.projectId),\n        className: \"checkBlock\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          className: \"check\",\n          type: \"checkbox\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"deteButton\",\n          children: \"delete\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), editField(data), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: data.startingDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: data.deadLine\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n        children: \"In progress\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttonField\",\n        value: data.id,\n        onClick: () => {\n          setEditProjectId(data.projectId);\n          handleEditClick(data.projectId);\n          // handleEditProject(data.projectId);\n          // setEdit((prevState) => !prevState);\n        },\n        children: isEditing(data.projectId) ? \"Save\" : \"Edit\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"buttonField\",\n        children: \"Mark as complete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 11\n      }, this)]\n    }, data.projectId, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n_s(ProjectList, \"igmor5ZTEZwSvTrVRxKDVnnB0OE=\", false, function () {\n  return [useDeleteTodoMutation, useUpdateTodoMutation, useGetTodosQuery];\n});\n_c = ProjectList;\nexport default ProjectList;\nvar _c;\n$RefreshReg$(_c, \"ProjectList\");","map":{"version":3,"names":["Fragment","useState","useEffect","useRef","useGetTodosQuery","useDeleteTodoMutation","useUpdateTodoMutation","jsxDEV","_jsxDEV","ProjectList","props","_s","projectDetails","edit","setEdit","editProjectId","setEditProjectId","editAndSave","setEditAndSave","projectNameRef","deleteTodo","updateTodo","data","projects","isLoading","isSuccess","isError","error","refetch","currentUserId","skip","editField","projectId","className","type","defaultValue","projectName","id","onChange","completed","fileName","_jsxFileName","lineNumber","columnNumber","children","isEditing","handleEditClick","map","onClick","startingDate","deadLine","value","_c","$RefreshReg$"],"sources":["D:/Coding/React/taskmybusiness/src/components/projectList/projectList.jsx"],"sourcesContent":["import \"./projectList.scss\";\r\nimport { Fragment, useState, useEffect, useRef } from \"react\";\r\nimport {\r\n  useGetTodosQuery,\r\n  useDeleteTodoMutation,\r\n  useUpdateTodoMutation,\r\n} from \"../../utils/firebase/firebase-utils\";\r\n\r\nfunction ProjectList(props) {\r\n  const { projectDetails } = props;\r\n  const [edit, setEdit] = useState(false);\r\n  const [editProjectId, setEditProjectId] = useState(null);\r\n  const [editAndSave, setEditAndSave] = useState(\"Edit\");\r\n  const projectNameRef = useRef(\"\");\r\n  const [deleteTodo] = useDeleteTodoMutation();\r\n  const [updateTodo] = useUpdateTodoMutation();\r\n  ///////////////////////////////////////////\r\n  const {\r\n    data: projects,\r\n    isLoading,\r\n    isSuccess,\r\n    isError,\r\n    error,\r\n    refetch,\r\n    // refetch,\r\n  } = useGetTodosQuery(currentUserId, {\r\n    skip: !currentUserId, // Enable the query when userId is truthy\r\n  });\r\n  ///////////////////////////////\r\n  const editField = (data) => {\r\n    if (data.projectId === editProjectId) {\r\n      return (\r\n        <input\r\n          className=\"inputProjectField\"\r\n          type=\"text\"\r\n          defaultValue={data.projectName}\r\n          id={data.projectId}\r\n          // ref={projectNameRef}\r\n          onChange={() =>\r\n            updateTodo({\r\n              ...projectDetails,\r\n              completed: !projectDetails.completed,\r\n            })\r\n          }\r\n        />\r\n      );\r\n    } else {\r\n      return <h5>{data.projectName}</h5>;\r\n    }\r\n  };\r\n\r\n  // const handleEditProject = async (projectId) => {\r\n  //   if (editProjectId === projectId) {\r\n  //     // Update the project in Firebase\r\n  //     await updateTodo({\r\n  //       id: projectId, // Use the project ID for updating\r\n  //       projectName: projectNameRef.current.value,\r\n  //     }).unwrap();\r\n\r\n  //     // setEditAndSave(\"Edit\");\r\n  //     // setEditProjectId(\"\");\r\n  //   } else {\r\n  //     // Start editing\r\n  //     // setEditAndSave(\"Save\");\r\n  //     // setEditProjectId(projectId);\r\n  //   }\r\n  // };\r\n\r\n  const isEditing = (projectId) => projectId === editProjectId;\r\n\r\n  const handleEditClick = (projectId) => {\r\n    if (isEditing(projectId)) {\r\n      // Save the changes\r\n      setEditProjectId(null);\r\n    } else {\r\n      // Enable editing for the clicked project\r\n      setEditProjectId(projectId);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (editProjectId === null) {\r\n      setEditAndSave(\"Edit\");\r\n    } else {\r\n      setEditAndSave(\"Save\");\r\n    }\r\n  }, [editProjectId]);\r\n\r\n  return (\r\n    <Fragment>\r\n      {projectDetails?.map((data) => (\r\n        <div className=\"project-field\" key={data.projectId}>\r\n          <div\r\n            type=\"submit\"\r\n            onClick={() => deleteTodo(data.projectId)}\r\n            className=\"checkBlock\"\r\n          >\r\n            <input className=\"check\" type=\"checkbox\" />\r\n            <button className=\"deteButton\">delete</button>\r\n          </div>\r\n          {editField(data)}\r\n          {/* <h5>{data.projectName}</h5> */}\r\n          <h5>{data.startingDate}</h5>\r\n          <h5>{data.deadLine}</h5>\r\n          <h5>In progress</h5>\r\n          <button\r\n            className=\"buttonField\"\r\n            value={data.id}\r\n            onClick={() => {\r\n              setEditProjectId(data.projectId);\r\n              handleEditClick(data.projectId);\r\n              // handleEditProject(data.projectId);\r\n              // setEdit((prevState) => !prevState);\r\n            }}\r\n          >\r\n            {isEditing(data.projectId) ? \"Save\" : \"Edit\"}\r\n            {/* {editAndSave} */}\r\n          </button>\r\n          <button className=\"buttonField\">Mark as complete</button>\r\n        </div>\r\n      ))}\r\n    </Fragment>\r\n  );\r\n}\r\n\r\nexport default ProjectList;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}