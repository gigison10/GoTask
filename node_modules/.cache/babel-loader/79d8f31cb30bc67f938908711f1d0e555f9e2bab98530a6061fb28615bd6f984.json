{"ast":null,"code":"/*! firebase-admin v11.9.0 */\n\"use strict\";\n\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultNamespace = exports.FirebaseNamespace = exports.FirebaseNamespaceInternals = void 0;\nconst lifecycle_1 = require(\"./lifecycle\");\nconst credential_factory_1 = require(\"./credential-factory\");\nconst index_1 = require(\"../utils/index\");\n/**\n * Internals of a FirebaseNamespace instance.\n */\nclass FirebaseNamespaceInternals {\n  constructor(appStore) {\n    this.appStore = appStore;\n  }\n  /**\n   * Initializes the App instance.\n   *\n   * @param options - Optional options for the App instance. If none present will try to initialize\n   *   from the FIREBASE_CONFIG environment variable. If the environment variable contains a string\n   *   that starts with '{' it will be parsed as JSON, otherwise it will be assumed to be pointing\n   *   to a file.\n   * @param appName - Optional name of the FirebaseApp instance.\n   *\n   * @returns A new App instance.\n   */\n  initializeApp(options, appName) {\n    const app = this.appStore.initializeApp(options, appName);\n    return extendApp(app);\n  }\n  /**\n   * Returns the App instance with the provided name (or the default App instance\n   * if no name is provided).\n   *\n   * @param appName - Optional name of the FirebaseApp instance to return.\n   * @returns The App instance which has the provided name.\n   */\n  app(appName) {\n    const app = this.appStore.getApp(appName);\n    return extendApp(app);\n  }\n  /*\n   * Returns an array of all the non-deleted App instances.\n   */\n  get apps() {\n    return this.appStore.getApps().map(app => extendApp(app));\n  }\n}\nexports.FirebaseNamespaceInternals = FirebaseNamespaceInternals;\nconst firebaseCredential = {\n  cert: credential_factory_1.cert,\n  refreshToken: credential_factory_1.refreshToken,\n  applicationDefault: credential_factory_1.applicationDefault\n};\n/**\n * Global Firebase context object.\n */\nclass FirebaseNamespace {\n  /* tslint:enable */\n  constructor(appStore) {\n    // Hack to prevent Babel from modifying the object returned as the default admin namespace.\n    /* tslint:disable:variable-name */\n    this.__esModule = true;\n    /* tslint:enable:variable-name */\n    this.credential = firebaseCredential;\n    this.SDK_VERSION = (0, index_1.getSdkVersion)();\n    /* tslint:disable */\n    // TODO(jwenger): Database is the only consumer of firebase.Promise. We should update it to use\n    // use the native Promise and then remove this.\n    this.Promise = Promise;\n    this.INTERNAL = new FirebaseNamespaceInternals(appStore ?? new lifecycle_1.AppStore());\n  }\n  /**\n   * Gets the `Auth` service namespace. The returned namespace can be used to get the\n   * `Auth` service for the default app or an explicitly specified app.\n   */\n  get auth() {\n    const fn = app => {\n      return this.ensureApp(app).auth();\n    };\n    const auth = require('../auth/auth').Auth;\n    return Object.assign(fn, {\n      Auth: auth\n    });\n  }\n  /**\n   * Gets the `Database` service namespace. The returned namespace can be used to get the\n   * `Database` service for the default app or an explicitly specified app.\n   */\n  get database() {\n    const fn = app => {\n      return this.ensureApp(app).database();\n    };\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    return Object.assign(fn, require('@firebase/database-compat/standalone'));\n  }\n  /**\n   * Gets the `Messaging` service namespace. The returned namespace can be used to get the\n   * `Messaging` service for the default app or an explicitly specified app.\n   */\n  get messaging() {\n    const fn = app => {\n      return this.ensureApp(app).messaging();\n    };\n    const messaging = require('../messaging/messaging').Messaging;\n    return Object.assign(fn, {\n      Messaging: messaging\n    });\n  }\n  /**\n   * Gets the `Storage` service namespace. The returned namespace can be used to get the\n   * `Storage` service for the default app or an explicitly specified app.\n   */\n  get storage() {\n    const fn = app => {\n      return this.ensureApp(app).storage();\n    };\n    const storage = require('../storage/storage').Storage;\n    return Object.assign(fn, {\n      Storage: storage\n    });\n  }\n  /**\n   * Gets the `Firestore` service namespace. The returned namespace can be used to get the\n   * `Firestore` service for the default app or an explicitly specified app.\n   */\n  get firestore() {\n    let fn = app => {\n      return this.ensureApp(app).firestore();\n    };\n    // eslint-disable-next-line @typescript-eslint/no-var-requires\n    const firestore = require('@google-cloud/firestore');\n    fn = Object.assign(fn, firestore.Firestore);\n    // `v1beta1` and `v1` are lazy-loaded in the Firestore SDK. We use the same trick here\n    // to avoid triggering this lazy-loading upon initialization.\n    Object.defineProperty(fn, 'v1beta1', {\n      get: () => {\n        return firestore.v1beta1;\n      }\n    });\n    Object.defineProperty(fn, 'v1', {\n      get: () => {\n        return firestore.v1;\n      }\n    });\n    return fn;\n  }\n  /**\n   * Gets the `MachineLearning` service namespace. The returned namespace can be\n   * used to get the `MachineLearning` service for the default app or an\n   * explicityly specified app.\n   */\n  get machineLearning() {\n    const fn = app => {\n      return this.ensureApp(app).machineLearning();\n    };\n    const machineLearning = require('../machine-learning/machine-learning').MachineLearning;\n    return Object.assign(fn, {\n      MachineLearning: machineLearning\n    });\n  }\n  /**\n   * Gets the `Installations` service namespace. The returned namespace can be used to get the\n   * `Installations` service for the default app or an explicitly specified app.\n   */\n  get installations() {\n    const fn = app => {\n      return this.ensureApp(app).installations();\n    };\n    const installations = require('../installations/installations').Installations;\n    return Object.assign(fn, {\n      Installations: installations\n    });\n  }\n  /**\n   * Gets the `InstanceId` service namespace. The returned namespace can be used to get the\n   * `Instance` service for the default app or an explicitly specified app.\n   */\n  get instanceId() {\n    const fn = app => {\n      return this.ensureApp(app).instanceId();\n    };\n    const instanceId = require('../instance-id/instance-id').InstanceId;\n    return Object.assign(fn, {\n      InstanceId: instanceId\n    });\n  }\n  /**\n   * Gets the `ProjectManagement` service namespace. The returned namespace can be used to get the\n   * `ProjectManagement` service for the default app or an explicitly specified app.\n   */\n  get projectManagement() {\n    const fn = app => {\n      return this.ensureApp(app).projectManagement();\n    };\n    const projectManagement = require('../project-management/project-management').ProjectManagement;\n    return Object.assign(fn, {\n      ProjectManagement: projectManagement\n    });\n  }\n  /**\n   * Gets the `SecurityRules` service namespace. The returned namespace can be used to get the\n   * `SecurityRules` service for the default app or an explicitly specified app.\n   */\n  get securityRules() {\n    const fn = app => {\n      return this.ensureApp(app).securityRules();\n    };\n    const securityRules = require('../security-rules/security-rules').SecurityRules;\n    return Object.assign(fn, {\n      SecurityRules: securityRules\n    });\n  }\n  /**\n   * Gets the `RemoteConfig` service namespace. The returned namespace can be used to get the\n   * `RemoteConfig` service for the default app or an explicitly specified app.\n   */\n  get remoteConfig() {\n    const fn = app => {\n      return this.ensureApp(app).remoteConfig();\n    };\n    const remoteConfig = require('../remote-config/remote-config').RemoteConfig;\n    return Object.assign(fn, {\n      RemoteConfig: remoteConfig\n    });\n  }\n  /**\n   * Gets the `AppCheck` service namespace. The returned namespace can be used to get the\n   * `AppCheck` service for the default app or an explicitly specified app.\n   */\n  get appCheck() {\n    const fn = app => {\n      return this.ensureApp(app).appCheck();\n    };\n    const appCheck = require('../app-check/app-check').AppCheck;\n    return Object.assign(fn, {\n      AppCheck: appCheck\n    });\n  }\n  // TODO: Change the return types to app.App in the following methods.\n  /**\n   * Initializes the FirebaseApp instance.\n   *\n   * @param options - Optional options for the FirebaseApp instance.\n   *   If none present will try to initialize from the FIREBASE_CONFIG environment variable.\n   *   If the environment variable contains a string that starts with '{' it will be parsed as JSON,\n   *   otherwise it will be assumed to be pointing to a file.\n   * @param appName - Optional name of the FirebaseApp instance.\n   *\n   * @returns A new FirebaseApp instance.\n   */\n  initializeApp(options, appName) {\n    return this.INTERNAL.initializeApp(options, appName);\n  }\n  /**\n   * Returns the FirebaseApp instance with the provided name (or the default FirebaseApp instance\n   * if no name is provided).\n   *\n   * @param appName - Optional name of the FirebaseApp instance to return.\n   * @returns The FirebaseApp instance which has the provided name.\n   */\n  app(appName) {\n    return this.INTERNAL.app(appName);\n  }\n  /*\n   * Returns an array of all the non-deleted FirebaseApp instances.\n   */\n  get apps() {\n    return this.INTERNAL.apps;\n  }\n  ensureApp(app) {\n    if (typeof app === 'undefined') {\n      app = this.app();\n    }\n    return app;\n  }\n}\nexports.FirebaseNamespace = FirebaseNamespace;\n/**\n * In order to maintain backward compatibility, we instantiate a default namespace instance in\n * this module, and delegate all app lifecycle operations to it. In a future implementation where\n * the old admin namespace is no longer supported, we should remove this.\n *\n * @internal\n */\nexports.defaultNamespace = new FirebaseNamespace(lifecycle_1.defaultAppStore);\nfunction extendApp(app) {\n  const result = app;\n  if (result.__extended) {\n    return result;\n  }\n  result.auth = () => {\n    const fn = require('../auth/index').getAuth;\n    return fn(app);\n  };\n  result.appCheck = () => {\n    const fn = require('../app-check/index').getAppCheck;\n    return fn(app);\n  };\n  result.database = url => {\n    const fn = require('../database/index').getDatabaseWithUrl;\n    return fn(url, app);\n  };\n  result.messaging = () => {\n    const fn = require('../messaging/index').getMessaging;\n    return fn(app);\n  };\n  result.storage = () => {\n    const fn = require('../storage/index').getStorage;\n    return fn(app);\n  };\n  result.firestore = () => {\n    const fn = require('../firestore/index').getFirestore;\n    return fn(app);\n  };\n  result.instanceId = () => {\n    const fn = require('../instance-id/index').getInstanceId;\n    return fn(app);\n  };\n  result.installations = () => {\n    const fn = require('../installations/index').getInstallations;\n    return fn(app);\n  };\n  result.machineLearning = () => {\n    const fn = require('../machine-learning/index').getMachineLearning;\n    return fn(app);\n  };\n  result.projectManagement = () => {\n    const fn = require('../project-management/index').getProjectManagement;\n    return fn(app);\n  };\n  result.securityRules = () => {\n    const fn = require('../security-rules/index').getSecurityRules;\n    return fn(app);\n  };\n  result.remoteConfig = () => {\n    const fn = require('../remote-config/index').getRemoteConfig;\n    return fn(app);\n  };\n  result.__extended = true;\n  return result;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","defaultNamespace","FirebaseNamespace","FirebaseNamespaceInternals","lifecycle_1","require","credential_factory_1","index_1","constructor","appStore","initializeApp","options","appName","app","extendApp","getApp","apps","getApps","map","firebaseCredential","cert","refreshToken","applicationDefault","__esModule","credential","SDK_VERSION","getSdkVersion","Promise","INTERNAL","AppStore","auth","fn","ensureApp","Auth","assign","database","messaging","Messaging","storage","Storage","firestore","Firestore","get","v1beta1","v1","machineLearning","MachineLearning","installations","Installations","instanceId","InstanceId","projectManagement","ProjectManagement","securityRules","SecurityRules","remoteConfig","RemoteConfig","appCheck","AppCheck","defaultAppStore","result","__extended","getAuth","getAppCheck","url","getDatabaseWithUrl","getMessaging","getStorage","getFirestore","getInstanceId","getInstallations","getMachineLearning","getProjectManagement","getSecurityRules","getRemoteConfig"],"sources":["D:/Coding/React/taskmybusiness/node_modules/firebase-admin/lib/app/firebase-namespace.js"],"sourcesContent":["/*! firebase-admin v11.9.0 */\n\"use strict\";\n/*!\n * @license\n * Copyright 2017 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.defaultNamespace = exports.FirebaseNamespace = exports.FirebaseNamespaceInternals = void 0;\nconst lifecycle_1 = require(\"./lifecycle\");\nconst credential_factory_1 = require(\"./credential-factory\");\nconst index_1 = require(\"../utils/index\");\n/**\n * Internals of a FirebaseNamespace instance.\n */\nclass FirebaseNamespaceInternals {\n    constructor(appStore) {\n        this.appStore = appStore;\n    }\n    /**\n     * Initializes the App instance.\n     *\n     * @param options - Optional options for the App instance. If none present will try to initialize\n     *   from the FIREBASE_CONFIG environment variable. If the environment variable contains a string\n     *   that starts with '{' it will be parsed as JSON, otherwise it will be assumed to be pointing\n     *   to a file.\n     * @param appName - Optional name of the FirebaseApp instance.\n     *\n     * @returns A new App instance.\n     */\n    initializeApp(options, appName) {\n        const app = this.appStore.initializeApp(options, appName);\n        return extendApp(app);\n    }\n    /**\n     * Returns the App instance with the provided name (or the default App instance\n     * if no name is provided).\n     *\n     * @param appName - Optional name of the FirebaseApp instance to return.\n     * @returns The App instance which has the provided name.\n     */\n    app(appName) {\n        const app = this.appStore.getApp(appName);\n        return extendApp(app);\n    }\n    /*\n     * Returns an array of all the non-deleted App instances.\n     */\n    get apps() {\n        return this.appStore.getApps().map((app) => extendApp(app));\n    }\n}\nexports.FirebaseNamespaceInternals = FirebaseNamespaceInternals;\nconst firebaseCredential = {\n    cert: credential_factory_1.cert, refreshToken: credential_factory_1.refreshToken, applicationDefault: credential_factory_1.applicationDefault\n};\n/**\n * Global Firebase context object.\n */\nclass FirebaseNamespace {\n    /* tslint:enable */\n    constructor(appStore) {\n        // Hack to prevent Babel from modifying the object returned as the default admin namespace.\n        /* tslint:disable:variable-name */\n        this.__esModule = true;\n        /* tslint:enable:variable-name */\n        this.credential = firebaseCredential;\n        this.SDK_VERSION = (0, index_1.getSdkVersion)();\n        /* tslint:disable */\n        // TODO(jwenger): Database is the only consumer of firebase.Promise. We should update it to use\n        // use the native Promise and then remove this.\n        this.Promise = Promise;\n        this.INTERNAL = new FirebaseNamespaceInternals(appStore ?? new lifecycle_1.AppStore());\n    }\n    /**\n     * Gets the `Auth` service namespace. The returned namespace can be used to get the\n     * `Auth` service for the default app or an explicitly specified app.\n     */\n    get auth() {\n        const fn = (app) => {\n            return this.ensureApp(app).auth();\n        };\n        const auth = require('../auth/auth').Auth;\n        return Object.assign(fn, { Auth: auth });\n    }\n    /**\n     * Gets the `Database` service namespace. The returned namespace can be used to get the\n     * `Database` service for the default app or an explicitly specified app.\n     */\n    get database() {\n        const fn = (app) => {\n            return this.ensureApp(app).database();\n        };\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        return Object.assign(fn, require('@firebase/database-compat/standalone'));\n    }\n    /**\n     * Gets the `Messaging` service namespace. The returned namespace can be used to get the\n     * `Messaging` service for the default app or an explicitly specified app.\n     */\n    get messaging() {\n        const fn = (app) => {\n            return this.ensureApp(app).messaging();\n        };\n        const messaging = require('../messaging/messaging').Messaging;\n        return Object.assign(fn, { Messaging: messaging });\n    }\n    /**\n     * Gets the `Storage` service namespace. The returned namespace can be used to get the\n     * `Storage` service for the default app or an explicitly specified app.\n     */\n    get storage() {\n        const fn = (app) => {\n            return this.ensureApp(app).storage();\n        };\n        const storage = require('../storage/storage').Storage;\n        return Object.assign(fn, { Storage: storage });\n    }\n    /**\n     * Gets the `Firestore` service namespace. The returned namespace can be used to get the\n     * `Firestore` service for the default app or an explicitly specified app.\n     */\n    get firestore() {\n        let fn = (app) => {\n            return this.ensureApp(app).firestore();\n        };\n        // eslint-disable-next-line @typescript-eslint/no-var-requires\n        const firestore = require('@google-cloud/firestore');\n        fn = Object.assign(fn, firestore.Firestore);\n        // `v1beta1` and `v1` are lazy-loaded in the Firestore SDK. We use the same trick here\n        // to avoid triggering this lazy-loading upon initialization.\n        Object.defineProperty(fn, 'v1beta1', {\n            get: () => {\n                return firestore.v1beta1;\n            },\n        });\n        Object.defineProperty(fn, 'v1', {\n            get: () => {\n                return firestore.v1;\n            },\n        });\n        return fn;\n    }\n    /**\n     * Gets the `MachineLearning` service namespace. The returned namespace can be\n     * used to get the `MachineLearning` service for the default app or an\n     * explicityly specified app.\n     */\n    get machineLearning() {\n        const fn = (app) => {\n            return this.ensureApp(app).machineLearning();\n        };\n        const machineLearning = require('../machine-learning/machine-learning').MachineLearning;\n        return Object.assign(fn, { MachineLearning: machineLearning });\n    }\n    /**\n     * Gets the `Installations` service namespace. The returned namespace can be used to get the\n     * `Installations` service for the default app or an explicitly specified app.\n     */\n    get installations() {\n        const fn = (app) => {\n            return this.ensureApp(app).installations();\n        };\n        const installations = require('../installations/installations').Installations;\n        return Object.assign(fn, { Installations: installations });\n    }\n    /**\n     * Gets the `InstanceId` service namespace. The returned namespace can be used to get the\n     * `Instance` service for the default app or an explicitly specified app.\n     */\n    get instanceId() {\n        const fn = (app) => {\n            return this.ensureApp(app).instanceId();\n        };\n        const instanceId = require('../instance-id/instance-id').InstanceId;\n        return Object.assign(fn, { InstanceId: instanceId });\n    }\n    /**\n     * Gets the `ProjectManagement` service namespace. The returned namespace can be used to get the\n     * `ProjectManagement` service for the default app or an explicitly specified app.\n     */\n    get projectManagement() {\n        const fn = (app) => {\n            return this.ensureApp(app).projectManagement();\n        };\n        const projectManagement = require('../project-management/project-management').ProjectManagement;\n        return Object.assign(fn, { ProjectManagement: projectManagement });\n    }\n    /**\n     * Gets the `SecurityRules` service namespace. The returned namespace can be used to get the\n     * `SecurityRules` service for the default app or an explicitly specified app.\n     */\n    get securityRules() {\n        const fn = (app) => {\n            return this.ensureApp(app).securityRules();\n        };\n        const securityRules = require('../security-rules/security-rules').SecurityRules;\n        return Object.assign(fn, { SecurityRules: securityRules });\n    }\n    /**\n     * Gets the `RemoteConfig` service namespace. The returned namespace can be used to get the\n     * `RemoteConfig` service for the default app or an explicitly specified app.\n     */\n    get remoteConfig() {\n        const fn = (app) => {\n            return this.ensureApp(app).remoteConfig();\n        };\n        const remoteConfig = require('../remote-config/remote-config').RemoteConfig;\n        return Object.assign(fn, { RemoteConfig: remoteConfig });\n    }\n    /**\n     * Gets the `AppCheck` service namespace. The returned namespace can be used to get the\n     * `AppCheck` service for the default app or an explicitly specified app.\n     */\n    get appCheck() {\n        const fn = (app) => {\n            return this.ensureApp(app).appCheck();\n        };\n        const appCheck = require('../app-check/app-check').AppCheck;\n        return Object.assign(fn, { AppCheck: appCheck });\n    }\n    // TODO: Change the return types to app.App in the following methods.\n    /**\n     * Initializes the FirebaseApp instance.\n     *\n     * @param options - Optional options for the FirebaseApp instance.\n     *   If none present will try to initialize from the FIREBASE_CONFIG environment variable.\n     *   If the environment variable contains a string that starts with '{' it will be parsed as JSON,\n     *   otherwise it will be assumed to be pointing to a file.\n     * @param appName - Optional name of the FirebaseApp instance.\n     *\n     * @returns A new FirebaseApp instance.\n     */\n    initializeApp(options, appName) {\n        return this.INTERNAL.initializeApp(options, appName);\n    }\n    /**\n     * Returns the FirebaseApp instance with the provided name (or the default FirebaseApp instance\n     * if no name is provided).\n     *\n     * @param appName - Optional name of the FirebaseApp instance to return.\n     * @returns The FirebaseApp instance which has the provided name.\n     */\n    app(appName) {\n        return this.INTERNAL.app(appName);\n    }\n    /*\n     * Returns an array of all the non-deleted FirebaseApp instances.\n     */\n    get apps() {\n        return this.INTERNAL.apps;\n    }\n    ensureApp(app) {\n        if (typeof app === 'undefined') {\n            app = this.app();\n        }\n        return app;\n    }\n}\nexports.FirebaseNamespace = FirebaseNamespace;\n/**\n * In order to maintain backward compatibility, we instantiate a default namespace instance in\n * this module, and delegate all app lifecycle operations to it. In a future implementation where\n * the old admin namespace is no longer supported, we should remove this.\n *\n * @internal\n */\nexports.defaultNamespace = new FirebaseNamespace(lifecycle_1.defaultAppStore);\nfunction extendApp(app) {\n    const result = app;\n    if (result.__extended) {\n        return result;\n    }\n    result.auth = () => {\n        const fn = require('../auth/index').getAuth;\n        return fn(app);\n    };\n    result.appCheck = () => {\n        const fn = require('../app-check/index').getAppCheck;\n        return fn(app);\n    };\n    result.database = (url) => {\n        const fn = require('../database/index').getDatabaseWithUrl;\n        return fn(url, app);\n    };\n    result.messaging = () => {\n        const fn = require('../messaging/index').getMessaging;\n        return fn(app);\n    };\n    result.storage = () => {\n        const fn = require('../storage/index').getStorage;\n        return fn(app);\n    };\n    result.firestore = () => {\n        const fn = require('../firestore/index').getFirestore;\n        return fn(app);\n    };\n    result.instanceId = () => {\n        const fn = require('../instance-id/index').getInstanceId;\n        return fn(app);\n    };\n    result.installations = () => {\n        const fn = require('../installations/index').getInstallations;\n        return fn(app);\n    };\n    result.machineLearning = () => {\n        const fn = require('../machine-learning/index').getMachineLearning;\n        return fn(app);\n    };\n    result.projectManagement = () => {\n        const fn = require('../project-management/index').getProjectManagement;\n        return fn(app);\n    };\n    result.securityRules = () => {\n        const fn = require('../security-rules/index').getSecurityRules;\n        return fn(app);\n    };\n    result.remoteConfig = () => {\n        const fn = require('../remote-config/index').getRemoteConfig;\n        return fn(app);\n    };\n    result.__extended = true;\n    return result;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}