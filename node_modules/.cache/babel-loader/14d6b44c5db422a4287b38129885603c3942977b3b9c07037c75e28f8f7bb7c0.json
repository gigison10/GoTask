{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar tslib = require('tslib');\nvar util = require('@firebase/util');\n\n/**\r\n * Component for service name T, e.g. `auth`, `auth-internal`\r\n */\nvar Component = /** @class */function () {\n  /**\r\n   *\r\n   * @param name The public service name, e.g. app, auth, firestore, database\r\n   * @param instanceFactory Service factory responsible for creating the public interface\r\n   * @param type whether the service provided by the component is public or private\r\n   */\n  function Component(name, instanceFactory, type) {\n    this.name = name;\n    this.instanceFactory = instanceFactory;\n    this.type = type;\n    this.multipleInstances = false;\n    /**\r\n     * Properties to be added to the service namespace\r\n     */\n    this.serviceProps = {};\n    this.instantiationMode = \"LAZY\" /* InstantiationMode.LAZY */;\n    this.onInstanceCreated = null;\n  }\n  Component.prototype.setInstantiationMode = function (mode) {\n    this.instantiationMode = mode;\n    return this;\n  };\n  Component.prototype.setMultipleInstances = function (multipleInstances) {\n    this.multipleInstances = multipleInstances;\n    return this;\n  };\n  Component.prototype.setServiceProps = function (props) {\n    this.serviceProps = props;\n    return this;\n  };\n  Component.prototype.setInstanceCreatedCallback = function (callback) {\n    this.onInstanceCreated = callback;\n    return this;\n  };\n  return Component;\n}();\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\r\n * NameServiceMapping[T] is an alias for the type of the instance\r\n */\nvar Provider = /** @class */function () {\n  function Provider(name, container) {\n    this.name = name;\n    this.container = container;\n    this.component = null;\n    this.instances = new Map();\n    this.instancesDeferred = new Map();\n    this.instancesOptions = new Map();\n    this.onInitCallbacks = new Map();\n  }\n  /**\r\n   * @param identifier A provider can provide mulitple instances of a service\r\n   * if this.component.multipleInstances is true.\r\n   */\n  Provider.prototype.get = function (identifier) {\n    // if multipleInstances is not supported, use the default name\n    var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      var deferred = new util.Deferred();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n      if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {\n        // initialize the service if it can be auto-initialized\n        try {\n          var instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n    return this.instancesDeferred.get(normalizedIdentifier).promise;\n  };\n  Provider.prototype.getImmediate = function (options) {\n    var _a;\n    // if multipleInstances is not supported, use the default name\n    var normalizedIdentifier = this.normalizeInstanceIdentifier(options === null || options === void 0 ? void 0 : options.identifier);\n    var optional = (_a = options === null || options === void 0 ? void 0 : options.optional) !== null && _a !== void 0 ? _a : false;\n    if (this.isInitialized(normalizedIdentifier) || this.shouldAutoInitialize()) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(\"Service \".concat(this.name, \" is not available\"));\n      }\n    }\n  };\n  Provider.prototype.getComponent = function () {\n    return this.component;\n  };\n  Provider.prototype.setComponent = function (component) {\n    var e_1, _a;\n    if (component.name !== this.name) {\n      throw Error(\"Mismatching Component \".concat(component.name, \" for Provider \").concat(this.name, \".\"));\n    }\n    if (this.component) {\n      throw Error(\"Component for \".concat(this.name, \" has already been provided\"));\n    }\n    this.component = component;\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({\n          instanceIdentifier: DEFAULT_ENTRY_NAME\n        });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n    try {\n      // Create service instances for the pending promises and resolve them\n      // NOTE: if this.multipleInstances is false, only the default instance will be created\n      // and all promises with resolve with it regardless of the identifier.\n      for (var _b = tslib.__values(this.instancesDeferred.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var _d = tslib.__read(_c.value, 2),\n          instanceIdentifier = _d[0],\n          instanceDeferred = _d[1];\n        var normalizedIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n        try {\n          // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n          var instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          instanceDeferred.resolve(instance);\n        } catch (e) {\n          // when the instance factory throws an exception, it should not cause\n          // a fatal error. We just leave the promise unresolved.\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n  Provider.prototype.clearInstance = function (identifier) {\n    if (identifier === void 0) {\n      identifier = DEFAULT_ENTRY_NAME;\n    }\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  };\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  Provider.prototype.delete = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var services;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            services = Array.from(this.instances.values());\n            return [4 /*yield*/, Promise.all(tslib.__spreadArray(tslib.__spreadArray([], tslib.__read(services.filter(function (service) {\n              return 'INTERNAL' in service;\n            }) // legacy services\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            .map(function (service) {\n              return service.INTERNAL.delete();\n            })), false), tslib.__read(services.filter(function (service) {\n              return '_delete' in service;\n            }) // modularized services\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            .map(function (service) {\n              return service._delete();\n            })), false))];\n          case 1:\n            _a.sent();\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  Provider.prototype.isComponentSet = function () {\n    return this.component != null;\n  };\n  Provider.prototype.isInitialized = function (identifier) {\n    if (identifier === void 0) {\n      identifier = DEFAULT_ENTRY_NAME;\n    }\n    return this.instances.has(identifier);\n  };\n  Provider.prototype.getOptions = function (identifier) {\n    if (identifier === void 0) {\n      identifier = DEFAULT_ENTRY_NAME;\n    }\n    return this.instancesOptions.get(identifier) || {};\n  };\n  Provider.prototype.initialize = function (opts) {\n    var e_2, _a;\n    if (opts === void 0) {\n      opts = {};\n    }\n    var _b = opts.options,\n      options = _b === void 0 ? {} : _b;\n    var normalizedIdentifier = this.normalizeInstanceIdentifier(opts.instanceIdentifier);\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\"\".concat(this.name, \"(\").concat(normalizedIdentifier, \") has already been initialized\"));\n    }\n    if (!this.isComponentSet()) {\n      throw Error(\"Component \".concat(this.name, \" has not been registered yet\"));\n    }\n    var instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options: options\n    });\n    try {\n      // resolve any pending promise waiting for the service instance\n      for (var _c = tslib.__values(this.instancesDeferred.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {\n        var _e = tslib.__read(_d.value, 2),\n          instanceIdentifier = _e[0],\n          instanceDeferred = _e[1];\n        var normalizedDeferredIdentifier = this.normalizeInstanceIdentifier(instanceIdentifier);\n        if (normalizedIdentifier === normalizedDeferredIdentifier) {\n          instanceDeferred.resolve(instance);\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n    return instance;\n  };\n  /**\r\n   *\r\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\r\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\r\n   *\r\n   * @param identifier An optional instance identifier\r\n   * @returns a function to unregister the callback\r\n   */\n  Provider.prototype.onInit = function (callback, identifier) {\n    var _a;\n    var normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    var existingCallbacks = (_a = this.onInitCallbacks.get(normalizedIdentifier)) !== null && _a !== void 0 ? _a : new Set();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n    var existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n    return function () {\n      existingCallbacks.delete(callback);\n    };\n  };\n  /**\r\n   * Invoke onInit callbacks synchronously\r\n   * @param instance the service instance`\r\n   */\n  Provider.prototype.invokeOnInitCallbacks = function (instance, identifier) {\n    var e_3, _a;\n    var callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    try {\n      for (var callbacks_1 = tslib.__values(callbacks), callbacks_1_1 = callbacks_1.next(); !callbacks_1_1.done; callbacks_1_1 = callbacks_1.next()) {\n        var callback = callbacks_1_1.value;\n        try {\n          callback(instance, identifier);\n        } catch (_b) {\n          // ignore errors in the onInit callback\n        }\n      }\n    } catch (e_3_1) {\n      e_3 = {\n        error: e_3_1\n      };\n    } finally {\n      try {\n        if (callbacks_1_1 && !callbacks_1_1.done && (_a = callbacks_1.return)) _a.call(callbacks_1);\n      } finally {\n        if (e_3) throw e_3.error;\n      }\n    }\n  };\n  Provider.prototype.getOrInitializeService = function (_a) {\n    var instanceIdentifier = _a.instanceIdentifier,\n      _b = _a.options,\n      options = _b === void 0 ? {} : _b;\n    var instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options: options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n      /**\r\n       * Invoke onInit listeners.\r\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\r\n       * while onInit listeners are registered by consumers of the provider.\r\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n      /**\r\n       * Order is important\r\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\r\n       * makes `isInitialized()` return true.\r\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(this.container, instanceIdentifier, instance);\n        } catch (_c) {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n    return instance || null;\n  };\n  Provider.prototype.normalizeInstanceIdentifier = function (identifier) {\n    if (identifier === void 0) {\n      identifier = DEFAULT_ENTRY_NAME;\n    }\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  };\n\n  Provider.prototype.shouldAutoInitialize = function () {\n    return !!this.component && this.component.instantiationMode !== \"EXPLICIT\" /* InstantiationMode.EXPLICIT */;\n  };\n\n  return Provider;\n}();\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier) {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\nfunction isComponentEager(component) {\n  return component.instantiationMode === \"EAGER\" /* InstantiationMode.EAGER */;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\r\n */\nvar ComponentContainer = /** @class */function () {\n  function ComponentContainer(name) {\n    this.name = name;\n    this.providers = new Map();\n  }\n  /**\r\n   *\r\n   * @param component Component being added\r\n   * @param overwrite When a component with the same name has already been registered,\r\n   * if overwrite is true: overwrite the existing component with the new component and create a new\r\n   * provider with the new component. It can be useful in tests where you want to use different mocks\r\n   * for different tests.\r\n   * if overwrite is false: throw an exception\r\n   */\n  ComponentContainer.prototype.addComponent = function (component) {\n    var provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\"Component \".concat(component.name, \" has already been registered with \").concat(this.name));\n    }\n    provider.setComponent(component);\n  };\n  ComponentContainer.prototype.addOrOverwriteComponent = function (component) {\n    var provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n    this.addComponent(component);\n  };\n  /**\r\n   * getProvider provides a type safe interface where it can only be called with a field name\r\n   * present in NameServiceMapping interface.\r\n   *\r\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\r\n   * themselves.\r\n   */\n  ComponentContainer.prototype.getProvider = function (name) {\n    if (this.providers.has(name)) {\n      return this.providers.get(name);\n    }\n    // create a Provider for a service that hasn't registered with Firebase\n    var provider = new Provider(name, this);\n    this.providers.set(name, provider);\n    return provider;\n  };\n  ComponentContainer.prototype.getProviders = function () {\n    return Array.from(this.providers.values());\n  };\n  return ComponentContainer;\n}();\nexports.Component = Component;\nexports.ComponentContainer = ComponentContainer;\nexports.Provider = Provider;","map":{"version":3,"names":["Component","name","instanceFactory","type","multipleInstances","serviceProps","instantiationMode","onInstanceCreated","prototype","setInstantiationMode","mode","setMultipleInstances","setServiceProps","props","setInstanceCreatedCallback","callback","DEFAULT_ENTRY_NAME","Provider","container","component","instances","Map","instancesDeferred","instancesOptions","onInitCallbacks","get","identifier","normalizedIdentifier","normalizeInstanceIdentifier","has","deferred","util","Deferred","set","isInitialized","shouldAutoInitialize","instance","getOrInitializeService","instanceIdentifier","resolve","e","promise","getImmediate","options","optional","_a","Error","concat","getComponent","setComponent","isComponentEager","_b","tslib","__values","entries","_c","next","done","_d","__read","value","instanceDeferred","clearInstance","delete","services","Array","from","values","Promise","all","__spreadArray","filter","service","map","INTERNAL","_delete","sent","isComponentSet","getOptions","initialize","opts","_e","normalizedDeferredIdentifier","onInit","existingCallbacks","Set","add","existingInstance","invokeOnInitCallbacks","callbacks","callbacks_1","callbacks_1_1","normalizeIdentifierForFactory","undefined","ComponentContainer","providers","addComponent","provider","getProvider","addOrOverwriteComponent","getProviders"],"sources":["D:\\Coding\\React\\taskmybusiness\\node_modules\\@firebase\\component\\src\\component.ts","D:\\Coding\\React\\taskmybusiness\\node_modules\\@firebase\\component\\src\\constants.ts","D:\\Coding\\React\\taskmybusiness\\node_modules\\@firebase\\component\\src\\provider.ts","D:\\Coding\\React\\taskmybusiness\\node_modules\\@firebase\\component\\src\\component_container.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  InstantiationMode,\n  InstanceFactory,\n  ComponentType,\n  Dictionary,\n  Name,\n  onInstanceCreatedCallback\n} from './types';\n\n/**\n * Component for service name T, e.g. `auth`, `auth-internal`\n */\nexport class Component<T extends Name = Name> {\n  multipleInstances = false;\n  /**\n   * Properties to be added to the service namespace\n   */\n  serviceProps: Dictionary = {};\n\n  instantiationMode = InstantiationMode.LAZY;\n\n  onInstanceCreated: onInstanceCreatedCallback<T> | null = null;\n\n  /**\n   *\n   * @param name The public service name, e.g. app, auth, firestore, database\n   * @param instanceFactory Service factory responsible for creating the public interface\n   * @param type whether the service provided by the component is public or private\n   */\n  constructor(\n    readonly name: T,\n    readonly instanceFactory: InstanceFactory<T>,\n    readonly type: ComponentType\n  ) {}\n\n  setInstantiationMode(mode: InstantiationMode): this {\n    this.instantiationMode = mode;\n    return this;\n  }\n\n  setMultipleInstances(multipleInstances: boolean): this {\n    this.multipleInstances = multipleInstances;\n    return this;\n  }\n\n  setServiceProps(props: Dictionary): this {\n    this.serviceProps = props;\n    return this;\n  }\n\n  setInstanceCreatedCallback(callback: onInstanceCreatedCallback<T>): this {\n    this.onInstanceCreated = callback;\n    return this;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_ENTRY_NAME = '[DEFAULT]';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Deferred } from '@firebase/util';\nimport { ComponentContainer } from './component_container';\nimport { DEFAULT_ENTRY_NAME } from './constants';\nimport {\n  InitializeOptions,\n  InstantiationMode,\n  Name,\n  NameServiceMapping,\n  OnInitCallBack\n} from './types';\nimport { Component } from './component';\n\n/**\n * Provider for instance for service name T, e.g. 'auth', 'auth-internal'\n * NameServiceMapping[T] is an alias for the type of the instance\n */\nexport class Provider<T extends Name> {\n  private component: Component<T> | null = null;\n  private readonly instances: Map<string, NameServiceMapping[T]> = new Map();\n  private readonly instancesDeferred: Map<\n    string,\n    Deferred<NameServiceMapping[T]>\n  > = new Map();\n  private readonly instancesOptions: Map<string, Record<string, unknown>> =\n    new Map();\n  private onInitCallbacks: Map<string, Set<OnInitCallBack<T>>> = new Map();\n\n  constructor(\n    private readonly name: T,\n    private readonly container: ComponentContainer\n  ) {}\n\n  /**\n   * @param identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   */\n  get(identifier?: string): Promise<NameServiceMapping[T]> {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n\n    if (!this.instancesDeferred.has(normalizedIdentifier)) {\n      const deferred = new Deferred<NameServiceMapping[T]>();\n      this.instancesDeferred.set(normalizedIdentifier, deferred);\n\n      if (\n        this.isInitialized(normalizedIdentifier) ||\n        this.shouldAutoInitialize()\n      ) {\n        // initialize the service if it can be auto-initialized\n        try {\n          const instance = this.getOrInitializeService({\n            instanceIdentifier: normalizedIdentifier\n          });\n          if (instance) {\n            deferred.resolve(instance);\n          }\n        } catch (e) {\n          // when the instance factory throws an exception during get(), it should not cause\n          // a fatal error. We just return the unresolved promise in this case.\n        }\n      }\n    }\n\n    return this.instancesDeferred.get(normalizedIdentifier)!.promise;\n  }\n\n  /**\n   *\n   * @param options.identifier A provider can provide mulitple instances of a service\n   * if this.component.multipleInstances is true.\n   * @param options.optional If optional is false or not provided, the method throws an error when\n   * the service is not immediately available.\n   * If optional is true, the method returns null if the service is not immediately available.\n   */\n  getImmediate(options: {\n    identifier?: string;\n    optional: true;\n  }): NameServiceMapping[T] | null;\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: false;\n  }): NameServiceMapping[T];\n  getImmediate(options?: {\n    identifier?: string;\n    optional?: boolean;\n  }): NameServiceMapping[T] | null {\n    // if multipleInstances is not supported, use the default name\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      options?.identifier\n    );\n    const optional = options?.optional ?? false;\n\n    if (\n      this.isInitialized(normalizedIdentifier) ||\n      this.shouldAutoInitialize()\n    ) {\n      try {\n        return this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        });\n      } catch (e) {\n        if (optional) {\n          return null;\n        } else {\n          throw e;\n        }\n      }\n    } else {\n      // In case a component is not initialized and should/can not be auto-initialized at the moment, return null if the optional flag is set, or throw\n      if (optional) {\n        return null;\n      } else {\n        throw Error(`Service ${this.name} is not available`);\n      }\n    }\n  }\n\n  getComponent(): Component<T> | null {\n    return this.component;\n  }\n\n  setComponent(component: Component<T>): void {\n    if (component.name !== this.name) {\n      throw Error(\n        `Mismatching Component ${component.name} for Provider ${this.name}.`\n      );\n    }\n\n    if (this.component) {\n      throw Error(`Component for ${this.name} has already been provided`);\n    }\n\n    this.component = component;\n\n    // return early without attempting to initialize the component if the component requires explicit initialization (calling `Provider.initialize()`)\n    if (!this.shouldAutoInitialize()) {\n      return;\n    }\n\n    // if the service is eager, initialize the default instance\n    if (isComponentEager(component)) {\n      try {\n        this.getOrInitializeService({ instanceIdentifier: DEFAULT_ENTRY_NAME });\n      } catch (e) {\n        // when the instance factory for an eager Component throws an exception during the eager\n        // initialization, it should not cause a fatal error.\n        // TODO: Investigate if we need to make it configurable, because some component may want to cause\n        // a fatal error in this case?\n      }\n    }\n\n    // Create service instances for the pending promises and resolve them\n    // NOTE: if this.multipleInstances is false, only the default instance will be created\n    // and all promises with resolve with it regardless of the identifier.\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n\n      try {\n        // `getOrInitializeService()` should always return a valid instance since a component is guaranteed. use ! to make typescript happy.\n        const instance = this.getOrInitializeService({\n          instanceIdentifier: normalizedIdentifier\n        })!;\n        instanceDeferred.resolve(instance);\n      } catch (e) {\n        // when the instance factory throws an exception, it should not cause\n        // a fatal error. We just leave the promise unresolved.\n      }\n    }\n  }\n\n  clearInstance(identifier: string = DEFAULT_ENTRY_NAME): void {\n    this.instancesDeferred.delete(identifier);\n    this.instancesOptions.delete(identifier);\n    this.instances.delete(identifier);\n  }\n\n  // app.delete() will call this method on every provider to delete the services\n  // TODO: should we mark the provider as deleted?\n  async delete(): Promise<void> {\n    const services = Array.from(this.instances.values());\n\n    await Promise.all([\n      ...services\n        .filter(service => 'INTERNAL' in service) // legacy services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any).INTERNAL!.delete()),\n      ...services\n        .filter(service => '_delete' in service) // modularized services\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        .map(service => (service as any)._delete())\n    ]);\n  }\n\n  isComponentSet(): boolean {\n    return this.component != null;\n  }\n\n  isInitialized(identifier: string = DEFAULT_ENTRY_NAME): boolean {\n    return this.instances.has(identifier);\n  }\n\n  getOptions(identifier: string = DEFAULT_ENTRY_NAME): Record<string, unknown> {\n    return this.instancesOptions.get(identifier) || {};\n  }\n\n  initialize(opts: InitializeOptions = {}): NameServiceMapping[T] {\n    const { options = {} } = opts;\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(\n      opts.instanceIdentifier\n    );\n    if (this.isInitialized(normalizedIdentifier)) {\n      throw Error(\n        `${this.name}(${normalizedIdentifier}) has already been initialized`\n      );\n    }\n\n    if (!this.isComponentSet()) {\n      throw Error(`Component ${this.name} has not been registered yet`);\n    }\n\n    const instance = this.getOrInitializeService({\n      instanceIdentifier: normalizedIdentifier,\n      options\n    })!;\n\n    // resolve any pending promise waiting for the service instance\n    for (const [\n      instanceIdentifier,\n      instanceDeferred\n    ] of this.instancesDeferred.entries()) {\n      const normalizedDeferredIdentifier =\n        this.normalizeInstanceIdentifier(instanceIdentifier);\n      if (normalizedIdentifier === normalizedDeferredIdentifier) {\n        instanceDeferred.resolve(instance);\n      }\n    }\n\n    return instance;\n  }\n\n  /**\n   *\n   * @param callback - a function that will be invoked  after the provider has been initialized by calling provider.initialize().\n   * The function is invoked SYNCHRONOUSLY, so it should not execute any longrunning tasks in order to not block the program.\n   *\n   * @param identifier An optional instance identifier\n   * @returns a function to unregister the callback\n   */\n  onInit(callback: OnInitCallBack<T>, identifier?: string): () => void {\n    const normalizedIdentifier = this.normalizeInstanceIdentifier(identifier);\n    const existingCallbacks =\n      this.onInitCallbacks.get(normalizedIdentifier) ??\n      new Set<OnInitCallBack<T>>();\n    existingCallbacks.add(callback);\n    this.onInitCallbacks.set(normalizedIdentifier, existingCallbacks);\n\n    const existingInstance = this.instances.get(normalizedIdentifier);\n    if (existingInstance) {\n      callback(existingInstance, normalizedIdentifier);\n    }\n\n    return () => {\n      existingCallbacks.delete(callback);\n    };\n  }\n\n  /**\n   * Invoke onInit callbacks synchronously\n   * @param instance the service instance`\n   */\n  private invokeOnInitCallbacks(\n    instance: NameServiceMapping[T],\n    identifier: string\n  ): void {\n    const callbacks = this.onInitCallbacks.get(identifier);\n    if (!callbacks) {\n      return;\n    }\n    for (const callback of callbacks) {\n      try {\n        callback(instance, identifier);\n      } catch {\n        // ignore errors in the onInit callback\n      }\n    }\n  }\n\n  private getOrInitializeService({\n    instanceIdentifier,\n    options = {}\n  }: {\n    instanceIdentifier: string;\n    options?: Record<string, unknown>;\n  }): NameServiceMapping[T] | null {\n    let instance = this.instances.get(instanceIdentifier);\n    if (!instance && this.component) {\n      instance = this.component.instanceFactory(this.container, {\n        instanceIdentifier: normalizeIdentifierForFactory(instanceIdentifier),\n        options\n      });\n      this.instances.set(instanceIdentifier, instance);\n      this.instancesOptions.set(instanceIdentifier, options);\n\n      /**\n       * Invoke onInit listeners.\n       * Note this.component.onInstanceCreated is different, which is used by the component creator,\n       * while onInit listeners are registered by consumers of the provider.\n       */\n      this.invokeOnInitCallbacks(instance, instanceIdentifier);\n\n      /**\n       * Order is important\n       * onInstanceCreated() should be called after this.instances.set(instanceIdentifier, instance); which\n       * makes `isInitialized()` return true.\n       */\n      if (this.component.onInstanceCreated) {\n        try {\n          this.component.onInstanceCreated(\n            this.container,\n            instanceIdentifier,\n            instance\n          );\n        } catch {\n          // ignore errors in the onInstanceCreatedCallback\n        }\n      }\n    }\n\n    return instance || null;\n  }\n\n  private normalizeInstanceIdentifier(\n    identifier: string = DEFAULT_ENTRY_NAME\n  ): string {\n    if (this.component) {\n      return this.component.multipleInstances ? identifier : DEFAULT_ENTRY_NAME;\n    } else {\n      return identifier; // assume multiple instances are supported before the component is provided.\n    }\n  }\n\n  private shouldAutoInitialize(): boolean {\n    return (\n      !!this.component &&\n      this.component.instantiationMode !== InstantiationMode.EXPLICIT\n    );\n  }\n}\n\n// undefined should be passed to the service factory for the default instance\nfunction normalizeIdentifierForFactory(identifier: string): string | undefined {\n  return identifier === DEFAULT_ENTRY_NAME ? undefined : identifier;\n}\n\nfunction isComponentEager<T extends Name>(component: Component<T>): boolean {\n  return component.instantiationMode === InstantiationMode.EAGER;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Provider } from './provider';\nimport { Component } from './component';\nimport { Name } from './types';\n\n/**\n * ComponentContainer that provides Providers for service name T, e.g. `auth`, `auth-internal`\n */\nexport class ComponentContainer {\n  private readonly providers = new Map<string, Provider<Name>>();\n\n  constructor(private readonly name: string) {}\n\n  /**\n   *\n   * @param component Component being added\n   * @param overwrite When a component with the same name has already been registered,\n   * if overwrite is true: overwrite the existing component with the new component and create a new\n   * provider with the new component. It can be useful in tests where you want to use different mocks\n   * for different tests.\n   * if overwrite is false: throw an exception\n   */\n  addComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      throw new Error(\n        `Component ${component.name} has already been registered with ${this.name}`\n      );\n    }\n\n    provider.setComponent(component);\n  }\n\n  addOrOverwriteComponent<T extends Name>(component: Component<T>): void {\n    const provider = this.getProvider(component.name);\n    if (provider.isComponentSet()) {\n      // delete the existing provider from the container, so we can register the new component\n      this.providers.delete(component.name);\n    }\n\n    this.addComponent(component);\n  }\n\n  /**\n   * getProvider provides a type safe interface where it can only be called with a field name\n   * present in NameServiceMapping interface.\n   *\n   * Firebase SDKs providing services should extend NameServiceMapping interface to register\n   * themselves.\n   */\n  getProvider<T extends Name>(name: T): Provider<T> {\n    if (this.providers.has(name)) {\n      return this.providers.get(name) as unknown as Provider<T>;\n    }\n\n    // create a Provider for a service that hasn't registered with Firebase\n    const provider = new Provider<T>(name, this);\n    this.providers.set(name, provider as unknown as Provider<Name>);\n\n    return provider as Provider<T>;\n  }\n\n  getProviders(): Array<Provider<Name>> {\n    return Array.from(this.providers.values());\n  }\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}