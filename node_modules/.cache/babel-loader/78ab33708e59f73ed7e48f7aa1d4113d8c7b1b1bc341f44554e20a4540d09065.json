{"ast":null,"code":"\"use strict\";\n\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.GoogleToken = void 0;\nconst fs = require(\"fs\");\nconst gaxios_1 = require(\"gaxios\");\nconst jws = require(\"jws\");\nconst path = require(\"path\");\nconst util_1 = require(\"util\");\nconst readFile = fs.readFile ? (0, util_1.promisify)(fs.readFile) : async () => {\n  // if running in the web-browser, fs.readFile may not have been shimmed.\n  throw new ErrorWithCode('use key rather than keyFile.', 'MISSING_CREDENTIALS');\n};\nconst GOOGLE_TOKEN_URL = 'https://www.googleapis.com/oauth2/v4/token';\nconst GOOGLE_REVOKE_TOKEN_URL = 'https://accounts.google.com/o/oauth2/revoke?token=';\nclass ErrorWithCode extends Error {\n  constructor(message, code) {\n    super(message);\n    this.code = code;\n  }\n}\nlet getPem;\nclass GoogleToken {\n  /**\n   * Create a GoogleToken.\n   *\n   * @param options  Configuration object.\n   */\n  constructor(options) {\n    this.transporter = {\n      request: opts => (0, gaxios_1.request)(opts)\n    };\n    this.configure(options);\n  }\n  get accessToken() {\n    return this.rawToken ? this.rawToken.access_token : undefined;\n  }\n  get idToken() {\n    return this.rawToken ? this.rawToken.id_token : undefined;\n  }\n  get tokenType() {\n    return this.rawToken ? this.rawToken.token_type : undefined;\n  }\n  get refreshToken() {\n    return this.rawToken ? this.rawToken.refresh_token : undefined;\n  }\n  /**\n   * Returns whether the token has expired.\n   *\n   * @return true if the token has expired, false otherwise.\n   */\n  hasExpired() {\n    const now = new Date().getTime();\n    if (this.rawToken && this.expiresAt) {\n      return now >= this.expiresAt;\n    } else {\n      return true;\n    }\n  }\n  /**\n   * Returns whether the token will expire within eagerRefreshThresholdMillis\n   *\n   * @return true if the token will be expired within eagerRefreshThresholdMillis, false otherwise.\n   */\n  isTokenExpiring() {\n    var _a;\n    const now = new Date().getTime();\n    const eagerRefreshThresholdMillis = (_a = this.eagerRefreshThresholdMillis) !== null && _a !== void 0 ? _a : 0;\n    if (this.rawToken && this.expiresAt) {\n      return this.expiresAt <= now + eagerRefreshThresholdMillis;\n    } else {\n      return true;\n    }\n  }\n  getToken(callback) {\n    let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (typeof callback === 'object') {\n      opts = callback;\n      callback = undefined;\n    }\n    opts = Object.assign({\n      forceRefresh: false\n    }, opts);\n    if (callback) {\n      const cb = callback;\n      this.getTokenAsync(opts).then(t => cb(null, t), callback);\n      return;\n    }\n    return this.getTokenAsync(opts);\n  }\n  /**\n   * Given a keyFile, extract the key and client email if available\n   * @param keyFile Path to a json, pem, or p12 file that contains the key.\n   * @returns an object with privateKey and clientEmail properties\n   */\n  async getCredentials(keyFile) {\n    const ext = path.extname(keyFile);\n    switch (ext) {\n      case '.json':\n        {\n          const key = await readFile(keyFile, 'utf8');\n          const body = JSON.parse(key);\n          const privateKey = body.private_key;\n          const clientEmail = body.client_email;\n          if (!privateKey || !clientEmail) {\n            throw new ErrorWithCode('private_key and client_email are required.', 'MISSING_CREDENTIALS');\n          }\n          return {\n            privateKey,\n            clientEmail\n          };\n        }\n      case '.der':\n      case '.crt':\n      case '.pem':\n        {\n          const privateKey = await readFile(keyFile, 'utf8');\n          return {\n            privateKey\n          };\n        }\n      case '.p12':\n      case '.pfx':\n        {\n          // NOTE:  The loading of `google-p12-pem` is deferred for performance\n          // reasons.  The `node-forge` npm module in `google-p12-pem` adds a fair\n          // bit time to overall module loading, and is likely not frequently\n          // used.  In a future release, p12 support will be entirely removed.\n          if (!getPem) {\n            getPem = (await Promise.resolve().then(() => require('google-p12-pem'))).getPem;\n          }\n          const privateKey = await getPem(keyFile);\n          return {\n            privateKey\n          };\n        }\n      default:\n        throw new ErrorWithCode('Unknown certificate type. Type is determined based on file extension. ' + 'Current supported extensions are *.json, *.pem, and *.p12.', 'UNKNOWN_CERTIFICATE_TYPE');\n    }\n  }\n  async getTokenAsync(opts) {\n    if (this.inFlightRequest && !opts.forceRefresh) {\n      return this.inFlightRequest;\n    }\n    try {\n      return await (this.inFlightRequest = this.getTokenAsyncInner(opts));\n    } finally {\n      this.inFlightRequest = undefined;\n    }\n  }\n  async getTokenAsyncInner(opts) {\n    if (this.isTokenExpiring() === false && opts.forceRefresh === false) {\n      return Promise.resolve(this.rawToken);\n    }\n    if (!this.key && !this.keyFile) {\n      throw new Error('No key or keyFile set.');\n    }\n    if (!this.key && this.keyFile) {\n      const creds = await this.getCredentials(this.keyFile);\n      this.key = creds.privateKey;\n      this.iss = creds.clientEmail || this.iss;\n      if (!creds.clientEmail) {\n        this.ensureEmail();\n      }\n    }\n    return this.requestToken();\n  }\n  ensureEmail() {\n    if (!this.iss) {\n      throw new ErrorWithCode('email is required.', 'MISSING_CREDENTIALS');\n    }\n  }\n  revokeToken(callback) {\n    if (callback) {\n      this.revokeTokenAsync().then(() => callback(), callback);\n      return;\n    }\n    return this.revokeTokenAsync();\n  }\n  async revokeTokenAsync() {\n    if (!this.accessToken) {\n      throw new Error('No token to revoke.');\n    }\n    const url = GOOGLE_REVOKE_TOKEN_URL + this.accessToken;\n    await this.transporter.request({\n      url\n    });\n    this.configure({\n      email: this.iss,\n      sub: this.sub,\n      key: this.key,\n      keyFile: this.keyFile,\n      scope: this.scope,\n      additionalClaims: this.additionalClaims\n    });\n  }\n  /**\n   * Configure the GoogleToken for re-use.\n   * @param  {object} options Configuration object.\n   */\n  configure() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    this.keyFile = options.keyFile;\n    this.key = options.key;\n    this.rawToken = undefined;\n    this.iss = options.email || options.iss;\n    this.sub = options.sub;\n    this.additionalClaims = options.additionalClaims;\n    if (typeof options.scope === 'object') {\n      this.scope = options.scope.join(' ');\n    } else {\n      this.scope = options.scope;\n    }\n    this.eagerRefreshThresholdMillis = options.eagerRefreshThresholdMillis;\n    if (options.transporter) {\n      this.transporter = options.transporter;\n    }\n  }\n  /**\n   * Request the token from Google.\n   */\n  async requestToken() {\n    var _a, _b;\n    const iat = Math.floor(new Date().getTime() / 1000);\n    const additionalClaims = this.additionalClaims || {};\n    const payload = Object.assign({\n      iss: this.iss,\n      scope: this.scope,\n      aud: GOOGLE_TOKEN_URL,\n      exp: iat + 3600,\n      iat,\n      sub: this.sub\n    }, additionalClaims);\n    const signedJWT = jws.sign({\n      header: {\n        alg: 'RS256'\n      },\n      payload,\n      secret: this.key\n    });\n    try {\n      const r = await this.transporter.request({\n        method: 'POST',\n        url: GOOGLE_TOKEN_URL,\n        data: {\n          grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n          assertion: signedJWT\n        },\n        headers: {\n          'Content-Type': 'application/x-www-form-urlencoded'\n        },\n        responseType: 'json'\n      });\n      this.rawToken = r.data;\n      this.expiresAt = r.data.expires_in === null || r.data.expires_in === undefined ? undefined : (iat + r.data.expires_in) * 1000;\n      return this.rawToken;\n    } catch (e) {\n      this.rawToken = undefined;\n      this.tokenExpires = undefined;\n      const body = e.response && ((_a = e.response) === null || _a === void 0 ? void 0 : _a.data) ? (_b = e.response) === null || _b === void 0 ? void 0 : _b.data : {};\n      if (body.error) {\n        const desc = body.error_description ? `: ${body.error_description}` : '';\n        e.message = `${body.error}${desc}`;\n      }\n      throw e;\n    }\n  }\n}\nexports.GoogleToken = GoogleToken;","map":{"version":3,"names":["Object","defineProperty","exports","value","GoogleToken","fs","require","gaxios_1","jws","path","util_1","readFile","promisify","ErrorWithCode","GOOGLE_TOKEN_URL","GOOGLE_REVOKE_TOKEN_URL","Error","constructor","message","code","getPem","options","transporter","request","opts","configure","accessToken","rawToken","access_token","undefined","idToken","id_token","tokenType","token_type","refreshToken","refresh_token","hasExpired","now","Date","getTime","expiresAt","isTokenExpiring","_a","eagerRefreshThresholdMillis","getToken","callback","arguments","length","assign","forceRefresh","cb","getTokenAsync","then","t","getCredentials","keyFile","ext","extname","key","body","JSON","parse","privateKey","private_key","clientEmail","client_email","Promise","resolve","inFlightRequest","getTokenAsyncInner","creds","iss","ensureEmail","requestToken","revokeToken","revokeTokenAsync","url","email","sub","scope","additionalClaims","join","_b","iat","Math","floor","payload","aud","exp","signedJWT","sign","header","alg","secret","r","method","data","grant_type","assertion","headers","responseType","expires_in","e","tokenExpires","response","error","desc","error_description"],"sources":["D:/Coding/React/taskmybusiness/node_modules/gtoken/build/src/index.js"],"sourcesContent":["\"use strict\";\n/**\n * Copyright 2018 Google LLC\n *\n * Distributed under MIT license.\n * See file LICENSE for detail or copy at https://opensource.org/licenses/MIT\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.GoogleToken = void 0;\nconst fs = require(\"fs\");\nconst gaxios_1 = require(\"gaxios\");\nconst jws = require(\"jws\");\nconst path = require(\"path\");\nconst util_1 = require(\"util\");\nconst readFile = fs.readFile\n    ? (0, util_1.promisify)(fs.readFile)\n    : async () => {\n        // if running in the web-browser, fs.readFile may not have been shimmed.\n        throw new ErrorWithCode('use key rather than keyFile.', 'MISSING_CREDENTIALS');\n    };\nconst GOOGLE_TOKEN_URL = 'https://www.googleapis.com/oauth2/v4/token';\nconst GOOGLE_REVOKE_TOKEN_URL = 'https://accounts.google.com/o/oauth2/revoke?token=';\nclass ErrorWithCode extends Error {\n    constructor(message, code) {\n        super(message);\n        this.code = code;\n    }\n}\nlet getPem;\nclass GoogleToken {\n    /**\n     * Create a GoogleToken.\n     *\n     * @param options  Configuration object.\n     */\n    constructor(options) {\n        this.transporter = {\n            request: opts => (0, gaxios_1.request)(opts),\n        };\n        this.configure(options);\n    }\n    get accessToken() {\n        return this.rawToken ? this.rawToken.access_token : undefined;\n    }\n    get idToken() {\n        return this.rawToken ? this.rawToken.id_token : undefined;\n    }\n    get tokenType() {\n        return this.rawToken ? this.rawToken.token_type : undefined;\n    }\n    get refreshToken() {\n        return this.rawToken ? this.rawToken.refresh_token : undefined;\n    }\n    /**\n     * Returns whether the token has expired.\n     *\n     * @return true if the token has expired, false otherwise.\n     */\n    hasExpired() {\n        const now = new Date().getTime();\n        if (this.rawToken && this.expiresAt) {\n            return now >= this.expiresAt;\n        }\n        else {\n            return true;\n        }\n    }\n    /**\n     * Returns whether the token will expire within eagerRefreshThresholdMillis\n     *\n     * @return true if the token will be expired within eagerRefreshThresholdMillis, false otherwise.\n     */\n    isTokenExpiring() {\n        var _a;\n        const now = new Date().getTime();\n        const eagerRefreshThresholdMillis = (_a = this.eagerRefreshThresholdMillis) !== null && _a !== void 0 ? _a : 0;\n        if (this.rawToken && this.expiresAt) {\n            return this.expiresAt <= now + eagerRefreshThresholdMillis;\n        }\n        else {\n            return true;\n        }\n    }\n    getToken(callback, opts = {}) {\n        if (typeof callback === 'object') {\n            opts = callback;\n            callback = undefined;\n        }\n        opts = Object.assign({\n            forceRefresh: false,\n        }, opts);\n        if (callback) {\n            const cb = callback;\n            this.getTokenAsync(opts).then(t => cb(null, t), callback);\n            return;\n        }\n        return this.getTokenAsync(opts);\n    }\n    /**\n     * Given a keyFile, extract the key and client email if available\n     * @param keyFile Path to a json, pem, or p12 file that contains the key.\n     * @returns an object with privateKey and clientEmail properties\n     */\n    async getCredentials(keyFile) {\n        const ext = path.extname(keyFile);\n        switch (ext) {\n            case '.json': {\n                const key = await readFile(keyFile, 'utf8');\n                const body = JSON.parse(key);\n                const privateKey = body.private_key;\n                const clientEmail = body.client_email;\n                if (!privateKey || !clientEmail) {\n                    throw new ErrorWithCode('private_key and client_email are required.', 'MISSING_CREDENTIALS');\n                }\n                return { privateKey, clientEmail };\n            }\n            case '.der':\n            case '.crt':\n            case '.pem': {\n                const privateKey = await readFile(keyFile, 'utf8');\n                return { privateKey };\n            }\n            case '.p12':\n            case '.pfx': {\n                // NOTE:  The loading of `google-p12-pem` is deferred for performance\n                // reasons.  The `node-forge` npm module in `google-p12-pem` adds a fair\n                // bit time to overall module loading, and is likely not frequently\n                // used.  In a future release, p12 support will be entirely removed.\n                if (!getPem) {\n                    getPem = (await Promise.resolve().then(() => require('google-p12-pem'))).getPem;\n                }\n                const privateKey = await getPem(keyFile);\n                return { privateKey };\n            }\n            default:\n                throw new ErrorWithCode('Unknown certificate type. Type is determined based on file extension. ' +\n                    'Current supported extensions are *.json, *.pem, and *.p12.', 'UNKNOWN_CERTIFICATE_TYPE');\n        }\n    }\n    async getTokenAsync(opts) {\n        if (this.inFlightRequest && !opts.forceRefresh) {\n            return this.inFlightRequest;\n        }\n        try {\n            return await (this.inFlightRequest = this.getTokenAsyncInner(opts));\n        }\n        finally {\n            this.inFlightRequest = undefined;\n        }\n    }\n    async getTokenAsyncInner(opts) {\n        if (this.isTokenExpiring() === false && opts.forceRefresh === false) {\n            return Promise.resolve(this.rawToken);\n        }\n        if (!this.key && !this.keyFile) {\n            throw new Error('No key or keyFile set.');\n        }\n        if (!this.key && this.keyFile) {\n            const creds = await this.getCredentials(this.keyFile);\n            this.key = creds.privateKey;\n            this.iss = creds.clientEmail || this.iss;\n            if (!creds.clientEmail) {\n                this.ensureEmail();\n            }\n        }\n        return this.requestToken();\n    }\n    ensureEmail() {\n        if (!this.iss) {\n            throw new ErrorWithCode('email is required.', 'MISSING_CREDENTIALS');\n        }\n    }\n    revokeToken(callback) {\n        if (callback) {\n            this.revokeTokenAsync().then(() => callback(), callback);\n            return;\n        }\n        return this.revokeTokenAsync();\n    }\n    async revokeTokenAsync() {\n        if (!this.accessToken) {\n            throw new Error('No token to revoke.');\n        }\n        const url = GOOGLE_REVOKE_TOKEN_URL + this.accessToken;\n        await this.transporter.request({ url });\n        this.configure({\n            email: this.iss,\n            sub: this.sub,\n            key: this.key,\n            keyFile: this.keyFile,\n            scope: this.scope,\n            additionalClaims: this.additionalClaims,\n        });\n    }\n    /**\n     * Configure the GoogleToken for re-use.\n     * @param  {object} options Configuration object.\n     */\n    configure(options = {}) {\n        this.keyFile = options.keyFile;\n        this.key = options.key;\n        this.rawToken = undefined;\n        this.iss = options.email || options.iss;\n        this.sub = options.sub;\n        this.additionalClaims = options.additionalClaims;\n        if (typeof options.scope === 'object') {\n            this.scope = options.scope.join(' ');\n        }\n        else {\n            this.scope = options.scope;\n        }\n        this.eagerRefreshThresholdMillis = options.eagerRefreshThresholdMillis;\n        if (options.transporter) {\n            this.transporter = options.transporter;\n        }\n    }\n    /**\n     * Request the token from Google.\n     */\n    async requestToken() {\n        var _a, _b;\n        const iat = Math.floor(new Date().getTime() / 1000);\n        const additionalClaims = this.additionalClaims || {};\n        const payload = Object.assign({\n            iss: this.iss,\n            scope: this.scope,\n            aud: GOOGLE_TOKEN_URL,\n            exp: iat + 3600,\n            iat,\n            sub: this.sub,\n        }, additionalClaims);\n        const signedJWT = jws.sign({\n            header: { alg: 'RS256' },\n            payload,\n            secret: this.key,\n        });\n        try {\n            const r = await this.transporter.request({\n                method: 'POST',\n                url: GOOGLE_TOKEN_URL,\n                data: {\n                    grant_type: 'urn:ietf:params:oauth:grant-type:jwt-bearer',\n                    assertion: signedJWT,\n                },\n                headers: { 'Content-Type': 'application/x-www-form-urlencoded' },\n                responseType: 'json',\n            });\n            this.rawToken = r.data;\n            this.expiresAt =\n                r.data.expires_in === null || r.data.expires_in === undefined\n                    ? undefined\n                    : (iat + r.data.expires_in) * 1000;\n            return this.rawToken;\n        }\n        catch (e) {\n            this.rawToken = undefined;\n            this.tokenExpires = undefined;\n            const body = e.response && ((_a = e.response) === null || _a === void 0 ? void 0 : _a.data)\n                ? (_b = e.response) === null || _b === void 0 ? void 0 : _b.data\n                : {};\n            if (body.error) {\n                const desc = body.error_description\n                    ? `: ${body.error_description}`\n                    : '';\n                e.message = `${body.error}${desc}`;\n            }\n            throw e;\n        }\n    }\n}\nexports.GoogleToken = GoogleToken;\n//# sourceMappingURL=index.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}