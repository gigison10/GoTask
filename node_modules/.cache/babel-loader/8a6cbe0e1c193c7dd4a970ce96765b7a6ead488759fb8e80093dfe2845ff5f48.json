{"ast":null,"code":"const {\n  ArgumentError\n} = require('../errors');\nconst {\n  JwksClient\n} = require('../JwksClient');\nconst supportedAlg = require('./config');\nmodule.exports.koaJwtSecret = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  if (!options.jwksUri) {\n    throw new ArgumentError('No JWKS provided. Please provide a jwksUri');\n  }\n  const client = new JwksClient(options);\n  return function secretProvider() {\n    let {\n      alg,\n      kid\n    } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return new Promise((resolve, reject) => {\n      if (!supportedAlg.includes(alg)) {\n        return reject(new Error('Missing / invalid token algorithm'));\n      }\n      client.getSigningKey(kid).then(key => {\n        resolve(key.publicKey || key.rsaPublicKey);\n      }).catch(err => {\n        if (options.handleSigningKeyError) {\n          return options.handleSigningKeyError(err).then(reject);\n        }\n        return reject(err);\n      });\n    });\n  };\n};","map":{"version":3,"names":["ArgumentError","require","JwksClient","supportedAlg","module","exports","koaJwtSecret","options","arguments","length","undefined","jwksUri","client","secretProvider","alg","kid","Promise","resolve","reject","includes","Error","getSigningKey","then","key","publicKey","rsaPublicKey","catch","err","handleSigningKeyError"],"sources":["D:/Coding/React/taskmybusiness/node_modules/jwks-rsa/src/integrations/koa.js"],"sourcesContent":["const { ArgumentError } = require('../errors');\nconst { JwksClient } = require('../JwksClient');\nconst supportedAlg = require('./config');\n\nmodule.exports.koaJwtSecret = function (options = {}) {\n  if (!options.jwksUri) {\n    throw new ArgumentError('No JWKS provided. Please provide a jwksUri');\n  }\n\n  const client = new JwksClient(options);\n\n  return function secretProvider({ alg, kid } = {}) {\n    return new Promise((resolve, reject) => {\n      if (!supportedAlg.includes(alg)) {\n        return reject(new Error('Missing / invalid token algorithm'));\n      }\n\n      client.getSigningKey(kid)\n        .then(key => {\n          resolve(key.publicKey || key.rsaPublicKey);\n        }).catch(err => {\n          if (options.handleSigningKeyError) {\n            return options.handleSigningKeyError(err).then(reject);\n          }\n\n          return reject(err);\n        });\n    });\n  };\n};\n"],"mappings":"AAAA,MAAM;EAAEA;AAAc,CAAC,GAAGC,OAAO,CAAC,WAAW,CAAC;AAC9C,MAAM;EAAEC;AAAW,CAAC,GAAGD,OAAO,CAAC,eAAe,CAAC;AAC/C,MAAME,YAAY,GAAGF,OAAO,CAAC,UAAU,CAAC;AAExCG,MAAM,CAACC,OAAO,CAACC,YAAY,GAAG,YAAwB;EAAA,IAAdC,OAAO,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;EAClD,IAAI,CAACD,OAAO,CAACI,OAAO,EAAE;IACpB,MAAM,IAAIX,aAAa,CAAC,4CAA4C,CAAC;EACvE;EAEA,MAAMY,MAAM,GAAG,IAAIV,UAAU,CAACK,OAAO,CAAC;EAEtC,OAAO,SAASM,cAAcA,CAAA,EAAoB;IAAA,IAAnB;MAAEC,GAAG;MAAEC;IAAI,CAAC,GAAAP,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAC9C,OAAO,IAAIQ,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;MACtC,IAAI,CAACf,YAAY,CAACgB,QAAQ,CAACL,GAAG,CAAC,EAAE;QAC/B,OAAOI,MAAM,CAAC,IAAIE,KAAK,CAAC,mCAAmC,CAAC,CAAC;MAC/D;MAEAR,MAAM,CAACS,aAAa,CAACN,GAAG,CAAC,CACtBO,IAAI,CAACC,GAAG,IAAI;QACXN,OAAO,CAACM,GAAG,CAACC,SAAS,IAAID,GAAG,CAACE,YAAY,CAAC;MAC5C,CAAC,CAAC,CAACC,KAAK,CAACC,GAAG,IAAI;QACd,IAAIpB,OAAO,CAACqB,qBAAqB,EAAE;UACjC,OAAOrB,OAAO,CAACqB,qBAAqB,CAACD,GAAG,CAAC,CAACL,IAAI,CAACJ,MAAM,CAAC;QACxD;QAEA,OAAOA,MAAM,CAACS,GAAG,CAAC;MACpB,CAAC,CAAC;IACN,CAAC,CAAC;EACJ,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}