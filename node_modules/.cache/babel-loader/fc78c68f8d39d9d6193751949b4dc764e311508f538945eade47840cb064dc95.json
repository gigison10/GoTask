{"ast":null,"code":"\"use strict\";\n\n// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.FirestoreAdminClient = void 0;\nconst jsonProtos = require(\"../../protos/admin_v1.json\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1/firestore_admin_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = require(\"./firestore_admin_client_config.json\");\nconst version = require('../../../package.json').version;\n/**\n *  The Cloud Firestore Admin API.\n *\n *  This API provides several administrative services for Cloud Firestore.\n *\n *  Project, Database, Namespace, Collection, Collection Group, and Document are\n *  used as defined in the Google Cloud Firestore API.\n *\n *  Operation: An Operation represents work being performed in the background.\n *\n *  The index service manages Cloud Firestore indexes.\n *\n *  Index creation is performed asynchronously.\n *  An Operation resource is created for each such asynchronous operation.\n *  The state of the operation (including any errors encountered)\n *  may be queried via the Operation resource.\n *\n *  The Operations collection provides a record of actions performed for the\n *  specified Project (including any Operations in progress). Operations are not\n *  created directly but through calls on other collections or resources.\n *\n *  An Operation that is done may be deleted so that it is no longer listed as\n *  part of the Operation collection. Operations are garbage collected after\n *  30 days. By default, ListOperations will only return in progress and failed\n *  operations. To list completed operation, issue a ListOperations request with\n *  the filter `done: true`.\n *\n *  Operations are created by service `FirestoreAdmin`, but are accessed via\n *  service `google.longrunning.Operations`.\n * @class\n * @memberof v1\n */\nclass FirestoreAdminClient {\n  /**\n   * Construct an instance of FirestoreAdminClient.\n   *\n   * @param {object} [options] - The configuration object.\n   * The options accepted by the constructor are described in detail\n   * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\n   * The common options are:\n   * @param {object} [options.credentials] - Credentials object.\n   * @param {string} [options.credentials.client_email]\n   * @param {string} [options.credentials.private_key]\n   * @param {string} [options.email] - Account email address. Required when\n   *     using a .pem or .p12 keyFilename.\n   * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n   *     .p12 key downloaded from the Google Developers Console. If you provide\n   *     a path to a JSON file, the projectId option below is not necessary.\n   *     NOTE: .pem and .p12 require you to specify options.email as well.\n   * @param {number} [options.port] - The port on which to connect to\n   *     the remote host.\n   * @param {string} [options.projectId] - The project ID from the Google\n   *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n   *     the environment variable GCLOUD_PROJECT for your project ID. If your\n   *     app is running in an environment which supports\n   *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n   *     your project ID will be detected automatically.\n   * @param {string} [options.apiEndpoint] - The domain name of the\n   *     API remote host.\n   * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n   *     Follows the structure of {@link gapicConfig}.\n   * @param {boolean | \"rest\"} [options.fallback] - Use HTTP fallback mode.\n   *     Pass \"rest\" to use HTTP/1.1 REST API instead of gRPC.\n   *     For more information, please check the\n   *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.\n   * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you\n   *     need to avoid loading the default gRPC version and want to use the fallback\n   *     HTTP implementation. Load only fallback version and pass it to the constructor:\n   *     ```\n   *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC\n   *     const client = new FirestoreAdminClient({fallback: 'rest'}, gax);\n   *     ```\n   */\n  constructor(opts, gaxInstance) {\n    var _a, _b;\n    this._terminated = false;\n    this.descriptors = {\n      page: {},\n      stream: {},\n      longrunning: {},\n      batching: {}\n    };\n    // Ensure that options include all the required fields.\n    const staticMembers = this.constructor;\n    const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n    this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\n    const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n    const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n    const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function';\n    opts = Object.assign({\n      servicePath,\n      port,\n      clientConfig,\n      fallback\n    }, opts);\n    // Request numeric enum values if REST transport is used.\n    opts.numericEnums = true;\n    // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n    if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n      opts['scopes'] = staticMembers.scopes;\n    }\n    // Load google-gax module synchronously if needed\n    if (!gaxInstance) {\n      gaxInstance = require('google-gax');\n    }\n    // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n    this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;\n    // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n    this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n    // Save options to use in initialize() method.\n    this._opts = opts;\n    // Save the auth object to the client, for use by other methods.\n    this.auth = this._gaxGrpc.auth;\n    // Set useJWTAccessWithScope on the auth object.\n    this.auth.useJWTAccessWithScope = true;\n    // Set defaultServicePath on the auth object.\n    this.auth.defaultServicePath = staticMembers.servicePath;\n    // Set the default scopes in auth client if needed.\n    if (servicePath === staticMembers.servicePath) {\n      this.auth.defaultScopes = staticMembers.scopes;\n    }\n    this.locationsClient = new this._gaxModule.LocationsClient(this._gaxGrpc, opts);\n    // Determine the client header string.\n    const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n    if (typeof process !== 'undefined' && 'versions' in process) {\n      clientHeader.push(`gl-node/${process.versions.node}`);\n    } else {\n      clientHeader.push(`gl-web/${this._gaxModule.version}`);\n    }\n    if (!opts.fallback) {\n      clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n    } else if (opts.fallback === 'rest') {\n      clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);\n    }\n    if (opts.libName && opts.libVersion) {\n      clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n    }\n    // Load the applicable protos.\n    this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);\n    // This API contains \"path templates\"; forward-slash-separated\n    // identifiers to uniquely identify resources within the API.\n    // Create useful helper objects for these.\n    this.pathTemplates = {\n      collectionGroupPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}'),\n      databasePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}'),\n      fieldPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}/fields/{field}'),\n      indexPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}/indexes/{index}'),\n      projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}')\n    };\n    // Some of the methods on this service return \"paged\" results,\n    // (e.g. 50 results at a time, with tokens to get subsequent\n    // pages). Denote the keys used for pagination and results.\n    this.descriptors.page = {\n      listIndexes: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'indexes'),\n      listFields: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'fields')\n    };\n    const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);\n    // This API contains \"long-running operations\", which return a\n    // an Operation object that allows for tracking of the operation,\n    // rather than holding a request open.\n    const lroOptions = {\n      auth: this.auth,\n      grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined\n    };\n    if (opts.fallback === 'rest') {\n      lroOptions.protoJson = protoFilesRoot;\n      lroOptions.httpRules = [{\n        selector: 'google.longrunning.Operations.CancelOperation',\n        post: '/v1/{name=projects/*/databases/*/operations/*}:cancel',\n        body: '*'\n      }, {\n        selector: 'google.longrunning.Operations.DeleteOperation',\n        delete: '/v1/{name=projects/*/databases/*/operations/*}'\n      }, {\n        selector: 'google.longrunning.Operations.GetOperation',\n        get: '/v1/{name=projects/*/databases/*/operations/*}'\n      }, {\n        selector: 'google.longrunning.Operations.ListOperations',\n        get: '/v1/{name=projects/*/databases/*}/operations'\n      }];\n    }\n    this.operationsClient = this._gaxModule.lro(lroOptions).operationsClient(opts);\n    const createIndexResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Index');\n    const createIndexMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.IndexOperationMetadata');\n    const updateFieldResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Field');\n    const updateFieldMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.FieldOperationMetadata');\n    const exportDocumentsResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.ExportDocumentsResponse');\n    const exportDocumentsMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.ExportDocumentsMetadata');\n    const importDocumentsResponse = protoFilesRoot.lookup('.google.protobuf.Empty');\n    const importDocumentsMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.ImportDocumentsMetadata');\n    const updateDatabaseResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Database');\n    const updateDatabaseMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.UpdateDatabaseMetadata');\n    this.descriptors.longrunning = {\n      createIndex: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createIndexResponse.decode.bind(createIndexResponse), createIndexMetadata.decode.bind(createIndexMetadata)),\n      updateField: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateFieldResponse.decode.bind(updateFieldResponse), updateFieldMetadata.decode.bind(updateFieldMetadata)),\n      exportDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, exportDocumentsResponse.decode.bind(exportDocumentsResponse), exportDocumentsMetadata.decode.bind(exportDocumentsMetadata)),\n      importDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, importDocumentsResponse.decode.bind(importDocumentsResponse), importDocumentsMetadata.decode.bind(importDocumentsMetadata)),\n      updateDatabase: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateDatabaseResponse.decode.bind(updateDatabaseResponse), updateDatabaseMetadata.decode.bind(updateDatabaseMetadata))\n    };\n    // Put together the default options sent with requests.\n    this._defaults = this._gaxGrpc.constructSettings('google.firestore.admin.v1.FirestoreAdmin', gapicConfig, opts.clientConfig || {}, {\n      'x-goog-api-client': clientHeader.join(' ')\n    });\n    // Set up a dictionary of \"inner API calls\"; the core implementation\n    // of calling the API is handled in `google-gax`, with this code\n    // merely providing the destination and request information.\n    this.innerApiCalls = {};\n    // Add a warn function to the client constructor so it can be easily tested.\n    this.warn = this._gaxModule.warn;\n  }\n  /**\n   * Initialize the client.\n   * Performs asynchronous operations (such as authentication) and prepares the client.\n   * This function will be called automatically when any class method is called for the\n   * first time, but if you need to initialize it before calling an actual method,\n   * feel free to call initialize() directly.\n   *\n   * You can await on this method if you want to make sure the client is initialized.\n   *\n   * @returns {Promise} A promise that resolves to an authenticated service stub.\n   */\n  initialize() {\n    var _this = this;\n    // If the client stub promise is already initialized, return immediately.\n    if (this.firestoreAdminStub) {\n      return this.firestoreAdminStub;\n    }\n    // Put together the \"service stub\" for\n    // google.firestore.admin.v1.FirestoreAdmin.\n    this.firestoreAdminStub = this._gaxGrpc.createStub(this._opts.fallback ? this._protos.lookupService('google.firestore.admin.v1.FirestoreAdmin') :\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this._protos.google.firestore.admin.v1.FirestoreAdmin, this._opts, this._providedCustomServicePath);\n    // Iterate over each of the methods that the service provides\n    // and create an API call method for each.\n    const firestoreAdminStubMethods = ['createIndex', 'listIndexes', 'getIndex', 'deleteIndex', 'getField', 'updateField', 'listFields', 'exportDocuments', 'importDocuments', 'getDatabase', 'listDatabases', 'updateDatabase'];\n    for (const methodName of firestoreAdminStubMethods) {\n      const callPromise = this.firestoreAdminStub.then(stub => function () {\n        if (_this._terminated) {\n          return Promise.reject('The client has already been closed.');\n        }\n        const func = stub[methodName];\n        for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n          args[_key] = arguments[_key];\n        }\n        return func.apply(stub, args);\n      }, err => () => {\n        throw err;\n      });\n      const descriptor = this.descriptors.page[methodName] || this.descriptors.longrunning[methodName] || undefined;\n      const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);\n      this.innerApiCalls[methodName] = apiCall;\n    }\n    return this.firestoreAdminStub;\n  }\n  /**\n   * The DNS address for this API service.\n   * @returns {string} The DNS address for this service.\n   */\n  static get servicePath() {\n    return 'firestore.googleapis.com';\n  }\n  /**\n   * The DNS address for this API service - same as servicePath(),\n   * exists for compatibility reasons.\n   * @returns {string} The DNS address for this service.\n   */\n  static get apiEndpoint() {\n    return 'firestore.googleapis.com';\n  }\n  /**\n   * The port for this API service.\n   * @returns {number} The default port for this service.\n   */\n  static get port() {\n    return 443;\n  }\n  /**\n   * The scopes needed to make gRPC calls for every method defined\n   * in this service.\n   * @returns {string[]} List of default scopes.\n   */\n  static get scopes() {\n    return ['https://www.googleapis.com/auth/cloud-platform', 'https://www.googleapis.com/auth/datastore'];\n  }\n  /**\n   * Return the project ID used by this class.\n   * @returns {Promise} A promise that resolves to string containing the project ID.\n   */\n  getProjectId(callback) {\n    if (callback) {\n      this.auth.getProjectId(callback);\n      return;\n    }\n    return this.auth.getProjectId();\n  }\n  getIndex(request, optionsOrCallback, callback) {\n    var _a;\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      name: (_a = request.name) !== null && _a !== void 0 ? _a : ''\n    });\n    this.initialize();\n    return this.innerApiCalls.getIndex(request, options, callback);\n  }\n  deleteIndex(request, optionsOrCallback, callback) {\n    var _a;\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      name: (_a = request.name) !== null && _a !== void 0 ? _a : ''\n    });\n    this.initialize();\n    return this.innerApiCalls.deleteIndex(request, options, callback);\n  }\n  getField(request, optionsOrCallback, callback) {\n    var _a;\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      name: (_a = request.name) !== null && _a !== void 0 ? _a : ''\n    });\n    this.initialize();\n    return this.innerApiCalls.getField(request, options, callback);\n  }\n  getDatabase(request, optionsOrCallback, callback) {\n    var _a;\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      name: (_a = request.name) !== null && _a !== void 0 ? _a : ''\n    });\n    this.initialize();\n    return this.innerApiCalls.getDatabase(request, options, callback);\n  }\n  listDatabases(request, optionsOrCallback, callback) {\n    var _a;\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ''\n    });\n    this.initialize();\n    return this.innerApiCalls.listDatabases(request, options, callback);\n  }\n  createIndex(request, optionsOrCallback, callback) {\n    var _a;\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ''\n    });\n    this.initialize();\n    return this.innerApiCalls.createIndex(request, options, callback);\n  }\n  /**\n   * Check the status of the long running operation returned by `createIndex()`.\n   * @param {String} name\n   *   The operation name that will be passed.\n   * @returns {Promise} - The promise which resolves to an object.\n   *   The decoded operation object has result and metadata field to get information from.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example <caption>include:samples/generated/v1/firestore_admin.create_index.js</caption>\n   * region_tag:firestore_v1_generated_FirestoreAdmin_CreateIndex_async\n   */\n  async checkCreateIndexProgress(name) {\n    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({\n      name\n    });\n    const [operation] = await this.operationsClient.getOperation(request);\n    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createIndex, this._gaxModule.createDefaultBackoffSettings());\n    return decodeOperation;\n  }\n  updateField(request, optionsOrCallback, callback) {\n    var _a;\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      'field.name': (_a = request.field.name) !== null && _a !== void 0 ? _a : ''\n    });\n    this.initialize();\n    return this.innerApiCalls.updateField(request, options, callback);\n  }\n  /**\n   * Check the status of the long running operation returned by `updateField()`.\n   * @param {String} name\n   *   The operation name that will be passed.\n   * @returns {Promise} - The promise which resolves to an object.\n   *   The decoded operation object has result and metadata field to get information from.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example <caption>include:samples/generated/v1/firestore_admin.update_field.js</caption>\n   * region_tag:firestore_v1_generated_FirestoreAdmin_UpdateField_async\n   */\n  async checkUpdateFieldProgress(name) {\n    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({\n      name\n    });\n    const [operation] = await this.operationsClient.getOperation(request);\n    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateField, this._gaxModule.createDefaultBackoffSettings());\n    return decodeOperation;\n  }\n  exportDocuments(request, optionsOrCallback, callback) {\n    var _a;\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      name: (_a = request.name) !== null && _a !== void 0 ? _a : ''\n    });\n    this.initialize();\n    return this.innerApiCalls.exportDocuments(request, options, callback);\n  }\n  /**\n   * Check the status of the long running operation returned by `exportDocuments()`.\n   * @param {String} name\n   *   The operation name that will be passed.\n   * @returns {Promise} - The promise which resolves to an object.\n   *   The decoded operation object has result and metadata field to get information from.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example <caption>include:samples/generated/v1/firestore_admin.export_documents.js</caption>\n   * region_tag:firestore_v1_generated_FirestoreAdmin_ExportDocuments_async\n   */\n  async checkExportDocumentsProgress(name) {\n    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({\n      name\n    });\n    const [operation] = await this.operationsClient.getOperation(request);\n    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.exportDocuments, this._gaxModule.createDefaultBackoffSettings());\n    return decodeOperation;\n  }\n  importDocuments(request, optionsOrCallback, callback) {\n    var _a;\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      name: (_a = request.name) !== null && _a !== void 0 ? _a : ''\n    });\n    this.initialize();\n    return this.innerApiCalls.importDocuments(request, options, callback);\n  }\n  /**\n   * Check the status of the long running operation returned by `importDocuments()`.\n   * @param {String} name\n   *   The operation name that will be passed.\n   * @returns {Promise} - The promise which resolves to an object.\n   *   The decoded operation object has result and metadata field to get information from.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example <caption>include:samples/generated/v1/firestore_admin.import_documents.js</caption>\n   * region_tag:firestore_v1_generated_FirestoreAdmin_ImportDocuments_async\n   */\n  async checkImportDocumentsProgress(name) {\n    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({\n      name\n    });\n    const [operation] = await this.operationsClient.getOperation(request);\n    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.importDocuments, this._gaxModule.createDefaultBackoffSettings());\n    return decodeOperation;\n  }\n  updateDatabase(request, optionsOrCallback, callback) {\n    var _a;\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      'database.name': (_a = request.database.name) !== null && _a !== void 0 ? _a : ''\n    });\n    this.initialize();\n    return this.innerApiCalls.updateDatabase(request, options, callback);\n  }\n  /**\n   * Check the status of the long running operation returned by `updateDatabase()`.\n   * @param {String} name\n   *   The operation name that will be passed.\n   * @returns {Promise} - The promise which resolves to an object.\n   *   The decoded operation object has result and metadata field to get information from.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n   *   for more details and examples.\n   * @example <caption>include:samples/generated/v1/firestore_admin.update_database.js</caption>\n   * region_tag:firestore_v1_generated_FirestoreAdmin_UpdateDatabase_async\n   */\n  async checkUpdateDatabaseProgress(name) {\n    const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({\n      name\n    });\n    const [operation] = await this.operationsClient.getOperation(request);\n    const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateDatabase, this._gaxModule.createDefaultBackoffSettings());\n    return decodeOperation;\n  }\n  listIndexes(request, optionsOrCallback, callback) {\n    var _a;\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ''\n    });\n    this.initialize();\n    return this.innerApiCalls.listIndexes(request, options, callback);\n  }\n  /**\n   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. A parent name of the form\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n   * @param {string} request.filter\n   *   The filter to apply to list results.\n   * @param {number} request.pageSize\n   *   The number of results to return.\n   * @param {string} request.pageToken\n   *   A page token, returned from a previous call to\n   *   {@link google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes}, that may be used to get the next\n   *   page of results.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing {@link google.firestore.admin.v1.Index | Index} on 'data' event.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed. Note that it can affect your quota.\n   *   We recommend using `listIndexesAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n  listIndexesStream(request, options) {\n    var _a;\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ''\n    });\n    const defaultCallSettings = this._defaults['listIndexes'];\n    const callSettings = defaultCallSettings.merge(options);\n    this.initialize();\n    return this.descriptors.page.listIndexes.createStream(this.innerApiCalls.listIndexes, request, callSettings);\n  }\n  /**\n   * Equivalent to `listIndexes`, but returns an iterable object.\n   *\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. A parent name of the form\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n   * @param {string} request.filter\n   *   The filter to apply to list results.\n   * @param {number} request.pageSize\n   *   The number of results to return.\n   * @param {string} request.pageToken\n   *   A page token, returned from a previous call to\n   *   {@link google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes}, that may be used to get the next\n   *   page of results.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Object}\n   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n   *   When you iterate the returned iterable, each element will be an object representing\n   *   {@link google.firestore.admin.v1.Index | Index}. The API will be called under the hood as needed, once per the page,\n   *   so you can stop the iteration when you don't need more results.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   * @example <caption>include:samples/generated/v1/firestore_admin.list_indexes.js</caption>\n   * region_tag:firestore_v1_generated_FirestoreAdmin_ListIndexes_async\n   */\n  listIndexesAsync(request, options) {\n    var _a;\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ''\n    });\n    const defaultCallSettings = this._defaults['listIndexes'];\n    const callSettings = defaultCallSettings.merge(options);\n    this.initialize();\n    return this.descriptors.page.listIndexes.asyncIterate(this.innerApiCalls['listIndexes'], request, callSettings);\n  }\n  listFields(request, optionsOrCallback, callback) {\n    var _a;\n    request = request || {};\n    let options;\n    if (typeof optionsOrCallback === 'function' && callback === undefined) {\n      callback = optionsOrCallback;\n      options = {};\n    } else {\n      options = optionsOrCallback;\n    }\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ''\n    });\n    this.initialize();\n    return this.innerApiCalls.listFields(request, options, callback);\n  }\n  /**\n   * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. A parent name of the form\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n   * @param {string} request.filter\n   *   The filter to apply to list results. Currently,\n   *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\n   *   that have been explicitly overridden. To issue this query, call\n   *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with a filter that includes\n   *   `indexConfig.usesAncestorConfig:false` .\n   * @param {number} request.pageSize\n   *   The number of results to return.\n   * @param {string} request.pageToken\n   *   A page token, returned from a previous call to\n   *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}, that may be used to get the next\n   *   page of results.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Stream}\n   *   An object stream which emits an object representing {@link google.firestore.admin.v1.Field | Field} on 'data' event.\n   *   The client library will perform auto-pagination by default: it will call the API as many\n   *   times as needed. Note that it can affect your quota.\n   *   We recommend using `listFieldsAsync()`\n   *   method described below for async iteration which you can stop as needed.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   */\n  listFieldsStream(request, options) {\n    var _a;\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ''\n    });\n    const defaultCallSettings = this._defaults['listFields'];\n    const callSettings = defaultCallSettings.merge(options);\n    this.initialize();\n    return this.descriptors.page.listFields.createStream(this.innerApiCalls.listFields, request, callSettings);\n  }\n  /**\n   * Equivalent to `listFields`, but returns an iterable object.\n   *\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.parent\n   *   Required. A parent name of the form\n   *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n   * @param {string} request.filter\n   *   The filter to apply to list results. Currently,\n   *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\n   *   that have been explicitly overridden. To issue this query, call\n   *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with a filter that includes\n   *   `indexConfig.usesAncestorConfig:false` .\n   * @param {number} request.pageSize\n   *   The number of results to return.\n   * @param {string} request.pageToken\n   *   A page token, returned from a previous call to\n   *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}, that may be used to get the next\n   *   page of results.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Object}\n   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n   *   When you iterate the returned iterable, each element will be an object representing\n   *   {@link google.firestore.admin.v1.Field | Field}. The API will be called under the hood as needed, once per the page,\n   *   so you can stop the iteration when you don't need more results.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   * @example <caption>include:samples/generated/v1/firestore_admin.list_fields.js</caption>\n   * region_tag:firestore_v1_generated_FirestoreAdmin_ListFields_async\n   */\n  listFieldsAsync(request, options) {\n    var _a;\n    request = request || {};\n    options = options || {};\n    options.otherArgs = options.otherArgs || {};\n    options.otherArgs.headers = options.otherArgs.headers || {};\n    options.otherArgs.headers['x-goog-request-params'] = this._gaxModule.routingHeader.fromParams({\n      parent: (_a = request.parent) !== null && _a !== void 0 ? _a : ''\n    });\n    const defaultCallSettings = this._defaults['listFields'];\n    const callSettings = defaultCallSettings.merge(options);\n    this.initialize();\n    return this.descriptors.page.listFields.asyncIterate(this.innerApiCalls['listFields'], request, callSettings);\n  }\n  /**\n   * Gets information about a location.\n   *\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   Resource name for the location.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.\n   * @returns {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n   *   for more details and examples.\n   * @example\n   * ```\n   * const [response] = await client.getLocation(request);\n   * ```\n   */\n  getLocation(request, options, callback) {\n    return this.locationsClient.getLocation(request, options, callback);\n  }\n  /**\n   * Lists information about the supported locations for this service. Returns an iterable object.\n   *\n   * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n   * @param {Object} request\n   *   The request object that will be sent.\n   * @param {string} request.name\n   *   The resource that owns the locations collection, if applicable.\n   * @param {string} request.filter\n   *   The standard list filter.\n   * @param {number} request.pageSize\n   *   The standard list page size.\n   * @param {string} request.pageToken\n   *   The standard list page token.\n   * @param {object} [options]\n   *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n   * @returns {Object}\n   *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n   *   When you iterate the returned iterable, each element will be an object representing\n   *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,\n   *   so you can stop the iteration when you don't need more results.\n   *   Please see the\n   *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n   *   for more details and examples.\n   * @example\n   * ```\n   * const iterable = client.listLocationsAsync(request);\n   * for await (const response of iterable) {\n   *   // process response\n   * }\n   * ```\n   */\n  listLocationsAsync(request, options) {\n    return this.locationsClient.listLocationsAsync(request, options);\n  }\n  /**\n   * Gets the latest state of a long-running operation.  Clients can use this\n   * method to poll the operation result at intervals as recommended by the API\n   * service.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation resource.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   *   e.g, timeout, retries, paginations, etc. See {@link\n   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}\n   *   for the details.\n   * @param {function(?Error, ?Object)=} callback\n   *   The function which will be called with the result of the API call.\n   *\n   *   The second parameter to the callback is an object representing\n   *   {@link google.longrunning.Operation | google.longrunning.Operation}.\n   * @return {Promise} - The promise which resolves to an array.\n   *   The first element of the array is an object representing\n   * {@link google.longrunning.Operation | google.longrunning.Operation}.\n   * The promise has a method named \"cancel\" which cancels the ongoing API call.\n   *\n   * @example\n   * ```\n   * const client = longrunning.operationsClient();\n   * const name = '';\n   * const [response] = await client.getOperation({name});\n   * // doThingsWith(response)\n   * ```\n   */\n  getOperation(request, options, callback) {\n    return this.operationsClient.getOperation(request, options, callback);\n  }\n  /**\n   * Lists operations that match the specified filter in the request. If the\n   * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.\n   *\n   * For-await-of syntax is used with the iterable to recursively get response element on-demand.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation collection.\n   * @param {string} request.filter - The standard list filter.\n   * @param {number=} request.pageSize -\n   *   The maximum number of resources contained in the underlying API\n   *   response. If page streaming is performed per-resource, this\n   *   parameter does not affect the return value. If page streaming is\n   *   performed per-page, this determines the maximum number of\n   *   resources in a page.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   *   e.g, timeout, retries, paginations, etc. See {@link\n   *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the\n   *   details.\n   * @returns {Object}\n   *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.\n   *\n   * @example\n   * ```\n   * const client = longrunning.operationsClient();\n   * for await (const response of client.listOperationsAsync(request));\n   * // doThingsWith(response)\n   * ```\n   */\n  listOperationsAsync(request, options) {\n    return this.operationsClient.listOperationsAsync(request, options);\n  }\n  /**\n   * Starts asynchronous cancellation on a long-running operation.  The server\n   * makes a best effort to cancel the operation, but success is not\n   * guaranteed.  If the server doesn't support this method, it returns\n   * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use\n   * {@link Operations.GetOperation} or\n   * other methods to check whether the cancellation succeeded or whether the\n   * operation completed despite cancellation. On successful cancellation,\n   * the operation is not deleted; instead, it becomes an operation with\n   * an {@link Operation.error} value with a {@link google.rpc.Status.code} of\n   * 1, corresponding to `Code.CANCELLED`.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation resource to be cancelled.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   * e.g, timeout, retries, paginations, etc. See {@link\n   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the\n   * details.\n   * @param {function(?Error)=} callback\n   *   The function which will be called with the result of the API call.\n   * @return {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API\n   * call.\n   *\n   * @example\n   * ```\n   * const client = longrunning.operationsClient();\n   * await client.cancelOperation({name: ''});\n   * ```\n   */\n  cancelOperation(request, options, callback) {\n    return this.operationsClient.cancelOperation(request, options, callback);\n  }\n  /**\n   * Deletes a long-running operation. This method indicates that the client is\n   * no longer interested in the operation result. It does not cancel the\n   * operation. If the server doesn't support this method, it returns\n   * `google.rpc.Code.UNIMPLEMENTED`.\n   *\n   * @param {Object} request - The request object that will be sent.\n   * @param {string} request.name - The name of the operation resource to be deleted.\n   * @param {Object=} options\n   *   Optional parameters. You can override the default settings for this call,\n   * e.g, timeout, retries, paginations, etc. See {@link\n   * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}\n   * for the details.\n   * @param {function(?Error)=} callback\n   *   The function which will be called with the result of the API call.\n   * @return {Promise} - The promise which resolves when API call finishes.\n   *   The promise has a method named \"cancel\" which cancels the ongoing API\n   * call.\n   *\n   * @example\n   * ```\n   * const client = longrunning.operationsClient();\n   * await client.deleteOperation({name: ''});\n   * ```\n   */\n  deleteOperation(request, options, callback) {\n    return this.operationsClient.deleteOperation(request, options, callback);\n  }\n  // --------------------\n  // -- Path templates --\n  // --------------------\n  /**\n   * Return a fully-qualified collectionGroup resource name string.\n   *\n   * @param {string} project\n   * @param {string} database\n   * @param {string} collection\n   * @returns {string} Resource name string.\n   */\n  collectionGroupPath(project, database, collection) {\n    return this.pathTemplates.collectionGroupPathTemplate.render({\n      project: project,\n      database: database,\n      collection: collection\n    });\n  }\n  /**\n   * Parse the project from CollectionGroup resource.\n   *\n   * @param {string} collectionGroupName\n   *   A fully-qualified path representing CollectionGroup resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromCollectionGroupName(collectionGroupName) {\n    return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).project;\n  }\n  /**\n   * Parse the database from CollectionGroup resource.\n   *\n   * @param {string} collectionGroupName\n   *   A fully-qualified path representing CollectionGroup resource.\n   * @returns {string} A string representing the database.\n   */\n  matchDatabaseFromCollectionGroupName(collectionGroupName) {\n    return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).database;\n  }\n  /**\n   * Parse the collection from CollectionGroup resource.\n   *\n   * @param {string} collectionGroupName\n   *   A fully-qualified path representing CollectionGroup resource.\n   * @returns {string} A string representing the collection.\n   */\n  matchCollectionFromCollectionGroupName(collectionGroupName) {\n    return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).collection;\n  }\n  /**\n   * Return a fully-qualified database resource name string.\n   *\n   * @param {string} project\n   * @param {string} database\n   * @returns {string} Resource name string.\n   */\n  databasePath(project, database) {\n    return this.pathTemplates.databasePathTemplate.render({\n      project: project,\n      database: database\n    });\n  }\n  /**\n   * Parse the project from Database resource.\n   *\n   * @param {string} databaseName\n   *   A fully-qualified path representing Database resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromDatabaseName(databaseName) {\n    return this.pathTemplates.databasePathTemplate.match(databaseName).project;\n  }\n  /**\n   * Parse the database from Database resource.\n   *\n   * @param {string} databaseName\n   *   A fully-qualified path representing Database resource.\n   * @returns {string} A string representing the database.\n   */\n  matchDatabaseFromDatabaseName(databaseName) {\n    return this.pathTemplates.databasePathTemplate.match(databaseName).database;\n  }\n  /**\n   * Return a fully-qualified field resource name string.\n   *\n   * @param {string} project\n   * @param {string} database\n   * @param {string} collection\n   * @param {string} field\n   * @returns {string} Resource name string.\n   */\n  fieldPath(project, database, collection, field) {\n    return this.pathTemplates.fieldPathTemplate.render({\n      project: project,\n      database: database,\n      collection: collection,\n      field: field\n    });\n  }\n  /**\n   * Parse the project from Field resource.\n   *\n   * @param {string} fieldName\n   *   A fully-qualified path representing Field resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromFieldName(fieldName) {\n    return this.pathTemplates.fieldPathTemplate.match(fieldName).project;\n  }\n  /**\n   * Parse the database from Field resource.\n   *\n   * @param {string} fieldName\n   *   A fully-qualified path representing Field resource.\n   * @returns {string} A string representing the database.\n   */\n  matchDatabaseFromFieldName(fieldName) {\n    return this.pathTemplates.fieldPathTemplate.match(fieldName).database;\n  }\n  /**\n   * Parse the collection from Field resource.\n   *\n   * @param {string} fieldName\n   *   A fully-qualified path representing Field resource.\n   * @returns {string} A string representing the collection.\n   */\n  matchCollectionFromFieldName(fieldName) {\n    return this.pathTemplates.fieldPathTemplate.match(fieldName).collection;\n  }\n  /**\n   * Parse the field from Field resource.\n   *\n   * @param {string} fieldName\n   *   A fully-qualified path representing Field resource.\n   * @returns {string} A string representing the field.\n   */\n  matchFieldFromFieldName(fieldName) {\n    return this.pathTemplates.fieldPathTemplate.match(fieldName).field;\n  }\n  /**\n   * Return a fully-qualified index resource name string.\n   *\n   * @param {string} project\n   * @param {string} database\n   * @param {string} collection\n   * @param {string} index\n   * @returns {string} Resource name string.\n   */\n  indexPath(project, database, collection, index) {\n    return this.pathTemplates.indexPathTemplate.render({\n      project: project,\n      database: database,\n      collection: collection,\n      index: index\n    });\n  }\n  /**\n   * Parse the project from Index resource.\n   *\n   * @param {string} indexName\n   *   A fully-qualified path representing Index resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromIndexName(indexName) {\n    return this.pathTemplates.indexPathTemplate.match(indexName).project;\n  }\n  /**\n   * Parse the database from Index resource.\n   *\n   * @param {string} indexName\n   *   A fully-qualified path representing Index resource.\n   * @returns {string} A string representing the database.\n   */\n  matchDatabaseFromIndexName(indexName) {\n    return this.pathTemplates.indexPathTemplate.match(indexName).database;\n  }\n  /**\n   * Parse the collection from Index resource.\n   *\n   * @param {string} indexName\n   *   A fully-qualified path representing Index resource.\n   * @returns {string} A string representing the collection.\n   */\n  matchCollectionFromIndexName(indexName) {\n    return this.pathTemplates.indexPathTemplate.match(indexName).collection;\n  }\n  /**\n   * Parse the index from Index resource.\n   *\n   * @param {string} indexName\n   *   A fully-qualified path representing Index resource.\n   * @returns {string} A string representing the index.\n   */\n  matchIndexFromIndexName(indexName) {\n    return this.pathTemplates.indexPathTemplate.match(indexName).index;\n  }\n  /**\n   * Return a fully-qualified project resource name string.\n   *\n   * @param {string} project\n   * @returns {string} Resource name string.\n   */\n  projectPath(project) {\n    return this.pathTemplates.projectPathTemplate.render({\n      project: project\n    });\n  }\n  /**\n   * Parse the project from Project resource.\n   *\n   * @param {string} projectName\n   *   A fully-qualified path representing Project resource.\n   * @returns {string} A string representing the project.\n   */\n  matchProjectFromProjectName(projectName) {\n    return this.pathTemplates.projectPathTemplate.match(projectName).project;\n  }\n  /**\n   * Terminate the gRPC channel and close the client.\n   *\n   * The client will no longer be usable and all future behavior is undefined.\n   * @returns {Promise} A promise that resolves when the client is closed.\n   */\n  close() {\n    if (this.firestoreAdminStub && !this._terminated) {\n      return this.firestoreAdminStub.then(stub => {\n        this._terminated = true;\n        stub.close();\n        this.locationsClient.close();\n        this.operationsClient.close();\n      });\n    }\n    return Promise.resolve();\n  }\n}\nexports.FirestoreAdminClient = FirestoreAdminClient;","map":{"version":3,"names":["Object","defineProperty","exports","value","FirestoreAdminClient","jsonProtos","require","gapicConfig","version","constructor","opts","gaxInstance","_a","_b","_terminated","descriptors","page","stream","longrunning","batching","staticMembers","servicePath","apiEndpoint","_providedCustomServicePath","port","clientConfig","fallback","window","fetch","assign","numericEnums","scopes","_gaxModule","_gaxGrpc","GrpcClient","_opts","auth","useJWTAccessWithScope","defaultServicePath","defaultScopes","locationsClient","LocationsClient","clientHeader","process","push","versions","node","grpcVersion","libName","libVersion","_protos","loadProtoJSON","pathTemplates","collectionGroupPathTemplate","PathTemplate","databasePathTemplate","fieldPathTemplate","indexPathTemplate","projectPathTemplate","listIndexes","PageDescriptor","listFields","protoFilesRoot","protobuf","Root","fromJSON","lroOptions","grpc","undefined","protoJson","httpRules","selector","post","body","delete","get","operationsClient","lro","createIndexResponse","lookup","createIndexMetadata","updateFieldResponse","updateFieldMetadata","exportDocumentsResponse","exportDocumentsMetadata","importDocumentsResponse","importDocumentsMetadata","updateDatabaseResponse","updateDatabaseMetadata","createIndex","LongrunningDescriptor","decode","bind","updateField","exportDocuments","importDocuments","updateDatabase","_defaults","constructSettings","join","innerApiCalls","warn","initialize","_this","firestoreAdminStub","createStub","lookupService","google","firestore","admin","v1","FirestoreAdmin","firestoreAdminStubMethods","methodName","callPromise","then","stub","Promise","reject","func","_len","arguments","length","args","Array","_key","apply","err","descriptor","apiCall","createApiCall","getProjectId","callback","getIndex","request","optionsOrCallback","options","otherArgs","headers","routingHeader","fromParams","name","deleteIndex","getField","getDatabase","listDatabases","parent","checkCreateIndexProgress","operationsProtos","GetOperationRequest","operation","getOperation","decodeOperation","Operation","createDefaultBackoffSettings","field","checkUpdateFieldProgress","checkExportDocumentsProgress","checkImportDocumentsProgress","database","checkUpdateDatabaseProgress","listIndexesStream","defaultCallSettings","callSettings","merge","createStream","listIndexesAsync","asyncIterate","listFieldsStream","listFieldsAsync","getLocation","listLocationsAsync","listOperationsAsync","cancelOperation","deleteOperation","collectionGroupPath","project","collection","render","matchProjectFromCollectionGroupName","collectionGroupName","match","matchDatabaseFromCollectionGroupName","matchCollectionFromCollectionGroupName","databasePath","matchProjectFromDatabaseName","databaseName","matchDatabaseFromDatabaseName","fieldPath","matchProjectFromFieldName","fieldName","matchDatabaseFromFieldName","matchCollectionFromFieldName","matchFieldFromFieldName","indexPath","index","matchProjectFromIndexName","indexName","matchDatabaseFromIndexName","matchCollectionFromIndexName","matchIndexFromIndexName","projectPath","matchProjectFromProjectName","projectName","close","resolve"],"sources":["D:/Coding/React/taskmybusiness/node_modules/@google-cloud/firestore/build/src/v1/firestore_admin_client.js"],"sourcesContent":["\"use strict\";\n// Copyright 2023 Google LLC\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//     https://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n//\n// ** This file is automatically generated by gapic-generator-typescript. **\n// ** https://github.com/googleapis/gapic-generator-typescript **\n// ** All changes to this file may be overwritten. **\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.FirestoreAdminClient = void 0;\nconst jsonProtos = require(\"../../protos/admin_v1.json\");\n/**\n * Client JSON configuration object, loaded from\n * `src/v1/firestore_admin_client_config.json`.\n * This file defines retry strategy and timeouts for all API methods in this library.\n */\nconst gapicConfig = require(\"./firestore_admin_client_config.json\");\nconst version = require('../../../package.json').version;\n/**\n *  The Cloud Firestore Admin API.\n *\n *  This API provides several administrative services for Cloud Firestore.\n *\n *  Project, Database, Namespace, Collection, Collection Group, and Document are\n *  used as defined in the Google Cloud Firestore API.\n *\n *  Operation: An Operation represents work being performed in the background.\n *\n *  The index service manages Cloud Firestore indexes.\n *\n *  Index creation is performed asynchronously.\n *  An Operation resource is created for each such asynchronous operation.\n *  The state of the operation (including any errors encountered)\n *  may be queried via the Operation resource.\n *\n *  The Operations collection provides a record of actions performed for the\n *  specified Project (including any Operations in progress). Operations are not\n *  created directly but through calls on other collections or resources.\n *\n *  An Operation that is done may be deleted so that it is no longer listed as\n *  part of the Operation collection. Operations are garbage collected after\n *  30 days. By default, ListOperations will only return in progress and failed\n *  operations. To list completed operation, issue a ListOperations request with\n *  the filter `done: true`.\n *\n *  Operations are created by service `FirestoreAdmin`, but are accessed via\n *  service `google.longrunning.Operations`.\n * @class\n * @memberof v1\n */\nclass FirestoreAdminClient {\n    /**\n     * Construct an instance of FirestoreAdminClient.\n     *\n     * @param {object} [options] - The configuration object.\n     * The options accepted by the constructor are described in detail\n     * in [this document](https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#creating-the-client-instance).\n     * The common options are:\n     * @param {object} [options.credentials] - Credentials object.\n     * @param {string} [options.credentials.client_email]\n     * @param {string} [options.credentials.private_key]\n     * @param {string} [options.email] - Account email address. Required when\n     *     using a .pem or .p12 keyFilename.\n     * @param {string} [options.keyFilename] - Full path to the a .json, .pem, or\n     *     .p12 key downloaded from the Google Developers Console. If you provide\n     *     a path to a JSON file, the projectId option below is not necessary.\n     *     NOTE: .pem and .p12 require you to specify options.email as well.\n     * @param {number} [options.port] - The port on which to connect to\n     *     the remote host.\n     * @param {string} [options.projectId] - The project ID from the Google\n     *     Developer's Console, e.g. 'grape-spaceship-123'. We will also check\n     *     the environment variable GCLOUD_PROJECT for your project ID. If your\n     *     app is running in an environment which supports\n     *     {@link https://developers.google.com/identity/protocols/application-default-credentials Application Default Credentials},\n     *     your project ID will be detected automatically.\n     * @param {string} [options.apiEndpoint] - The domain name of the\n     *     API remote host.\n     * @param {gax.ClientConfig} [options.clientConfig] - Client configuration override.\n     *     Follows the structure of {@link gapicConfig}.\n     * @param {boolean | \"rest\"} [options.fallback] - Use HTTP fallback mode.\n     *     Pass \"rest\" to use HTTP/1.1 REST API instead of gRPC.\n     *     For more information, please check the\n     *     {@link https://github.com/googleapis/gax-nodejs/blob/main/client-libraries.md#http11-rest-api-mode documentation}.\n     * @param {gax} [gaxInstance]: loaded instance of `google-gax`. Useful if you\n     *     need to avoid loading the default gRPC version and want to use the fallback\n     *     HTTP implementation. Load only fallback version and pass it to the constructor:\n     *     ```\n     *     const gax = require('google-gax/build/src/fallback'); // avoids loading google-gax with gRPC\n     *     const client = new FirestoreAdminClient({fallback: 'rest'}, gax);\n     *     ```\n     */\n    constructor(opts, gaxInstance) {\n        var _a, _b;\n        this._terminated = false;\n        this.descriptors = {\n            page: {},\n            stream: {},\n            longrunning: {},\n            batching: {},\n        };\n        // Ensure that options include all the required fields.\n        const staticMembers = this.constructor;\n        const servicePath = (opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint) || staticMembers.servicePath;\n        this._providedCustomServicePath = !!((opts === null || opts === void 0 ? void 0 : opts.servicePath) || (opts === null || opts === void 0 ? void 0 : opts.apiEndpoint));\n        const port = (opts === null || opts === void 0 ? void 0 : opts.port) || staticMembers.port;\n        const clientConfig = (_a = opts === null || opts === void 0 ? void 0 : opts.clientConfig) !== null && _a !== void 0 ? _a : {};\n        const fallback = (_b = opts === null || opts === void 0 ? void 0 : opts.fallback) !== null && _b !== void 0 ? _b : (typeof window !== 'undefined' && typeof (window === null || window === void 0 ? void 0 : window.fetch) === 'function');\n        opts = Object.assign({ servicePath, port, clientConfig, fallback }, opts);\n        // Request numeric enum values if REST transport is used.\n        opts.numericEnums = true;\n        // If scopes are unset in options and we're connecting to a non-default endpoint, set scopes just in case.\n        if (servicePath !== staticMembers.servicePath && !('scopes' in opts)) {\n            opts['scopes'] = staticMembers.scopes;\n        }\n        // Load google-gax module synchronously if needed\n        if (!gaxInstance) {\n            gaxInstance = require('google-gax');\n        }\n        // Choose either gRPC or proto-over-HTTP implementation of google-gax.\n        this._gaxModule = opts.fallback ? gaxInstance.fallback : gaxInstance;\n        // Create a `gaxGrpc` object, with any grpc-specific options sent to the client.\n        this._gaxGrpc = new this._gaxModule.GrpcClient(opts);\n        // Save options to use in initialize() method.\n        this._opts = opts;\n        // Save the auth object to the client, for use by other methods.\n        this.auth = this._gaxGrpc.auth;\n        // Set useJWTAccessWithScope on the auth object.\n        this.auth.useJWTAccessWithScope = true;\n        // Set defaultServicePath on the auth object.\n        this.auth.defaultServicePath = staticMembers.servicePath;\n        // Set the default scopes in auth client if needed.\n        if (servicePath === staticMembers.servicePath) {\n            this.auth.defaultScopes = staticMembers.scopes;\n        }\n        this.locationsClient = new this._gaxModule.LocationsClient(this._gaxGrpc, opts);\n        // Determine the client header string.\n        const clientHeader = [`gax/${this._gaxModule.version}`, `gapic/${version}`];\n        if (typeof process !== 'undefined' && 'versions' in process) {\n            clientHeader.push(`gl-node/${process.versions.node}`);\n        }\n        else {\n            clientHeader.push(`gl-web/${this._gaxModule.version}`);\n        }\n        if (!opts.fallback) {\n            clientHeader.push(`grpc/${this._gaxGrpc.grpcVersion}`);\n        }\n        else if (opts.fallback === 'rest') {\n            clientHeader.push(`rest/${this._gaxGrpc.grpcVersion}`);\n        }\n        if (opts.libName && opts.libVersion) {\n            clientHeader.push(`${opts.libName}/${opts.libVersion}`);\n        }\n        // Load the applicable protos.\n        this._protos = this._gaxGrpc.loadProtoJSON(jsonProtos);\n        // This API contains \"path templates\"; forward-slash-separated\n        // identifiers to uniquely identify resources within the API.\n        // Create useful helper objects for these.\n        this.pathTemplates = {\n            collectionGroupPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}'),\n            databasePathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}'),\n            fieldPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}/fields/{field}'),\n            indexPathTemplate: new this._gaxModule.PathTemplate('projects/{project}/databases/{database}/collectionGroups/{collection}/indexes/{index}'),\n            projectPathTemplate: new this._gaxModule.PathTemplate('projects/{project}'),\n        };\n        // Some of the methods on this service return \"paged\" results,\n        // (e.g. 50 results at a time, with tokens to get subsequent\n        // pages). Denote the keys used for pagination and results.\n        this.descriptors.page = {\n            listIndexes: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'indexes'),\n            listFields: new this._gaxModule.PageDescriptor('pageToken', 'nextPageToken', 'fields'),\n        };\n        const protoFilesRoot = this._gaxModule.protobuf.Root.fromJSON(jsonProtos);\n        // This API contains \"long-running operations\", which return a\n        // an Operation object that allows for tracking of the operation,\n        // rather than holding a request open.\n        const lroOptions = {\n            auth: this.auth,\n            grpc: 'grpc' in this._gaxGrpc ? this._gaxGrpc.grpc : undefined,\n        };\n        if (opts.fallback === 'rest') {\n            lroOptions.protoJson = protoFilesRoot;\n            lroOptions.httpRules = [\n                {\n                    selector: 'google.longrunning.Operations.CancelOperation',\n                    post: '/v1/{name=projects/*/databases/*/operations/*}:cancel',\n                    body: '*',\n                },\n                {\n                    selector: 'google.longrunning.Operations.DeleteOperation',\n                    delete: '/v1/{name=projects/*/databases/*/operations/*}',\n                },\n                {\n                    selector: 'google.longrunning.Operations.GetOperation',\n                    get: '/v1/{name=projects/*/databases/*/operations/*}',\n                },\n                {\n                    selector: 'google.longrunning.Operations.ListOperations',\n                    get: '/v1/{name=projects/*/databases/*}/operations',\n                },\n            ];\n        }\n        this.operationsClient = this._gaxModule\n            .lro(lroOptions)\n            .operationsClient(opts);\n        const createIndexResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Index');\n        const createIndexMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.IndexOperationMetadata');\n        const updateFieldResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Field');\n        const updateFieldMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.FieldOperationMetadata');\n        const exportDocumentsResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.ExportDocumentsResponse');\n        const exportDocumentsMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.ExportDocumentsMetadata');\n        const importDocumentsResponse = protoFilesRoot.lookup('.google.protobuf.Empty');\n        const importDocumentsMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.ImportDocumentsMetadata');\n        const updateDatabaseResponse = protoFilesRoot.lookup('.google.firestore.admin.v1.Database');\n        const updateDatabaseMetadata = protoFilesRoot.lookup('.google.firestore.admin.v1.UpdateDatabaseMetadata');\n        this.descriptors.longrunning = {\n            createIndex: new this._gaxModule.LongrunningDescriptor(this.operationsClient, createIndexResponse.decode.bind(createIndexResponse), createIndexMetadata.decode.bind(createIndexMetadata)),\n            updateField: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateFieldResponse.decode.bind(updateFieldResponse), updateFieldMetadata.decode.bind(updateFieldMetadata)),\n            exportDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, exportDocumentsResponse.decode.bind(exportDocumentsResponse), exportDocumentsMetadata.decode.bind(exportDocumentsMetadata)),\n            importDocuments: new this._gaxModule.LongrunningDescriptor(this.operationsClient, importDocumentsResponse.decode.bind(importDocumentsResponse), importDocumentsMetadata.decode.bind(importDocumentsMetadata)),\n            updateDatabase: new this._gaxModule.LongrunningDescriptor(this.operationsClient, updateDatabaseResponse.decode.bind(updateDatabaseResponse), updateDatabaseMetadata.decode.bind(updateDatabaseMetadata)),\n        };\n        // Put together the default options sent with requests.\n        this._defaults = this._gaxGrpc.constructSettings('google.firestore.admin.v1.FirestoreAdmin', gapicConfig, opts.clientConfig || {}, { 'x-goog-api-client': clientHeader.join(' ') });\n        // Set up a dictionary of \"inner API calls\"; the core implementation\n        // of calling the API is handled in `google-gax`, with this code\n        // merely providing the destination and request information.\n        this.innerApiCalls = {};\n        // Add a warn function to the client constructor so it can be easily tested.\n        this.warn = this._gaxModule.warn;\n    }\n    /**\n     * Initialize the client.\n     * Performs asynchronous operations (such as authentication) and prepares the client.\n     * This function will be called automatically when any class method is called for the\n     * first time, but if you need to initialize it before calling an actual method,\n     * feel free to call initialize() directly.\n     *\n     * You can await on this method if you want to make sure the client is initialized.\n     *\n     * @returns {Promise} A promise that resolves to an authenticated service stub.\n     */\n    initialize() {\n        // If the client stub promise is already initialized, return immediately.\n        if (this.firestoreAdminStub) {\n            return this.firestoreAdminStub;\n        }\n        // Put together the \"service stub\" for\n        // google.firestore.admin.v1.FirestoreAdmin.\n        this.firestoreAdminStub = this._gaxGrpc.createStub(this._opts.fallback\n            ? this._protos.lookupService('google.firestore.admin.v1.FirestoreAdmin')\n            : // eslint-disable-next-line @typescript-eslint/no-explicit-any\n                this._protos.google.firestore.admin.v1.FirestoreAdmin, this._opts, this._providedCustomServicePath);\n        // Iterate over each of the methods that the service provides\n        // and create an API call method for each.\n        const firestoreAdminStubMethods = [\n            'createIndex',\n            'listIndexes',\n            'getIndex',\n            'deleteIndex',\n            'getField',\n            'updateField',\n            'listFields',\n            'exportDocuments',\n            'importDocuments',\n            'getDatabase',\n            'listDatabases',\n            'updateDatabase',\n        ];\n        for (const methodName of firestoreAdminStubMethods) {\n            const callPromise = this.firestoreAdminStub.then(stub => (...args) => {\n                if (this._terminated) {\n                    return Promise.reject('The client has already been closed.');\n                }\n                const func = stub[methodName];\n                return func.apply(stub, args);\n            }, (err) => () => {\n                throw err;\n            });\n            const descriptor = this.descriptors.page[methodName] ||\n                this.descriptors.longrunning[methodName] ||\n                undefined;\n            const apiCall = this._gaxModule.createApiCall(callPromise, this._defaults[methodName], descriptor, this._opts.fallback);\n            this.innerApiCalls[methodName] = apiCall;\n        }\n        return this.firestoreAdminStub;\n    }\n    /**\n     * The DNS address for this API service.\n     * @returns {string} The DNS address for this service.\n     */\n    static get servicePath() {\n        return 'firestore.googleapis.com';\n    }\n    /**\n     * The DNS address for this API service - same as servicePath(),\n     * exists for compatibility reasons.\n     * @returns {string} The DNS address for this service.\n     */\n    static get apiEndpoint() {\n        return 'firestore.googleapis.com';\n    }\n    /**\n     * The port for this API service.\n     * @returns {number} The default port for this service.\n     */\n    static get port() {\n        return 443;\n    }\n    /**\n     * The scopes needed to make gRPC calls for every method defined\n     * in this service.\n     * @returns {string[]} List of default scopes.\n     */\n    static get scopes() {\n        return [\n            'https://www.googleapis.com/auth/cloud-platform',\n            'https://www.googleapis.com/auth/datastore',\n        ];\n    }\n    /**\n     * Return the project ID used by this class.\n     * @returns {Promise} A promise that resolves to string containing the project ID.\n     */\n    getProjectId(callback) {\n        if (callback) {\n            this.auth.getProjectId(callback);\n            return;\n        }\n        return this.auth.getProjectId();\n    }\n    getIndex(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.getIndex(request, options, callback);\n    }\n    deleteIndex(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.deleteIndex(request, options, callback);\n    }\n    getField(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.getField(request, options, callback);\n    }\n    getDatabase(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.getDatabase(request, options, callback);\n    }\n    listDatabases(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.listDatabases(request, options, callback);\n    }\n    createIndex(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.createIndex(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `createIndex()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.create_index.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_CreateIndex_async\n     */\n    async checkCreateIndexProgress(name) {\n        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.createIndex, this._gaxModule.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    updateField(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                'field.name': (_a = request.field.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.updateField(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `updateField()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.update_field.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_UpdateField_async\n     */\n    async checkUpdateFieldProgress(name) {\n        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateField, this._gaxModule.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    exportDocuments(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.exportDocuments(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `exportDocuments()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.export_documents.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_ExportDocuments_async\n     */\n    async checkExportDocumentsProgress(name) {\n        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.exportDocuments, this._gaxModule.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    importDocuments(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                name: (_a = request.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.importDocuments(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `importDocuments()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.import_documents.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_ImportDocuments_async\n     */\n    async checkImportDocumentsProgress(name) {\n        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.importDocuments, this._gaxModule.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    updateDatabase(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                'database.name': (_a = request.database.name) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.updateDatabase(request, options, callback);\n    }\n    /**\n     * Check the status of the long running operation returned by `updateDatabase()`.\n     * @param {String} name\n     *   The operation name that will be passed.\n     * @returns {Promise} - The promise which resolves to an object.\n     *   The decoded operation object has result and metadata field to get information from.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#long-running-operations)\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.update_database.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_UpdateDatabase_async\n     */\n    async checkUpdateDatabaseProgress(name) {\n        const request = new this._gaxModule.operationsProtos.google.longrunning.GetOperationRequest({ name });\n        const [operation] = await this.operationsClient.getOperation(request);\n        const decodeOperation = new this._gaxModule.Operation(operation, this.descriptors.longrunning.updateDatabase, this._gaxModule.createDefaultBackoffSettings());\n        return decodeOperation;\n    }\n    listIndexes(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.listIndexes(request, options, callback);\n    }\n    /**\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes}, that may be used to get the next\n     *   page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing {@link google.firestore.admin.v1.Index | Index} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listIndexesAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listIndexesStream(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        const defaultCallSettings = this._defaults['listIndexes'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listIndexes.createStream(this.innerApiCalls.listIndexes, request, callSettings);\n    }\n    /**\n     * Equivalent to `listIndexes`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results.\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListIndexes|FirestoreAdmin.ListIndexes}, that may be used to get the next\n     *   page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   {@link google.firestore.admin.v1.Index | Index}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.list_indexes.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_ListIndexes_async\n     */\n    listIndexesAsync(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        const defaultCallSettings = this._defaults['listIndexes'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listIndexes.asyncIterate(this.innerApiCalls['listIndexes'], request, callSettings);\n    }\n    listFields(request, optionsOrCallback, callback) {\n        var _a;\n        request = request || {};\n        let options;\n        if (typeof optionsOrCallback === 'function' && callback === undefined) {\n            callback = optionsOrCallback;\n            options = {};\n        }\n        else {\n            options = optionsOrCallback;\n        }\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        this.initialize();\n        return this.innerApiCalls.listFields(request, options, callback);\n    }\n    /**\n     * Equivalent to `method.name.toCamelCase()`, but returns a NodeJS Stream object.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results. Currently,\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\n     *   that have been explicitly overridden. To issue this query, call\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with a filter that includes\n     *   `indexConfig.usesAncestorConfig:false` .\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}, that may be used to get the next\n     *   page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Stream}\n     *   An object stream which emits an object representing {@link google.firestore.admin.v1.Field | Field} on 'data' event.\n     *   The client library will perform auto-pagination by default: it will call the API as many\n     *   times as needed. Note that it can affect your quota.\n     *   We recommend using `listFieldsAsync()`\n     *   method described below for async iteration which you can stop as needed.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     */\n    listFieldsStream(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        const defaultCallSettings = this._defaults['listFields'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listFields.createStream(this.innerApiCalls.listFields, request, callSettings);\n    }\n    /**\n     * Equivalent to `listFields`, but returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.parent\n     *   Required. A parent name of the form\n     *   `projects/{project_id}/databases/{database_id}/collectionGroups/{collection_id}`\n     * @param {string} request.filter\n     *   The filter to apply to list results. Currently,\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} only supports listing fields\n     *   that have been explicitly overridden. To issue this query, call\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields} with a filter that includes\n     *   `indexConfig.usesAncestorConfig:false` .\n     * @param {number} request.pageSize\n     *   The number of results to return.\n     * @param {string} request.pageToken\n     *   A page token, returned from a previous call to\n     *   {@link google.firestore.admin.v1.FirestoreAdmin.ListFields|FirestoreAdmin.ListFields}, that may be used to get the next\n     *   page of results.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   {@link google.firestore.admin.v1.Field | Field}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     * @example <caption>include:samples/generated/v1/firestore_admin.list_fields.js</caption>\n     * region_tag:firestore_v1_generated_FirestoreAdmin_ListFields_async\n     */\n    listFieldsAsync(request, options) {\n        var _a;\n        request = request || {};\n        options = options || {};\n        options.otherArgs = options.otherArgs || {};\n        options.otherArgs.headers = options.otherArgs.headers || {};\n        options.otherArgs.headers['x-goog-request-params'] =\n            this._gaxModule.routingHeader.fromParams({\n                parent: (_a = request.parent) !== null && _a !== void 0 ? _a : '',\n            });\n        const defaultCallSettings = this._defaults['listFields'];\n        const callSettings = defaultCallSettings.merge(options);\n        this.initialize();\n        return this.descriptors.page.listFields.asyncIterate(this.innerApiCalls['listFields'], request, callSettings);\n    }\n    /**\n     * Gets information about a location.\n     *\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   Resource name for the location.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html | CallOptions} for more details.\n     * @returns {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing {@link google.cloud.location.Location | Location}.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#regular-methods)\n     *   for more details and examples.\n     * @example\n     * ```\n     * const [response] = await client.getLocation(request);\n     * ```\n     */\n    getLocation(request, options, callback) {\n        return this.locationsClient.getLocation(request, options, callback);\n    }\n    /**\n     * Lists information about the supported locations for this service. Returns an iterable object.\n     *\n     * `for`-`await`-`of` syntax is used with the iterable to get response elements on-demand.\n     * @param {Object} request\n     *   The request object that will be sent.\n     * @param {string} request.name\n     *   The resource that owns the locations collection, if applicable.\n     * @param {string} request.filter\n     *   The standard list filter.\n     * @param {number} request.pageSize\n     *   The standard list page size.\n     * @param {string} request.pageToken\n     *   The standard list page token.\n     * @param {object} [options]\n     *   Call options. See {@link https://googleapis.dev/nodejs/google-gax/latest/interfaces/CallOptions.html|CallOptions} for more details.\n     * @returns {Object}\n     *   An iterable Object that allows [async iteration](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols).\n     *   When you iterate the returned iterable, each element will be an object representing\n     *   {@link google.cloud.location.Location | Location}. The API will be called under the hood as needed, once per the page,\n     *   so you can stop the iteration when you don't need more results.\n     *   Please see the\n     *   [documentation](https://github.com/googleapis/gax-nodejs/blob/master/client-libraries.md#auto-pagination)\n     *   for more details and examples.\n     * @example\n     * ```\n     * const iterable = client.listLocationsAsync(request);\n     * for await (const response of iterable) {\n     *   // process response\n     * }\n     * ```\n     */\n    listLocationsAsync(request, options) {\n        return this.locationsClient.listLocationsAsync(request, options);\n    }\n    /**\n     * Gets the latest state of a long-running operation.  Clients can use this\n     * method to poll the operation result at intervals as recommended by the API\n     * service.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See {@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}\n     *   for the details.\n     * @param {function(?Error, ?Object)=} callback\n     *   The function which will be called with the result of the API call.\n     *\n     *   The second parameter to the callback is an object representing\n     *   {@link google.longrunning.Operation | google.longrunning.Operation}.\n     * @return {Promise} - The promise which resolves to an array.\n     *   The first element of the array is an object representing\n     * {@link google.longrunning.Operation | google.longrunning.Operation}.\n     * The promise has a method named \"cancel\" which cancels the ongoing API call.\n     *\n     * @example\n     * ```\n     * const client = longrunning.operationsClient();\n     * const name = '';\n     * const [response] = await client.getOperation({name});\n     * // doThingsWith(response)\n     * ```\n     */\n    getOperation(request, options, callback) {\n        return this.operationsClient.getOperation(request, options, callback);\n    }\n    /**\n     * Lists operations that match the specified filter in the request. If the\n     * server doesn't support this method, it returns `UNIMPLEMENTED`. Returns an iterable object.\n     *\n     * For-await-of syntax is used with the iterable to recursively get response element on-demand.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation collection.\n     * @param {string} request.filter - The standard list filter.\n     * @param {number=} request.pageSize -\n     *   The maximum number of resources contained in the underlying API\n     *   response. If page streaming is performed per-resource, this\n     *   parameter does not affect the return value. If page streaming is\n     *   performed per-page, this determines the maximum number of\n     *   resources in a page.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     *   e.g, timeout, retries, paginations, etc. See {@link\n     *   https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the\n     *   details.\n     * @returns {Object}\n     *   An iterable Object that conforms to {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols | iteration protocols}.\n     *\n     * @example\n     * ```\n     * const client = longrunning.operationsClient();\n     * for await (const response of client.listOperationsAsync(request));\n     * // doThingsWith(response)\n     * ```\n     */\n    listOperationsAsync(request, options) {\n        return this.operationsClient.listOperationsAsync(request, options);\n    }\n    /**\n     * Starts asynchronous cancellation on a long-running operation.  The server\n     * makes a best effort to cancel the operation, but success is not\n     * guaranteed.  If the server doesn't support this method, it returns\n     * `google.rpc.Code.UNIMPLEMENTED`.  Clients can use\n     * {@link Operations.GetOperation} or\n     * other methods to check whether the cancellation succeeded or whether the\n     * operation completed despite cancellation. On successful cancellation,\n     * the operation is not deleted; instead, it becomes an operation with\n     * an {@link Operation.error} value with a {@link google.rpc.Status.code} of\n     * 1, corresponding to `Code.CANCELLED`.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource to be cancelled.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See {@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions} for the\n     * details.\n     * @param {function(?Error)=} callback\n     *   The function which will be called with the result of the API call.\n     * @return {Promise} - The promise which resolves when API call finishes.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     * ```\n     * const client = longrunning.operationsClient();\n     * await client.cancelOperation({name: ''});\n     * ```\n     */\n    cancelOperation(request, options, callback) {\n        return this.operationsClient.cancelOperation(request, options, callback);\n    }\n    /**\n     * Deletes a long-running operation. This method indicates that the client is\n     * no longer interested in the operation result. It does not cancel the\n     * operation. If the server doesn't support this method, it returns\n     * `google.rpc.Code.UNIMPLEMENTED`.\n     *\n     * @param {Object} request - The request object that will be sent.\n     * @param {string} request.name - The name of the operation resource to be deleted.\n     * @param {Object=} options\n     *   Optional parameters. You can override the default settings for this call,\n     * e.g, timeout, retries, paginations, etc. See {@link\n     * https://googleapis.github.io/gax-nodejs/global.html#CallOptions | gax.CallOptions}\n     * for the details.\n     * @param {function(?Error)=} callback\n     *   The function which will be called with the result of the API call.\n     * @return {Promise} - The promise which resolves when API call finishes.\n     *   The promise has a method named \"cancel\" which cancels the ongoing API\n     * call.\n     *\n     * @example\n     * ```\n     * const client = longrunning.operationsClient();\n     * await client.deleteOperation({name: ''});\n     * ```\n     */\n    deleteOperation(request, options, callback) {\n        return this.operationsClient.deleteOperation(request, options, callback);\n    }\n    // --------------------\n    // -- Path templates --\n    // --------------------\n    /**\n     * Return a fully-qualified collectionGroup resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @param {string} collection\n     * @returns {string} Resource name string.\n     */\n    collectionGroupPath(project, database, collection) {\n        return this.pathTemplates.collectionGroupPathTemplate.render({\n            project: project,\n            database: database,\n            collection: collection,\n        });\n    }\n    /**\n     * Parse the project from CollectionGroup resource.\n     *\n     * @param {string} collectionGroupName\n     *   A fully-qualified path representing CollectionGroup resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromCollectionGroupName(collectionGroupName) {\n        return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).project;\n    }\n    /**\n     * Parse the database from CollectionGroup resource.\n     *\n     * @param {string} collectionGroupName\n     *   A fully-qualified path representing CollectionGroup resource.\n     * @returns {string} A string representing the database.\n     */\n    matchDatabaseFromCollectionGroupName(collectionGroupName) {\n        return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).database;\n    }\n    /**\n     * Parse the collection from CollectionGroup resource.\n     *\n     * @param {string} collectionGroupName\n     *   A fully-qualified path representing CollectionGroup resource.\n     * @returns {string} A string representing the collection.\n     */\n    matchCollectionFromCollectionGroupName(collectionGroupName) {\n        return this.pathTemplates.collectionGroupPathTemplate.match(collectionGroupName).collection;\n    }\n    /**\n     * Return a fully-qualified database resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @returns {string} Resource name string.\n     */\n    databasePath(project, database) {\n        return this.pathTemplates.databasePathTemplate.render({\n            project: project,\n            database: database,\n        });\n    }\n    /**\n     * Parse the project from Database resource.\n     *\n     * @param {string} databaseName\n     *   A fully-qualified path representing Database resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromDatabaseName(databaseName) {\n        return this.pathTemplates.databasePathTemplate.match(databaseName).project;\n    }\n    /**\n     * Parse the database from Database resource.\n     *\n     * @param {string} databaseName\n     *   A fully-qualified path representing Database resource.\n     * @returns {string} A string representing the database.\n     */\n    matchDatabaseFromDatabaseName(databaseName) {\n        return this.pathTemplates.databasePathTemplate.match(databaseName).database;\n    }\n    /**\n     * Return a fully-qualified field resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @param {string} collection\n     * @param {string} field\n     * @returns {string} Resource name string.\n     */\n    fieldPath(project, database, collection, field) {\n        return this.pathTemplates.fieldPathTemplate.render({\n            project: project,\n            database: database,\n            collection: collection,\n            field: field,\n        });\n    }\n    /**\n     * Parse the project from Field resource.\n     *\n     * @param {string} fieldName\n     *   A fully-qualified path representing Field resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromFieldName(fieldName) {\n        return this.pathTemplates.fieldPathTemplate.match(fieldName).project;\n    }\n    /**\n     * Parse the database from Field resource.\n     *\n     * @param {string} fieldName\n     *   A fully-qualified path representing Field resource.\n     * @returns {string} A string representing the database.\n     */\n    matchDatabaseFromFieldName(fieldName) {\n        return this.pathTemplates.fieldPathTemplate.match(fieldName).database;\n    }\n    /**\n     * Parse the collection from Field resource.\n     *\n     * @param {string} fieldName\n     *   A fully-qualified path representing Field resource.\n     * @returns {string} A string representing the collection.\n     */\n    matchCollectionFromFieldName(fieldName) {\n        return this.pathTemplates.fieldPathTemplate.match(fieldName).collection;\n    }\n    /**\n     * Parse the field from Field resource.\n     *\n     * @param {string} fieldName\n     *   A fully-qualified path representing Field resource.\n     * @returns {string} A string representing the field.\n     */\n    matchFieldFromFieldName(fieldName) {\n        return this.pathTemplates.fieldPathTemplate.match(fieldName).field;\n    }\n    /**\n     * Return a fully-qualified index resource name string.\n     *\n     * @param {string} project\n     * @param {string} database\n     * @param {string} collection\n     * @param {string} index\n     * @returns {string} Resource name string.\n     */\n    indexPath(project, database, collection, index) {\n        return this.pathTemplates.indexPathTemplate.render({\n            project: project,\n            database: database,\n            collection: collection,\n            index: index,\n        });\n    }\n    /**\n     * Parse the project from Index resource.\n     *\n     * @param {string} indexName\n     *   A fully-qualified path representing Index resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromIndexName(indexName) {\n        return this.pathTemplates.indexPathTemplate.match(indexName).project;\n    }\n    /**\n     * Parse the database from Index resource.\n     *\n     * @param {string} indexName\n     *   A fully-qualified path representing Index resource.\n     * @returns {string} A string representing the database.\n     */\n    matchDatabaseFromIndexName(indexName) {\n        return this.pathTemplates.indexPathTemplate.match(indexName).database;\n    }\n    /**\n     * Parse the collection from Index resource.\n     *\n     * @param {string} indexName\n     *   A fully-qualified path representing Index resource.\n     * @returns {string} A string representing the collection.\n     */\n    matchCollectionFromIndexName(indexName) {\n        return this.pathTemplates.indexPathTemplate.match(indexName).collection;\n    }\n    /**\n     * Parse the index from Index resource.\n     *\n     * @param {string} indexName\n     *   A fully-qualified path representing Index resource.\n     * @returns {string} A string representing the index.\n     */\n    matchIndexFromIndexName(indexName) {\n        return this.pathTemplates.indexPathTemplate.match(indexName).index;\n    }\n    /**\n     * Return a fully-qualified project resource name string.\n     *\n     * @param {string} project\n     * @returns {string} Resource name string.\n     */\n    projectPath(project) {\n        return this.pathTemplates.projectPathTemplate.render({\n            project: project,\n        });\n    }\n    /**\n     * Parse the project from Project resource.\n     *\n     * @param {string} projectName\n     *   A fully-qualified path representing Project resource.\n     * @returns {string} A string representing the project.\n     */\n    matchProjectFromProjectName(projectName) {\n        return this.pathTemplates.projectPathTemplate.match(projectName).project;\n    }\n    /**\n     * Terminate the gRPC channel and close the client.\n     *\n     * The client will no longer be usable and all future behavior is undefined.\n     * @returns {Promise} A promise that resolves when the client is closed.\n     */\n    close() {\n        if (this.firestoreAdminStub && !this._terminated) {\n            return this.firestoreAdminStub.then(stub => {\n                this._terminated = true;\n                stub.close();\n                this.locationsClient.close();\n                this.operationsClient.close();\n            });\n        }\n        return Promise.resolve();\n    }\n}\nexports.FirestoreAdminClient = FirestoreAdminClient;\n//# sourceMappingURL=firestore_admin_client.js.map"],"mappings":"AAAA,YAAY;;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAA,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7DD,OAAO,CAACE,oBAAoB,GAAG,KAAK,CAAC;AACrC,MAAMC,UAAU,GAAGC,OAAO,CAAC,4BAA4B,CAAC;AACxD;AACA;AACA;AACA;AACA;AACA,MAAMC,WAAW,GAAGD,OAAO,CAAC,sCAAsC,CAAC;AACnE,MAAME,OAAO,GAAGF,OAAO,CAAC,uBAAuB,CAAC,CAACE,OAAO;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMJ,oBAAoB,CAAC;EACvB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIK,WAAWA,CAACC,IAAI,EAAEC,WAAW,EAAE;IAC3B,IAAIC,EAAE,EAAEC,EAAE;IACV,IAAI,CAACC,WAAW,GAAG,KAAK;IACxB,IAAI,CAACC,WAAW,GAAG;MACfC,IAAI,EAAE,CAAC,CAAC;MACRC,MAAM,EAAE,CAAC,CAAC;MACVC,WAAW,EAAE,CAAC,CAAC;MACfC,QAAQ,EAAE,CAAC;IACf,CAAC;IACD;IACA,MAAMC,aAAa,GAAG,IAAI,CAACX,WAAW;IACtC,MAAMY,WAAW,GAAG,CAACX,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,IAAI,CAACW,WAAW,MAAMX,IAAI,KAAK,IAAI,IAAIA,IAAI,KAAK,KAAK,CAAC,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CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIuC,kBAAkBA,CAACrC,OAAO,EAAEE,OAAO,EAAE;IACjC,OAAO,IAAI,CAAChG,eAAe,CAACmI,kBAAkB,CAACrC,OAAO,EAAEE,OAAO,CAAC;EACpE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIe,YAAYA,CAACjB,OAAO,EAAEE,OAAO,EAAEJ,QAAQ,EAAE;IACrC,OAAO,IAAI,CAACxD,gBAAgB,CAAC2E,YAAY,CAACjB,OAAO,EAAEE,OAAO,EAAEJ,QAAQ,CAAC;EACzE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIwC,mBAAmBA,CAACtC,OAAO,EAAEE,OAAO,EAAE;IAClC,OAAO,IAAI,CAAC5D,gBAAgB,CAACgG,mBAAmB,CAACtC,OAAO,EAAEE,OAAO,CAAC;EACtE;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIqC,eAAeA,CAACvC,OAAO,EAAEE,OAAO,EAAEJ,QAAQ,EAAE;IACxC,OAAO,IAAI,CAACxD,gBAAgB,CAACiG,eAAe,CAACvC,OAAO,EAAEE,OAAO,EAAEJ,QAAQ,CAAC;EAC5E;EACA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;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"},"metadata":{},"sourceType":"script","externalDependencies":[]}