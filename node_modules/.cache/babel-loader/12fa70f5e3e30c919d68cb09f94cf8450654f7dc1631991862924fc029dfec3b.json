{"ast":null,"code":"/*! firebase-admin v11.9.0 */\n\"use strict\";\n\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Model = exports.MachineLearning = void 0;\nconst index_1 = require(\"../storage/index\");\nconst error_1 = require(\"../utils/error\");\nconst validator = require(\"../utils/validator\");\nconst deep_copy_1 = require(\"../utils/deep-copy\");\nconst utils = require(\"../utils\");\nconst machine_learning_api_client_1 = require(\"./machine-learning-api-client\");\nconst machine_learning_utils_1 = require(\"./machine-learning-utils\");\n/**\n * The Firebase `MachineLearning` service interface.\n */\nclass MachineLearning {\n  /**\n   * @param app - The app for this ML service.\n   * @constructor\n   * @internal\n   */\n  constructor(app) {\n    if (!validator.isNonNullObject(app) || !('options' in app)) {\n      throw new error_1.FirebaseError({\n        code: 'machine-learning/invalid-argument',\n        message: 'First argument passed to admin.machineLearning() must be a ' + 'valid Firebase app instance.'\n      });\n    }\n    this.appInternal = app;\n    this.client = new machine_learning_api_client_1.MachineLearningApiClient(app);\n  }\n  /**\n   *  The {@link firebase-admin.app#App} associated with the current `MachineLearning`\n   *  service instance.\n   */\n  get app() {\n    return this.appInternal;\n  }\n  /**\n   * Creates a model in the current Firebase project.\n   *\n   * @param model - The model to create.\n   *\n   * @returns A Promise fulfilled with the created model.\n   */\n  createModel(model) {\n    return this.signUrlIfPresent(model).then(modelContent => this.client.createModel(modelContent)).then(operation => this.client.handleOperation(operation)).then(modelResponse => new Model(modelResponse, this.client));\n  }\n  /**\n   * Updates a model's metadata or model file.\n   *\n   * @param modelId - The ID of the model to update.\n   * @param model - The model fields to update.\n   *\n   * @returns A Promise fulfilled with the updated model.\n   */\n  updateModel(modelId, model) {\n    const updateMask = utils.generateUpdateMask(model);\n    return this.signUrlIfPresent(model).then(modelContent => this.client.updateModel(modelId, modelContent, updateMask)).then(operation => this.client.handleOperation(operation)).then(modelResponse => new Model(modelResponse, this.client));\n  }\n  /**\n   * Publishes a Firebase ML model.\n   *\n   * A published model can be downloaded to client apps.\n   *\n   * @param modelId - The ID of the model to publish.\n   *\n   * @returns A Promise fulfilled with the published model.\n   */\n  publishModel(modelId) {\n    return this.setPublishStatus(modelId, true);\n  }\n  /**\n   * Unpublishes a Firebase ML model.\n   *\n   * @param modelId - The ID of the model to unpublish.\n   *\n   * @returns A Promise fulfilled with the unpublished model.\n   */\n  unpublishModel(modelId) {\n    return this.setPublishStatus(modelId, false);\n  }\n  /**\n   * Gets the model specified by the given ID.\n   *\n   * @param modelId - The ID of the model to get.\n   *\n   * @returns A Promise fulfilled with the model object.\n   */\n  getModel(modelId) {\n    return this.client.getModel(modelId).then(modelResponse => new Model(modelResponse, this.client));\n  }\n  /**\n   * Lists the current project's models.\n   *\n   * @param options - The listing options.\n   *\n   * @returns A promise that\n   *     resolves with the current (filtered) list of models and the next page\n   *     token. For the last page, an empty list of models and no page token\n   *     are returned.\n   */\n  listModels() {\n    let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    return this.client.listModels(options).then(resp => {\n      if (!validator.isNonNullObject(resp)) {\n        throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', `Invalid ListModels response: ${JSON.stringify(resp)}`);\n      }\n      let models = [];\n      if (resp.models) {\n        models = resp.models.map(rs => new Model(rs, this.client));\n      }\n      const result = {\n        models\n      };\n      if (resp.nextPageToken) {\n        result.pageToken = resp.nextPageToken;\n      }\n      return result;\n    });\n  }\n  /**\n   * Deletes a model from the current project.\n   *\n   * @param modelId - The ID of the model to delete.\n   */\n  deleteModel(modelId) {\n    return this.client.deleteModel(modelId);\n  }\n  setPublishStatus(modelId, publish) {\n    const updateMask = ['state.published'];\n    const options = {\n      state: {\n        published: publish\n      }\n    };\n    return this.client.updateModel(modelId, options, updateMask).then(operation => this.client.handleOperation(operation)).then(modelResponse => new Model(modelResponse, this.client));\n  }\n  signUrlIfPresent(options) {\n    const modelOptions = (0, deep_copy_1.deepCopy)(options);\n    if ((0, machine_learning_api_client_1.isGcsTfliteModelOptions)(modelOptions)) {\n      return this.signUrl(modelOptions.tfliteModel.gcsTfliteUri).then(uri => {\n        modelOptions.tfliteModel.gcsTfliteUri = uri;\n        return modelOptions;\n      }).catch(err => {\n        throw new machine_learning_utils_1.FirebaseMachineLearningError('internal-error', `Error during signing upload url: ${err.message}`);\n      });\n    }\n    return Promise.resolve(modelOptions);\n  }\n  signUrl(unsignedUrl) {\n    const MINUTES_IN_MILLIS = 60 * 1000;\n    const URL_VALID_DURATION = 10 * MINUTES_IN_MILLIS;\n    const gcsRegex = /^gs:\\/\\/([a-z0-9_.-]{3,63})\\/(.+)$/;\n    const matches = gcsRegex.exec(unsignedUrl);\n    if (!matches) {\n      throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', `Invalid unsigned url: ${unsignedUrl}`);\n    }\n    const bucketName = matches[1];\n    const blobName = matches[2];\n    const bucket = (0, index_1.getStorage)(this.app).bucket(bucketName);\n    const blob = bucket.file(blobName);\n    return blob.getSignedUrl({\n      action: 'read',\n      expires: Date.now() + URL_VALID_DURATION\n    }).then(signUrl => signUrl[0]);\n  }\n}\nexports.MachineLearning = MachineLearning;\n/**\n * A Firebase ML Model output object.\n */\nclass Model {\n  /**\n   * @internal\n   */\n  constructor(model, client) {\n    this.model = Model.validateAndClone(model);\n    this.client = client;\n  }\n  /** The ID of the model. */\n  get modelId() {\n    return extractModelId(this.model.name);\n  }\n  /**\n   * The model's name. This is the name you use from your app to load the\n   * model.\n   */\n  get displayName() {\n    return this.model.displayName;\n  }\n  /**\n   * The model's tags, which can be used to group or filter models in list\n   * operations.\n   */\n  get tags() {\n    return this.model.tags || [];\n  }\n  /** The timestamp of the model's creation. */\n  get createTime() {\n    return new Date(this.model.createTime).toUTCString();\n  }\n  /** The timestamp of the model's most recent update. */\n  get updateTime() {\n    return new Date(this.model.updateTime).toUTCString();\n  }\n  /** Error message when model validation fails. */\n  get validationError() {\n    return this.model.state?.validationError?.message;\n  }\n  /** True if the model is published. */\n  get published() {\n    return this.model.state?.published || false;\n  }\n  /**\n   * The ETag identifier of the current version of the model. This value\n   * changes whenever you update any of the model's properties.\n   */\n  get etag() {\n    return this.model.etag;\n  }\n  /**\n   * The hash of the model's `tflite` file. This value changes only when\n   * you upload a new TensorFlow Lite model.\n   */\n  get modelHash() {\n    return this.model.modelHash;\n  }\n  /** Metadata about the model's TensorFlow Lite model file. */\n  get tfliteModel() {\n    // Make a copy so people can't directly modify the private this.model object.\n    return (0, deep_copy_1.deepCopy)(this.model.tfliteModel);\n  }\n  /**\n   * True if the model is locked by a server-side operation. You can't make\n   * changes to a locked model. See {@link Model.waitForUnlocked}.\n   */\n  get locked() {\n    return (this.model.activeOperations?.length ?? 0) > 0;\n  }\n  /**\n   * Return the model as a JSON object.\n   */\n  toJSON() {\n    // We can't just return this.model because it has extra fields and\n    // different formats etc. So we build the expected model object.\n    const jsonModel = {\n      modelId: this.modelId,\n      displayName: this.displayName,\n      tags: this.tags,\n      createTime: this.createTime,\n      updateTime: this.updateTime,\n      published: this.published,\n      etag: this.etag,\n      locked: this.locked\n    };\n    // Also add possibly undefined fields if they exist.\n    if (this.validationError) {\n      jsonModel['validationError'] = this.validationError;\n    }\n    if (this.modelHash) {\n      jsonModel['modelHash'] = this.modelHash;\n    }\n    if (this.tfliteModel) {\n      jsonModel['tfliteModel'] = this.tfliteModel;\n    }\n    return jsonModel;\n  }\n  /**\n   * Wait for the model to be unlocked.\n   *\n   * @param maxTimeMillis - The maximum time in milliseconds to wait.\n   *     If not specified, a default maximum of 2 minutes is used.\n   *\n   * @returns A promise that resolves when the model is unlocked\n   *   or the maximum wait time has passed.\n   */\n  waitForUnlocked(maxTimeMillis) {\n    if ((this.model.activeOperations?.length ?? 0) > 0) {\n      // The client will always be defined on Models that have activeOperations\n      // because models with active operations came back from the server and\n      // were constructed with a non-empty client.\n      return this.client.handleOperation(this.model.activeOperations[0], {\n        wait: true,\n        maxTimeMillis\n      }).then(modelResponse => {\n        this.model = Model.validateAndClone(modelResponse);\n      });\n    }\n    return Promise.resolve();\n  }\n  static validateAndClone(model) {\n    if (!validator.isNonNullObject(model) || !validator.isNonEmptyString(model.name) || !validator.isNonEmptyString(model.createTime) || !validator.isNonEmptyString(model.updateTime) || !validator.isNonEmptyString(model.displayName) || !validator.isNonEmptyString(model.etag)) {\n      throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-server-response', `Invalid Model response: ${JSON.stringify(model)}`);\n    }\n    const tmpModel = (0, deep_copy_1.deepCopy)(model);\n    // If tflite Model is specified, it must have a source consisting of\n    // oneof {gcsTfliteUri, automlModel}\n    if (model.tfliteModel && !validator.isNonEmptyString(model.tfliteModel.gcsTfliteUri) && !validator.isNonEmptyString(model.tfliteModel.automlModel)) {\n      // If we have some other source, ignore the whole tfliteModel.\n      delete tmpModel.tfliteModel;\n    }\n    // Remove '@type' field. We don't need it.\n    if (tmpModel['@type']) {\n      delete tmpModel['@type'];\n    }\n    return tmpModel;\n  }\n}\nexports.Model = Model;\nfunction extractModelId(resourceName) {\n  return resourceName.split('/').pop();\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","Model","MachineLearning","index_1","require","error_1","validator","deep_copy_1","utils","machine_learning_api_client_1","machine_learning_utils_1","constructor","app","isNonNullObject","FirebaseError","code","message","appInternal","client","MachineLearningApiClient","createModel","model","signUrlIfPresent","then","modelContent","operation","handleOperation","modelResponse","updateModel","modelId","updateMask","generateUpdateMask","publishModel","setPublishStatus","unpublishModel","getModel","listModels","options","arguments","length","undefined","resp","FirebaseMachineLearningError","JSON","stringify","models","map","rs","result","nextPageToken","pageToken","deleteModel","publish","state","published","modelOptions","deepCopy","isGcsTfliteModelOptions","signUrl","tfliteModel","gcsTfliteUri","uri","catch","err","Promise","resolve","unsignedUrl","MINUTES_IN_MILLIS","URL_VALID_DURATION","gcsRegex","matches","exec","bucketName","blobName","bucket","getStorage","blob","file","getSignedUrl","action","expires","Date","now","validateAndClone","extractModelId","name","displayName","tags","createTime","toUTCString","updateTime","validationError","etag","modelHash","locked","activeOperations","toJSON","jsonModel","waitForUnlocked","maxTimeMillis","wait","isNonEmptyString","tmpModel","automlModel","resourceName","split","pop"],"sources":["D:/Coding/React/taskmybusiness/node_modules/firebase-admin/lib/machine-learning/machine-learning.js"],"sourcesContent":["/*! firebase-admin v11.9.0 */\n\"use strict\";\n/*!\n * Copyright 2020 Google Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Model = exports.MachineLearning = void 0;\nconst index_1 = require(\"../storage/index\");\nconst error_1 = require(\"../utils/error\");\nconst validator = require(\"../utils/validator\");\nconst deep_copy_1 = require(\"../utils/deep-copy\");\nconst utils = require(\"../utils\");\nconst machine_learning_api_client_1 = require(\"./machine-learning-api-client\");\nconst machine_learning_utils_1 = require(\"./machine-learning-utils\");\n/**\n * The Firebase `MachineLearning` service interface.\n */\nclass MachineLearning {\n    /**\n     * @param app - The app for this ML service.\n     * @constructor\n     * @internal\n     */\n    constructor(app) {\n        if (!validator.isNonNullObject(app) || !('options' in app)) {\n            throw new error_1.FirebaseError({\n                code: 'machine-learning/invalid-argument',\n                message: 'First argument passed to admin.machineLearning() must be a ' +\n                    'valid Firebase app instance.',\n            });\n        }\n        this.appInternal = app;\n        this.client = new machine_learning_api_client_1.MachineLearningApiClient(app);\n    }\n    /**\n     *  The {@link firebase-admin.app#App} associated with the current `MachineLearning`\n     *  service instance.\n     */\n    get app() {\n        return this.appInternal;\n    }\n    /**\n     * Creates a model in the current Firebase project.\n     *\n     * @param model - The model to create.\n     *\n     * @returns A Promise fulfilled with the created model.\n     */\n    createModel(model) {\n        return this.signUrlIfPresent(model)\n            .then((modelContent) => this.client.createModel(modelContent))\n            .then((operation) => this.client.handleOperation(operation))\n            .then((modelResponse) => new Model(modelResponse, this.client));\n    }\n    /**\n     * Updates a model's metadata or model file.\n     *\n     * @param modelId - The ID of the model to update.\n     * @param model - The model fields to update.\n     *\n     * @returns A Promise fulfilled with the updated model.\n     */\n    updateModel(modelId, model) {\n        const updateMask = utils.generateUpdateMask(model);\n        return this.signUrlIfPresent(model)\n            .then((modelContent) => this.client.updateModel(modelId, modelContent, updateMask))\n            .then((operation) => this.client.handleOperation(operation))\n            .then((modelResponse) => new Model(modelResponse, this.client));\n    }\n    /**\n     * Publishes a Firebase ML model.\n     *\n     * A published model can be downloaded to client apps.\n     *\n     * @param modelId - The ID of the model to publish.\n     *\n     * @returns A Promise fulfilled with the published model.\n     */\n    publishModel(modelId) {\n        return this.setPublishStatus(modelId, true);\n    }\n    /**\n     * Unpublishes a Firebase ML model.\n     *\n     * @param modelId - The ID of the model to unpublish.\n     *\n     * @returns A Promise fulfilled with the unpublished model.\n     */\n    unpublishModel(modelId) {\n        return this.setPublishStatus(modelId, false);\n    }\n    /**\n     * Gets the model specified by the given ID.\n     *\n     * @param modelId - The ID of the model to get.\n     *\n     * @returns A Promise fulfilled with the model object.\n     */\n    getModel(modelId) {\n        return this.client.getModel(modelId)\n            .then((modelResponse) => new Model(modelResponse, this.client));\n    }\n    /**\n     * Lists the current project's models.\n     *\n     * @param options - The listing options.\n     *\n     * @returns A promise that\n     *     resolves with the current (filtered) list of models and the next page\n     *     token. For the last page, an empty list of models and no page token\n     *     are returned.\n     */\n    listModels(options = {}) {\n        return this.client.listModels(options)\n            .then((resp) => {\n            if (!validator.isNonNullObject(resp)) {\n                throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', `Invalid ListModels response: ${JSON.stringify(resp)}`);\n            }\n            let models = [];\n            if (resp.models) {\n                models = resp.models.map((rs) => new Model(rs, this.client));\n            }\n            const result = { models };\n            if (resp.nextPageToken) {\n                result.pageToken = resp.nextPageToken;\n            }\n            return result;\n        });\n    }\n    /**\n     * Deletes a model from the current project.\n     *\n     * @param modelId - The ID of the model to delete.\n     */\n    deleteModel(modelId) {\n        return this.client.deleteModel(modelId);\n    }\n    setPublishStatus(modelId, publish) {\n        const updateMask = ['state.published'];\n        const options = { state: { published: publish } };\n        return this.client.updateModel(modelId, options, updateMask)\n            .then((operation) => this.client.handleOperation(operation))\n            .then((modelResponse) => new Model(modelResponse, this.client));\n    }\n    signUrlIfPresent(options) {\n        const modelOptions = (0, deep_copy_1.deepCopy)(options);\n        if ((0, machine_learning_api_client_1.isGcsTfliteModelOptions)(modelOptions)) {\n            return this.signUrl(modelOptions.tfliteModel.gcsTfliteUri)\n                .then((uri) => {\n                modelOptions.tfliteModel.gcsTfliteUri = uri;\n                return modelOptions;\n            })\n                .catch((err) => {\n                throw new machine_learning_utils_1.FirebaseMachineLearningError('internal-error', `Error during signing upload url: ${err.message}`);\n            });\n        }\n        return Promise.resolve(modelOptions);\n    }\n    signUrl(unsignedUrl) {\n        const MINUTES_IN_MILLIS = 60 * 1000;\n        const URL_VALID_DURATION = 10 * MINUTES_IN_MILLIS;\n        const gcsRegex = /^gs:\\/\\/([a-z0-9_.-]{3,63})\\/(.+)$/;\n        const matches = gcsRegex.exec(unsignedUrl);\n        if (!matches) {\n            throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-argument', `Invalid unsigned url: ${unsignedUrl}`);\n        }\n        const bucketName = matches[1];\n        const blobName = matches[2];\n        const bucket = (0, index_1.getStorage)(this.app).bucket(bucketName);\n        const blob = bucket.file(blobName);\n        return blob.getSignedUrl({\n            action: 'read',\n            expires: Date.now() + URL_VALID_DURATION,\n        }).then((signUrl) => signUrl[0]);\n    }\n}\nexports.MachineLearning = MachineLearning;\n/**\n * A Firebase ML Model output object.\n */\nclass Model {\n    /**\n     * @internal\n     */\n    constructor(model, client) {\n        this.model = Model.validateAndClone(model);\n        this.client = client;\n    }\n    /** The ID of the model. */\n    get modelId() {\n        return extractModelId(this.model.name);\n    }\n    /**\n     * The model's name. This is the name you use from your app to load the\n     * model.\n     */\n    get displayName() {\n        return this.model.displayName;\n    }\n    /**\n     * The model's tags, which can be used to group or filter models in list\n     * operations.\n     */\n    get tags() {\n        return this.model.tags || [];\n    }\n    /** The timestamp of the model's creation. */\n    get createTime() {\n        return new Date(this.model.createTime).toUTCString();\n    }\n    /** The timestamp of the model's most recent update. */\n    get updateTime() {\n        return new Date(this.model.updateTime).toUTCString();\n    }\n    /** Error message when model validation fails. */\n    get validationError() {\n        return this.model.state?.validationError?.message;\n    }\n    /** True if the model is published. */\n    get published() {\n        return this.model.state?.published || false;\n    }\n    /**\n     * The ETag identifier of the current version of the model. This value\n     * changes whenever you update any of the model's properties.\n     */\n    get etag() {\n        return this.model.etag;\n    }\n    /**\n     * The hash of the model's `tflite` file. This value changes only when\n     * you upload a new TensorFlow Lite model.\n     */\n    get modelHash() {\n        return this.model.modelHash;\n    }\n    /** Metadata about the model's TensorFlow Lite model file. */\n    get tfliteModel() {\n        // Make a copy so people can't directly modify the private this.model object.\n        return (0, deep_copy_1.deepCopy)(this.model.tfliteModel);\n    }\n    /**\n     * True if the model is locked by a server-side operation. You can't make\n     * changes to a locked model. See {@link Model.waitForUnlocked}.\n     */\n    get locked() {\n        return (this.model.activeOperations?.length ?? 0) > 0;\n    }\n    /**\n     * Return the model as a JSON object.\n     */\n    toJSON() {\n        // We can't just return this.model because it has extra fields and\n        // different formats etc. So we build the expected model object.\n        const jsonModel = {\n            modelId: this.modelId,\n            displayName: this.displayName,\n            tags: this.tags,\n            createTime: this.createTime,\n            updateTime: this.updateTime,\n            published: this.published,\n            etag: this.etag,\n            locked: this.locked,\n        };\n        // Also add possibly undefined fields if they exist.\n        if (this.validationError) {\n            jsonModel['validationError'] = this.validationError;\n        }\n        if (this.modelHash) {\n            jsonModel['modelHash'] = this.modelHash;\n        }\n        if (this.tfliteModel) {\n            jsonModel['tfliteModel'] = this.tfliteModel;\n        }\n        return jsonModel;\n    }\n    /**\n     * Wait for the model to be unlocked.\n     *\n     * @param maxTimeMillis - The maximum time in milliseconds to wait.\n     *     If not specified, a default maximum of 2 minutes is used.\n     *\n     * @returns A promise that resolves when the model is unlocked\n     *   or the maximum wait time has passed.\n     */\n    waitForUnlocked(maxTimeMillis) {\n        if ((this.model.activeOperations?.length ?? 0) > 0) {\n            // The client will always be defined on Models that have activeOperations\n            // because models with active operations came back from the server and\n            // were constructed with a non-empty client.\n            return this.client.handleOperation(this.model.activeOperations[0], { wait: true, maxTimeMillis })\n                .then((modelResponse) => {\n                this.model = Model.validateAndClone(modelResponse);\n            });\n        }\n        return Promise.resolve();\n    }\n    static validateAndClone(model) {\n        if (!validator.isNonNullObject(model) ||\n            !validator.isNonEmptyString(model.name) ||\n            !validator.isNonEmptyString(model.createTime) ||\n            !validator.isNonEmptyString(model.updateTime) ||\n            !validator.isNonEmptyString(model.displayName) ||\n            !validator.isNonEmptyString(model.etag)) {\n            throw new machine_learning_utils_1.FirebaseMachineLearningError('invalid-server-response', `Invalid Model response: ${JSON.stringify(model)}`);\n        }\n        const tmpModel = (0, deep_copy_1.deepCopy)(model);\n        // If tflite Model is specified, it must have a source consisting of\n        // oneof {gcsTfliteUri, automlModel}\n        if (model.tfliteModel &&\n            !validator.isNonEmptyString(model.tfliteModel.gcsTfliteUri) &&\n            !validator.isNonEmptyString(model.tfliteModel.automlModel)) {\n            // If we have some other source, ignore the whole tfliteModel.\n            delete tmpModel.tfliteModel;\n        }\n        // Remove '@type' field. We don't need it.\n        if (tmpModel['@type']) {\n            delete tmpModel['@type'];\n        }\n        return tmpModel;\n    }\n}\nexports.Model = Model;\nfunction extractModelId(resourceName) {\n    return resourceName.split('/').pop();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}